
line-follower.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  000024c6  0000255a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000024c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000035  00800140  00800140  0000259a  2**0
                  ALLOC
  3 .debug_aranges 00000560  00000000  00000000  0000259a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00001203  00000000  00000000  00002afa  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003360  00000000  00000000  00003cfd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001162  00000000  00000000  0000705d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002ce9  00000000  00000000  000081bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000009f0  00000000  00000000  0000aea8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001cf1  00000000  00000000  0000b898  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001898  00000000  00000000  0000d589  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000520  00000000  00000000  0000ee21  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6d 00 	jmp	0xda	; 0xda <__ctors_end>
       4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
       8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
       c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      10:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      14:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      18:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      1c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      20:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      24:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__vector_9>
      28:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      2c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      30:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      34:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__vector_13>
      38:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      3c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      40:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      44:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      48:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      4c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      50:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      54:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      58:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      5c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      60:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      64:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      68:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      6c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      70:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      74:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      78:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      7c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      80:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      84:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      88:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      8c:	c6 04       	cpc	r12, r6
      8e:	cc 04       	cpc	r12, r12
      90:	cf 04       	cpc	r12, r15
      92:	d2 04       	cpc	r13, r2
      94:	d5 04       	cpc	r13, r5
      96:	d8 04       	cpc	r13, r8
      98:	db 04       	cpc	r13, r11
      9a:	de 04       	cpc	r13, r14
      9c:	e1 04       	cpc	r14, r1
      9e:	e4 04       	cpc	r14, r4
      a0:	e7 04       	cpc	r14, r7
      a2:	ea 04       	cpc	r14, r10

000000a4 <welcome_line1>:
      a4:	20 50 6f 6c 6f 6c 75 00                              Pololu.

000000ac <welcome_line2>:
      ac:	33 f7 20 52 6f 62 6f 74 00                          3. Robot.

000000b5 <name_line1>:
      b5:	57 61 6c 6c 00                                      Wall.

000000ba <name_line2>:
      ba:	46 6f 6c 6c 6f 77 65 72 00                          Follower.

000000c3 <welcome>:
      c3:	3e 67 33 32 3e 3e 63 33 32 00                       >g32>>c32.

000000cd <go>:
      cd:	4c 31 36 20 63 64 65 67 72 65 67 34 00              L16 cdegreg4.

000000da <__ctors_end>:
      da:	11 24       	eor	r1, r1
      dc:	1f be       	out	0x3f, r1	; 63
      de:	cf ef       	ldi	r28, 0xFF	; 255
      e0:	d0 e1       	ldi	r29, 0x10	; 16
      e2:	de bf       	out	0x3e, r29	; 62
      e4:	cd bf       	out	0x3d, r28	; 61

000000e6 <__do_copy_data>:
      e6:	11 e0       	ldi	r17, 0x01	; 1
      e8:	a0 e0       	ldi	r26, 0x00	; 0
      ea:	b1 e0       	ldi	r27, 0x01	; 1
      ec:	e6 ec       	ldi	r30, 0xC6	; 198
      ee:	f4 e2       	ldi	r31, 0x24	; 36
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0b bf       	out	0x3b, r16	; 59
      f4:	02 c0       	rjmp	.+4      	; 0xfa <__do_copy_data+0x14>
      f6:	07 90       	elpm	r0, Z+
      f8:	0d 92       	st	X+, r0
      fa:	a0 34       	cpi	r26, 0x40	; 64
      fc:	b1 07       	cpc	r27, r17
      fe:	d9 f7       	brne	.-10     	; 0xf6 <__do_copy_data+0x10>

00000100 <__do_clear_bss>:
     100:	11 e0       	ldi	r17, 0x01	; 1
     102:	a0 e4       	ldi	r26, 0x40	; 64
     104:	b1 e0       	ldi	r27, 0x01	; 1
     106:	01 c0       	rjmp	.+2      	; 0x10a <.do_clear_bss_start>

00000108 <.do_clear_bss_loop>:
     108:	1d 92       	st	X+, r1

0000010a <.do_clear_bss_start>:
     10a:	a5 37       	cpi	r26, 0x75	; 117
     10c:	b1 07       	cpc	r27, r17
     10e:	e1 f7       	brne	.-8      	; 0x108 <.do_clear_bss_loop>
     110:	0e 94 32 01 	call	0x264	; 0x264 <main>
     114:	0c 94 61 12 	jmp	0x24c2	; 0x24c2 <_exit>

00000118 <__bad_interrupt>:
     118:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011c <turn_in_place>:
        // Back up slightly to the left
        set_motors(-50,-90);
}

void turn_in_place() {
        if (TIME_TO_DISPLAY) {
     11c:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <get_ms>
     120:	24 e6       	ldi	r18, 0x64	; 100
     122:	30 e0       	ldi	r19, 0x00	; 0
     124:	40 e0       	ldi	r20, 0x00	; 0
     126:	50 e0       	ldi	r21, 0x00	; 0
     128:	0e 94 73 10 	call	0x20e6	; 0x20e6 <__udivmodsi4>
     12c:	61 15       	cp	r22, r1
     12e:	71 05       	cpc	r23, r1
     130:	81 05       	cpc	r24, r1
     132:	91 05       	cpc	r25, r1
     134:	91 f4       	brne	.+36     	; 0x15a <turn_in_place+0x3e>
                clear();
     136:	0e 94 ee 09 	call	0x13dc	; 0x13dc <clear>
                lcd_goto_xy(0,0);
     13a:	80 e0       	ldi	r24, 0x00	; 0
     13c:	60 e0       	ldi	r22, 0x00	; 0
     13e:	0e 94 be 09 	call	0x137c	; 0x137c <lcd_goto_xy>
                print("Front");
     142:	80 e0       	ldi	r24, 0x00	; 0
     144:	91 e0       	ldi	r25, 0x01	; 1
     146:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <print>
                lcd_goto_xy(0,1);
     14a:	80 e0       	ldi	r24, 0x00	; 0
     14c:	61 e0       	ldi	r22, 0x01	; 1
     14e:	0e 94 be 09 	call	0x137c	; 0x137c <lcd_goto_xy>
                print("Obstacle");
     152:	86 e0       	ldi	r24, 0x06	; 6
     154:	91 e0       	ldi	r25, 0x01	; 1
     156:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <print>
        }

        // Turn to the right in place
        set_motors(50, -50);
     15a:	82 e3       	ldi	r24, 0x32	; 50
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	6e ec       	ldi	r22, 0xCE	; 206
     160:	7f ef       	ldi	r23, 0xFF	; 255
     162:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <set_motors>
}
     166:	08 95       	ret

00000168 <back_up>:
        while(is_playing());
}

void back_up()
{
        if (TIME_TO_DISPLAY)
     168:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <get_ms>
     16c:	24 e6       	ldi	r18, 0x64	; 100
     16e:	30 e0       	ldi	r19, 0x00	; 0
     170:	40 e0       	ldi	r20, 0x00	; 0
     172:	50 e0       	ldi	r21, 0x00	; 0
     174:	0e 94 73 10 	call	0x20e6	; 0x20e6 <__udivmodsi4>
     178:	61 15       	cp	r22, r1
     17a:	71 05       	cpc	r23, r1
     17c:	81 05       	cpc	r24, r1
     17e:	91 05       	cpc	r25, r1
     180:	91 f4       	brne	.+36     	; 0x1a6 <back_up+0x3e>
        {
                clear();
     182:	0e 94 ee 09 	call	0x13dc	; 0x13dc <clear>
                lcd_goto_xy(0,0);
     186:	80 e0       	ldi	r24, 0x00	; 0
     188:	60 e0       	ldi	r22, 0x00	; 0
     18a:	0e 94 be 09 	call	0x137c	; 0x137c <lcd_goto_xy>
                print("Backing");
     18e:	8f e0       	ldi	r24, 0x0F	; 15
     190:	91 e0       	ldi	r25, 0x01	; 1
     192:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <print>
                lcd_goto_xy(0,1);
     196:	80 e0       	ldi	r24, 0x00	; 0
     198:	61 e0       	ldi	r22, 0x01	; 1
     19a:	0e 94 be 09 	call	0x137c	; 0x137c <lcd_goto_xy>
                print("Up");
     19e:	87 e1       	ldi	r24, 0x17	; 23
     1a0:	91 e0       	ldi	r25, 0x01	; 1
     1a2:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <print>
        }

        // Back up slightly to the left
        set_motors(-50,-90);
     1a6:	8e ec       	ldi	r24, 0xCE	; 206
     1a8:	9f ef       	ldi	r25, 0xFF	; 255
     1aa:	66 ea       	ldi	r22, 0xA6	; 166
     1ac:	7f ef       	ldi	r23, 0xFF	; 255
     1ae:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <set_motors>
}
     1b2:	08 95       	ret

000001b4 <initialize>:
#define TIME_TO_DISPLAY (MS_ELAPSED_IS(display_interval_ms))

void initialize()
{
        // Set PC5 as an input with internal pull-up disabled
        DDRC  &= ~(1<< PORTC5);
     1b4:	a5 98       	cbi	0x14, 5	; 20
        PORTC &= ~(1<< PORTC5);
     1b6:	ad 98       	cbi	0x15, 5	; 21

        // Play welcome music and display a message
        print_from_program_space(welcome_line1);
     1b8:	84 ea       	ldi	r24, 0xA4	; 164
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	0e 94 ca 0a 	call	0x1594	; 0x1594 <print_from_program_space>
        lcd_goto_xy(0,1);
     1c0:	80 e0       	ldi	r24, 0x00	; 0
     1c2:	61 e0       	ldi	r22, 0x01	; 1
     1c4:	0e 94 be 09 	call	0x137c	; 0x137c <lcd_goto_xy>
        print_from_program_space(welcome_line2);
     1c8:	8c ea       	ldi	r24, 0xAC	; 172
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	0e 94 ca 0a 	call	0x1594	; 0x1594 <print_from_program_space>
        play_from_program_space(welcome);
     1d0:	83 ec       	ldi	r24, 0xC3	; 195
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	0e 94 93 07 	call	0xf26	; 0xf26 <play_from_program_space>
        delay_ms(1000);
     1d8:	88 ee       	ldi	r24, 0xE8	; 232
     1da:	93 e0       	ldi	r25, 0x03	; 3
     1dc:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <delay_ms>

        clear();
     1e0:	0e 94 ee 09 	call	0x13dc	; 0x13dc <clear>
        print_from_program_space(name_line1);
     1e4:	85 eb       	ldi	r24, 0xB5	; 181
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	0e 94 ca 0a 	call	0x1594	; 0x1594 <print_from_program_space>
        lcd_goto_xy(0,1);
     1ec:	80 e0       	ldi	r24, 0x00	; 0
     1ee:	61 e0       	ldi	r22, 0x01	; 1
     1f0:	0e 94 be 09 	call	0x137c	; 0x137c <lcd_goto_xy>
        print_from_program_space(name_line2);
     1f4:	8a eb       	ldi	r24, 0xBA	; 186
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	0e 94 ca 0a 	call	0x1594	; 0x1594 <print_from_program_space>
        delay_ms(1000);
     1fc:	88 ee       	ldi	r24, 0xE8	; 232
     1fe:	93 e0       	ldi	r25, 0x03	; 3
     200:	18 c0       	rjmp	.+48     	; 0x232 <initialize+0x7e>

        // Display battery voltage and wait for button press
        while(!button_is_pressed(BUTTON_B))
        {
                clear();
     202:	0e 94 ee 09 	call	0x13dc	; 0x13dc <clear>
int read_temperature_c();

unsigned int read_battery_millivolts_3pi();
static inline unsigned int read_battery_millivolts()
{
  return read_battery_millivolts_3pi();
     206:	0e 94 8f 03 	call	0x71e	; 0x71e <read_battery_millivolts_3pi>
                print_long(read_battery_millivolts());
     20a:	a0 e0       	ldi	r26, 0x00	; 0
     20c:	b0 e0       	ldi	r27, 0x00	; 0
     20e:	bc 01       	movw	r22, r24
     210:	cd 01       	movw	r24, r26
     212:	0e 94 b9 0a 	call	0x1572	; 0x1572 <print_long>
                print("mV");
     216:	8a e1       	ldi	r24, 0x1A	; 26
     218:	91 e0       	ldi	r25, 0x01	; 1
     21a:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <print>
                lcd_goto_xy(0,1);
     21e:	80 e0       	ldi	r24, 0x00	; 0
     220:	61 e0       	ldi	r22, 0x01	; 1
     222:	0e 94 be 09 	call	0x137c	; 0x137c <lcd_goto_xy>
                print("Press B");
     226:	8d e1       	ldi	r24, 0x1D	; 29
     228:	91 e0       	ldi	r25, 0x01	; 1
     22a:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <print>
                delay_ms(100);
     22e:	84 e6       	ldi	r24, 0x64	; 100
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <delay_ms>
        lcd_goto_xy(0,1);
        print_from_program_space(name_line2);
        delay_ms(1000);

        // Display battery voltage and wait for button press
        while(!button_is_pressed(BUTTON_B))
     236:	80 e1       	ldi	r24, 0x10	; 16
     238:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <button_is_pressed>
     23c:	88 23       	and	r24, r24
     23e:	09 f3       	breq	.-62     	; 0x202 <initialize+0x4e>
                delay_ms(100);
        }

        // Always wait for the button to be released so that 3pi doesn't
        // start moving until your hand is away from it.
        wait_for_button_release(BUTTON_B);
     240:	80 e1       	ldi	r24, 0x10	; 16
     242:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <wait_for_button_release>
        clear();
     246:	0e 94 ee 09 	call	0x13dc	; 0x13dc <clear>
        print("Go!");
     24a:	85 e2       	ldi	r24, 0x25	; 37
     24c:	91 e0       	ldi	r25, 0x01	; 1
     24e:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <print>

        // Play music and wait for it to finish before we start driving.
        play_from_program_space(go);
     252:	8d ec       	ldi	r24, 0xCD	; 205
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	0e 94 93 07 	call	0xf26	; 0xf26 <play_from_program_space>
        while(is_playing());
     25a:	0e 94 bb 03 	call	0x776	; 0x776 <is_playing>
     25e:	88 23       	and	r24, r24
     260:	e1 f7       	brne	.-8      	; 0x25a <initialize+0xa6>
}
     262:	08 95       	ret

00000264 <main>:
        // Turn to the right in place
        set_motors(50, -50);
}

int main()
{
     264:	8f 92       	push	r8
     266:	9f 92       	push	r9
     268:	af 92       	push	r10
     26a:	bf 92       	push	r11
     26c:	cf 92       	push	r12
     26e:	df 92       	push	r13
     270:	ef 92       	push	r14
     272:	ff 92       	push	r15
     274:	0f 93       	push	r16
     276:	1f 93       	push	r17
     278:	cf 93       	push	r28
     27a:	df 93       	push	r29
        // set up the 3pi
        initialize();
     27c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <initialize>
     280:	00 e0       	ldi	r16, 0x00	; 0
     282:	10 e0       	ldi	r17, 0x00	; 0
                int proximity = analog_read(7); // 0 (far away) - 650 (close)
                int proportional = proximity - set_point;
                int derivative = proximity - last_proximity;

                // Proportional-Derivative Control Signal
                int pd = proportional / 3 + derivative * 20;
     284:	24 e1       	ldi	r18, 0x14	; 20
     286:	82 2e       	mov	r8, r18
     288:	91 2c       	mov	r9, r1

                int left_set  = base_speed + pd;
                int right_set = base_speed - pd;
     28a:	98 ec       	ldi	r25, 0xC8	; 200
     28c:	a9 2e       	mov	r10, r25
     28e:	b1 2c       	mov	r11, r1
     290:	01 c0       	rjmp	.+2      	; 0x294 <main+0x30>
}

int main()
{
        // set up the 3pi
        initialize();
     292:	8e 01       	movw	r16, r28

        // This is the "main loop" - it will run forever.
        while(1)
        {
                // In case it gets stuck: for 1 second every 15 seconds back up
                if (get_ms() % 15000 > 14000) {
     294:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <get_ms>
     298:	28 e9       	ldi	r18, 0x98	; 152
     29a:	3a e3       	ldi	r19, 0x3A	; 58
     29c:	40 e0       	ldi	r20, 0x00	; 0
     29e:	50 e0       	ldi	r21, 0x00	; 0
     2a0:	0e 94 73 10 	call	0x20e6	; 0x20e6 <__udivmodsi4>
     2a4:	61 5b       	subi	r22, 0xB1	; 177
     2a6:	76 43       	sbci	r23, 0x36	; 54
     2a8:	80 40       	sbci	r24, 0x00	; 0
     2aa:	90 40       	sbci	r25, 0x00	; 0
     2ac:	18 f0       	brcs	.+6      	; 0x2b4 <main+0x50>
                        back_up();
     2ae:	0e 94 b4 00 	call	0x168	; 0x168 <back_up>
     2b2:	f0 cf       	rjmp	.-32     	; 0x294 <main+0x30>
                        continue;
                }

                // If something is directly in front turn to the right in place
                int front_proximity = analog_read(5);
     2b4:	85 e0       	ldi	r24, 0x05	; 5
     2b6:	0e 94 1b 02 	call	0x436	; 0x436 <analog_read>
                if (front_proximity > 200) {
     2ba:	89 3c       	cpi	r24, 0xC9	; 201
     2bc:	91 05       	cpc	r25, r1
     2be:	1c f0       	brlt	.+6      	; 0x2c6 <main+0x62>
                        turn_in_place();
     2c0:	0e 94 8e 00 	call	0x11c	; 0x11c <turn_in_place>
     2c4:	e7 cf       	rjmp	.-50     	; 0x294 <main+0x30>
                        continue;
                }

                int proximity = analog_read(7); // 0 (far away) - 650 (close)
     2c6:	87 e0       	ldi	r24, 0x07	; 7
     2c8:	0e 94 1b 02 	call	0x436	; 0x436 <analog_read>
     2cc:	ec 01       	movw	r28, r24
                int proportional = proximity - set_point;
                int derivative = proximity - last_proximity;

                // Proportional-Derivative Control Signal
                int pd = proportional / 3 + derivative * 20;
     2ce:	80 1b       	sub	r24, r16
     2d0:	91 0b       	sbc	r25, r17
     2d2:	88 9d       	mul	r24, r8
     2d4:	80 01       	movw	r16, r0
     2d6:	89 9d       	mul	r24, r9
     2d8:	10 0d       	add	r17, r0
     2da:	98 9d       	mul	r25, r8
     2dc:	10 0d       	add	r17, r0
     2de:	11 24       	eor	r1, r1
     2e0:	ce 01       	movw	r24, r28
     2e2:	84 56       	subi	r24, 0x64	; 100
     2e4:	90 40       	sbci	r25, 0x00	; 0
     2e6:	63 e0       	ldi	r22, 0x03	; 3
     2e8:	70 e0       	ldi	r23, 0x00	; 0
     2ea:	0e 94 60 10 	call	0x20c0	; 0x20c0 <__divmodhi4>
     2ee:	06 0f       	add	r16, r22
     2f0:	17 1f       	adc	r17, r23

                int left_set  = base_speed + pd;
     2f2:	88 ec       	ldi	r24, 0xC8	; 200
     2f4:	e8 2e       	mov	r14, r24
     2f6:	f1 2c       	mov	r15, r1
     2f8:	e0 0e       	add	r14, r16
     2fa:	f1 1e       	adc	r15, r17
                int right_set = base_speed - pd;
     2fc:	65 01       	movw	r12, r10
     2fe:	c0 1a       	sub	r12, r16
     300:	d1 0a       	sbc	r13, r17

                set_motors(left_set, right_set);
     302:	c7 01       	movw	r24, r14
     304:	b6 01       	movw	r22, r12
     306:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <set_motors>

                if (TIME_TO_DISPLAY) {
     30a:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <get_ms>
     30e:	24 e6       	ldi	r18, 0x64	; 100
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	40 e0       	ldi	r20, 0x00	; 0
     314:	50 e0       	ldi	r21, 0x00	; 0
     316:	0e 94 73 10 	call	0x20e6	; 0x20e6 <__udivmodsi4>
     31a:	61 15       	cp	r22, r1
     31c:	71 05       	cpc	r23, r1
     31e:	81 05       	cpc	r24, r1
     320:	91 05       	cpc	r25, r1
     322:	09 f0       	breq	.+2      	; 0x326 <main+0xc2>
     324:	b6 cf       	rjmp	.-148    	; 0x292 <main+0x2e>
                        clear();
     326:	0e 94 ee 09 	call	0x13dc	; 0x13dc <clear>
                        lcd_goto_xy(0,0);
     32a:	80 e0       	ldi	r24, 0x00	; 0
     32c:	60 e0       	ldi	r22, 0x00	; 0
     32e:	0e 94 be 09 	call	0x137c	; 0x137c <lcd_goto_xy>
                        print_long(proximity);
     332:	be 01       	movw	r22, r28
     334:	88 27       	eor	r24, r24
     336:	77 fd       	sbrc	r23, 7
     338:	80 95       	com	r24
     33a:	98 2f       	mov	r25, r24
     33c:	0e 94 b9 0a 	call	0x1572	; 0x1572 <print_long>

                        lcd_goto_xy(5,0);
     340:	85 e0       	ldi	r24, 0x05	; 5
     342:	60 e0       	ldi	r22, 0x00	; 0
     344:	0e 94 be 09 	call	0x137c	; 0x137c <lcd_goto_xy>
                        print_long(pd);
     348:	b8 01       	movw	r22, r16
     34a:	88 27       	eor	r24, r24
     34c:	77 fd       	sbrc	r23, 7
     34e:	80 95       	com	r24
     350:	98 2f       	mov	r25, r24
     352:	0e 94 b9 0a 	call	0x1572	; 0x1572 <print_long>

                        lcd_goto_xy(0,1);
     356:	80 e0       	ldi	r24, 0x00	; 0
     358:	61 e0       	ldi	r22, 0x01	; 1
     35a:	0e 94 be 09 	call	0x137c	; 0x137c <lcd_goto_xy>
                        print_long(left_set);
     35e:	b7 01       	movw	r22, r14
     360:	88 27       	eor	r24, r24
     362:	77 fd       	sbrc	r23, 7
     364:	80 95       	com	r24
     366:	98 2f       	mov	r25, r24
     368:	0e 94 b9 0a 	call	0x1572	; 0x1572 <print_long>
                        lcd_goto_xy(4,1);
     36c:	84 e0       	ldi	r24, 0x04	; 4
     36e:	61 e0       	ldi	r22, 0x01	; 1
     370:	0e 94 be 09 	call	0x137c	; 0x137c <lcd_goto_xy>
                        print_long(right_set);
     374:	b6 01       	movw	r22, r12
     376:	88 27       	eor	r24, r24
     378:	77 fd       	sbrc	r23, 7
     37a:	80 95       	com	r24
     37c:	98 2f       	mov	r25, r24
     37e:	0e 94 b9 0a 	call	0x1572	; 0x1572 <print_long>
     382:	87 cf       	rjmp	.-242    	; 0x292 <main+0x2e>

00000384 <analog_conversion_result>:
	// value of this method can be directly compared against the macros
	// MODE_8_BIT and MODE_10_BIT:
	// For example: if (getMode() == MODE_8_BIT) ...
	static inline unsigned char getMode()
	{
		return (ADMUX >> ADLAR) & 1;
     384:	80 91 7c 00 	lds	r24, 0x007C
	{
		return fromMillivoltsToNormal(adc_result_millivolts);
	}
	#endif

	if (getMode())				// if left-adjusted (i.e. 8-bit mode)
     388:	85 ff       	sbrs	r24, 5
     38a:	05 c0       	rjmp	.+10     	; 0x396 <analog_conversion_result+0x12>
	{
		return ADCH;			// 8-bit result
     38c:	80 91 79 00 	lds	r24, 0x0079
     390:	28 2f       	mov	r18, r24
     392:	30 e0       	ldi	r19, 0x00	; 0
     394:	04 c0       	rjmp	.+8      	; 0x39e <analog_conversion_result+0x1a>
	}
	else
	{
		return ADC;				// 10-bit result
     396:	20 91 78 00 	lds	r18, 0x0078
     39a:	30 91 79 00 	lds	r19, 0x0079
}

extern "C" unsigned int analog_conversion_result()
{
	return OrangutanAnalog::conversionResult();
}
     39e:	c9 01       	movw	r24, r18
     3a0:	08 95       	ret

000003a2 <set_millivolt_calibration>:
// to millivolts.  The argument calibration should equal VCC in millivolts,
// which can be automatically measured using the function readVCCMillivolts():
// e.g. setMillivoltCalibration(readVCCMillivolts());
void OrangutanAnalog::setMillivoltCalibration(unsigned int calibration)
{
	millivolt_calibration = calibration;
     3a2:	90 93 2c 01 	sts	0x012C, r25
     3a6:	80 93 2b 01 	sts	0x012B, r24
}

extern "C" void set_millivolt_calibration(unsigned int calibration)
{
	OrangutanAnalog::setMillivoltCalibration(calibration);
}
     3aa:	08 95       	ret

000003ac <_ZN15OrangutanAnalogC2Ev>:

// constructor
OrangutanAnalog::OrangutanAnalog()
{

}
     3ac:	08 95       	ret

000003ae <_ZN15OrangutanAnalogC1Ev>:
     3ae:	08 95       	ret

000003b0 <_ZN15OrangutanAnalog16conversionResultEv>:
     3b0:	80 91 7c 00 	lds	r24, 0x007C
	{
		return fromMillivoltsToNormal(adc_result_millivolts);
	}
	#endif

	if (getMode())				// if left-adjusted (i.e. 8-bit mode)
     3b4:	85 ff       	sbrs	r24, 5
     3b6:	05 c0       	rjmp	.+10     	; 0x3c2 <_ZN15OrangutanAnalog16conversionResultEv+0x12>
	{
		return ADCH;			// 8-bit result
     3b8:	80 91 79 00 	lds	r24, 0x0079
     3bc:	28 2f       	mov	r18, r24
     3be:	30 e0       	ldi	r19, 0x00	; 0
     3c0:	04 c0       	rjmp	.+8      	; 0x3ca <_ZN15OrangutanAnalog16conversionResultEv+0x1a>
	}
	else
	{
		return ADC;				// 10-bit result
     3c2:	20 91 78 00 	lds	r18, 0x0078
     3c6:	30 91 79 00 	lds	r19, 0x0079
	}
}
     3ca:	c9 01       	movw	r24, r18
     3cc:	08 95       	ret

000003ce <_ZN15OrangutanAnalog15startConversionEhh>:
// NOTE: Some Orangutans and 3pis have their AREF pin connected directly to VCC.
//  On these Orangutans, you must not use the internal voltage reference as
//  doing so will short the internal reference voltage to VCC and could damage
//  the AVR.  It is safe to use the internal reference voltage on the
//  Orangutan SVP.
void OrangutanAnalog::startConversion(unsigned char channel, unsigned char use_internal_reference)
     3ce:	28 2f       	mov	r18, r24
	adc_result_is_in_millivolts = 0;

	#else

	// Channel numbers greater than 31 are invalid.
	if (channel > 31)
     3d0:	80 32       	cpi	r24, 0x20	; 32
     3d2:	b0 f4       	brcc	.+44     	; 0x400 <_ZN15OrangutanAnalog15startConversionEhh+0x32>
		return;
	}

	#endif

	ADCSRA = 0x87;		// bit 7 set: ADC enabled
     3d4:	87 e8       	ldi	r24, 0x87	; 135
     3d6:	80 93 7a 00 	sts	0x007A, r24
	// to channel 0, which can affect the ADC charge capacitor.  For example, if you have a
	// high output impedance voltage on channel 1 and a low output impedance voltage on channel
	// 0, the voltage on channel 0 be briefly applied to the ADC capacitor before every conversion,
	// which could prevent the capacitor from settling to the voltage on channel 1, even over
	// many reads.
	unsigned char tempADMUX = ADMUX;
     3da:	80 91 7c 00 	lds	r24, 0x007C

	tempADMUX |= 1 << 6;
     3de:	98 2f       	mov	r25, r24
     3e0:	90 64       	ori	r25, 0x40	; 64
	if(use_internal_reference)	// Note: internal reference should NOT be used on devices
     3e2:	66 23       	and	r22, r22
     3e4:	11 f0       	breq	.+4      	; 0x3ea <_ZN15OrangutanAnalog15startConversionEhh+0x1c>
	{							//  where AREF is connected to an external voltage!
		// use the internal voltage reference
		tempADMUX |= 1 << 7;		// 1.1 V on ATmega48/168/328; 2.56 V on ATmega324/644/1284
     3e6:	80 6c       	ori	r24, 0xC0	; 192
     3e8:	02 c0       	rjmp	.+4      	; 0x3ee <_ZN15OrangutanAnalog15startConversionEhh+0x20>
	}
	else
	{
		// use AVCC as a reference
		tempADMUX &= ~(1 << 7);
     3ea:	89 2f       	mov	r24, r25
     3ec:	8f 77       	andi	r24, 0x7F	; 127
	}

	tempADMUX &= ~0x1F;		 // clear channel selection bits of ADMUX
     3ee:	80 7e       	andi	r24, 0xE0	; 224
	tempADMUX |= channel;    // we only get this far if channel is less than 32
     3f0:	82 2b       	or	r24, r18
	ADMUX = tempADMUX;
     3f2:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= 1 << ADSC; // start the conversion
     3f6:	80 91 7a 00 	lds	r24, 0x007A
     3fa:	80 64       	ori	r24, 0x40	; 64
     3fc:	80 93 7a 00 	sts	0x007A, r24
     400:	08 95       	ret

00000402 <start_analog_conversion>:
	return OrangutanAnalog::readAverageMillivolts(channel, samples);
}

extern "C" void start_analog_conversion(unsigned char channel)
{
	OrangutanAnalog::startConversion(channel);
     402:	60 e0       	ldi	r22, 0x00	; 0
     404:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_ZN15OrangutanAnalog15startConversionEhh>
}
     408:	08 95       	ret

0000040a <_ZN15OrangutanAnalog4readEh>:
}

// take a single analog reading of the specified channel
unsigned int OrangutanAnalog::read(unsigned char channel)
{
	startConversion(channel);
     40a:	60 e0       	ldi	r22, 0x00	; 0
     40c:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_ZN15OrangutanAnalog15startConversionEhh>

	// returns 1 if the ADC is in the middle of an conversion, otherwise
	// returns 0
	static inline unsigned char isConverting()
	{
		return (ADCSRA >> ADSC) & 1;
     410:	80 91 7a 00 	lds	r24, 0x007A
	while (isConverting());	// wait for conversion to finish
     414:	86 fd       	sbrc	r24, 6
     416:	fc cf       	rjmp	.-8      	; 0x410 <_ZN15OrangutanAnalog4readEh+0x6>
	// value of this method can be directly compared against the macros
	// MODE_8_BIT and MODE_10_BIT:
	// For example: if (getMode() == MODE_8_BIT) ...
	static inline unsigned char getMode()
	{
		return (ADMUX >> ADLAR) & 1;
     418:	80 91 7c 00 	lds	r24, 0x007C
	{
		return fromMillivoltsToNormal(adc_result_millivolts);
	}
	#endif

	if (getMode())				// if left-adjusted (i.e. 8-bit mode)
     41c:	85 ff       	sbrs	r24, 5
     41e:	05 c0       	rjmp	.+10     	; 0x42a <_ZN15OrangutanAnalog4readEh+0x20>
	{
		return ADCH;			// 8-bit result
     420:	80 91 79 00 	lds	r24, 0x0079
     424:	28 2f       	mov	r18, r24
     426:	30 e0       	ldi	r19, 0x00	; 0
     428:	04 c0       	rjmp	.+8      	; 0x432 <_ZN15OrangutanAnalog4readEh+0x28>
	}
	else
	{
		return ADC;				// 10-bit result
     42a:	20 91 78 00 	lds	r18, 0x0078
     42e:	30 91 79 00 	lds	r19, 0x0079
unsigned int OrangutanAnalog::read(unsigned char channel)
{
	startConversion(channel);
	while (isConverting());	// wait for conversion to finish
	return conversionResult();
}
     432:	c9 01       	movw	r24, r18
     434:	08 95       	ret

00000436 <analog_read>:
#ifdef LIB_POLOLU


extern "C" unsigned int analog_read(unsigned char channel)
{
	return OrangutanAnalog::read(channel);
     436:	0e 94 05 02 	call	0x40a	; 0x40a <_ZN15OrangutanAnalog4readEh>
}
     43a:	08 95       	ret

0000043c <_ZN15OrangutanAnalog11readAverageEhj>:
	return conversionResultMillivolts();
}

// take 'samples' readings of the specified channel and return the average
unsigned int OrangutanAnalog::readAverage(unsigned char channel, 
											unsigned int samples)
     43c:	ef 92       	push	r14
     43e:	ff 92       	push	r15
     440:	0f 93       	push	r16
     442:	1f 93       	push	r17
     444:	cf 93       	push	r28
     446:	df 93       	push	r29
     448:	eb 01       	movw	r28, r22
		// processor on the SVP, so we will just return a simple reading.
		return read(channel);
	}
#endif

	startConversion(channel);	// call this first to set the channel
     44a:	60 e0       	ldi	r22, 0x00	; 0
     44c:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_ZN15OrangutanAnalog15startConversionEhh>

	// returns 1 if the ADC is in the middle of an conversion, otherwise
	// returns 0
	static inline unsigned char isConverting()
	{
		return (ADCSRA >> ADSC) & 1;
     450:	80 91 7a 00 	lds	r24, 0x007A
	while (isConverting());		// wait while converting (discard first reading)
     454:	86 fd       	sbrc	r24, 6
     456:	fc cf       	rjmp	.-8      	; 0x450 <_ZN15OrangutanAnalog11readAverageEhj+0x14>
     458:	9e 01       	movw	r18, r28
     45a:	ee 24       	eor	r14, r14
     45c:	ff 24       	eor	r15, r15
     45e:	87 01       	movw	r16, r14
	do
	{
		ADCSRA |= 1 << ADSC;	// start the next conversion on current channel
     460:	80 91 7a 00 	lds	r24, 0x007A
     464:	80 64       	ori	r24, 0x40	; 64
     466:	80 93 7a 00 	sts	0x007A, r24
     46a:	80 91 7a 00 	lds	r24, 0x007A
		while (isConverting());	// wait while converting
     46e:	86 fd       	sbrc	r24, 6
     470:	fc cf       	rjmp	.-8      	; 0x46a <_ZN15OrangutanAnalog11readAverageEhj+0x2e>
	// value of this method can be directly compared against the macros
	// MODE_8_BIT and MODE_10_BIT:
	// For example: if (getMode() == MODE_8_BIT) ...
	static inline unsigned char getMode()
	{
		return (ADMUX >> ADLAR) & 1;
     472:	80 91 7c 00 	lds	r24, 0x007C
	{
		return fromMillivoltsToNormal(adc_result_millivolts);
	}
	#endif

	if (getMode())				// if left-adjusted (i.e. 8-bit mode)
     476:	85 ff       	sbrs	r24, 5
     478:	04 c0       	rjmp	.+8      	; 0x482 <_ZN15OrangutanAnalog11readAverageEhj+0x46>
	{
		return ADCH;			// 8-bit result
     47a:	80 91 79 00 	lds	r24, 0x0079
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	04 c0       	rjmp	.+8      	; 0x48a <_ZN15OrangutanAnalog11readAverageEhj+0x4e>
	}
	else
	{
		return ADC;				// 10-bit result
     482:	80 91 78 00 	lds	r24, 0x0078
     486:	90 91 79 00 	lds	r25, 0x0079
	while (isConverting());		// wait while converting (discard first reading)
	do
	{
		ADCSRA |= 1 << ADSC;	// start the next conversion on current channel
		while (isConverting());	// wait while converting
		sum += conversionResult();	// sum the results
     48a:	a0 e0       	ldi	r26, 0x00	; 0
     48c:	b0 e0       	ldi	r27, 0x00	; 0
     48e:	e8 0e       	add	r14, r24
     490:	f9 1e       	adc	r15, r25
     492:	0a 1f       	adc	r16, r26
     494:	1b 1f       	adc	r17, r27
	}
#endif

	startConversion(channel);	// call this first to set the channel
	while (isConverting());		// wait while converting (discard first reading)
	do
     496:	21 50       	subi	r18, 0x01	; 1
     498:	30 40       	sbci	r19, 0x00	; 0
     49a:	11 f7       	brne	.-60     	; 0x460 <_ZN15OrangutanAnalog11readAverageEhj+0x24>
     49c:	ce 01       	movw	r24, r28
     49e:	96 95       	lsr	r25
     4a0:	87 95       	ror	r24
		ADCSRA |= 1 << ADSC;	// start the next conversion on current channel
		while (isConverting());	// wait while converting
		sum += conversionResult();	// sum the results
	} while (--i);
	
	if (samples < 64)			// can do the division much faster
     4a2:	c0 34       	cpi	r28, 0x40	; 64
     4a4:	d1 05       	cpc	r29, r1
     4a6:	40 f4       	brcc	.+16     	; 0x4b8 <_ZN15OrangutanAnalog11readAverageEhj+0x7c>
		return ((unsigned int)sum + (samples >> 1)) / (unsigned char)samples;
     4a8:	8e 0d       	add	r24, r14
     4aa:	9f 1d       	adc	r25, r15
     4ac:	6c 2f       	mov	r22, r28
     4ae:	70 e0       	ldi	r23, 0x00	; 0
     4b0:	0e 94 4c 10 	call	0x2098	; 0x2098 <__udivmodhi4>
     4b4:	9b 01       	movw	r18, r22
     4b6:	0d c0       	rjmp	.+26     	; 0x4d2 <_ZN15OrangutanAnalog11readAverageEhj+0x96>
	return (sum + (samples >> 1)) / samples;	// compute the rounded avg
     4b8:	a0 e0       	ldi	r26, 0x00	; 0
     4ba:	b0 e0       	ldi	r27, 0x00	; 0
     4bc:	e8 0e       	add	r14, r24
     4be:	f9 1e       	adc	r15, r25
     4c0:	0a 1f       	adc	r16, r26
     4c2:	1b 1f       	adc	r17, r27
     4c4:	9e 01       	movw	r18, r28
     4c6:	40 e0       	ldi	r20, 0x00	; 0
     4c8:	50 e0       	ldi	r21, 0x00	; 0
     4ca:	c8 01       	movw	r24, r16
     4cc:	b7 01       	movw	r22, r14
     4ce:	0e 94 73 10 	call	0x20e6	; 0x20e6 <__udivmodsi4>
}
     4d2:	c9 01       	movw	r24, r18
     4d4:	cd b7       	in	r28, 0x3d	; 61
     4d6:	de b7       	in	r29, 0x3e	; 62
     4d8:	e6 e0       	ldi	r30, 0x06	; 6
     4da:	0c 94 d8 10 	jmp	0x21b0	; 0x21b0 <__epilogue_restores__+0x18>

000004de <read_trimpot>:
	// On the Orangutan SVP, the trimpot is on the auxiliary processor, so 
	// calling this function can have side effects related to enabling SPI
	// communication (see the SVP user's guide for more info).
	static inline unsigned int readTrimpot()
	{
		return readAverage(TRIMPOT, 20);
     4de:	87 e0       	ldi	r24, 0x07	; 7
     4e0:	64 e1       	ldi	r22, 0x14	; 20
     4e2:	70 e0       	ldi	r23, 0x00	; 0
     4e4:	0e 94 1e 02 	call	0x43c	; 0x43c <_ZN15OrangutanAnalog11readAverageEhj>
}

extern "C" unsigned int read_trimpot()
{
	return OrangutanAnalog::readTrimpot();
}
     4e8:	08 95       	ret

000004ea <analog_read_average>:
	return OrangutanAnalog::readMillivolts(channel);
}

extern "C" unsigned int analog_read_average(unsigned char channel, unsigned int samples)
{
	return OrangutanAnalog::readAverage(channel, samples);
     4ea:	0e 94 1e 02 	call	0x43c	; 0x43c <_ZN15OrangutanAnalog11readAverageEhj>
}
     4ee:	08 95       	ret

000004f0 <_ZN15OrangutanAnalog23setMillivoltCalibrationEj>:
// to millivolts.  The argument calibration should equal VCC in millivolts,
// which can be automatically measured using the function readVCCMillivolts():
// e.g. setMillivoltCalibration(readVCCMillivolts());
void OrangutanAnalog::setMillivoltCalibration(unsigned int calibration)
{
	millivolt_calibration = calibration;
     4f0:	90 93 2c 01 	sts	0x012C, r25
     4f4:	80 93 2b 01 	sts	0x012B, r24
}
     4f8:	08 95       	ret

000004fa <_ZN15OrangutanAnalog17readVCCMillivoltsEv>:
// averages ten ADC readings of the fixed internal 1.1V bandgap voltage
// and computes VCC from the results.  This function returns VCC in millivolts.
// Channel 14 is internal 1.1V BG on ATmega48/168/328, but bit 5 of ADMUX is
// not used, so channel 30 is equivalent to channel 14.  Channel 30 is the internal
// 1.1V BG on ATmega324/644/1284.
unsigned int OrangutanAnalog::readVCCMillivolts()
     4fa:	1f 93       	push	r17
	// value of this method can be directly compared against the macros
	// MODE_8_BIT and MODE_10_BIT:
	// For example: if (getMode() == MODE_8_BIT) ...
	static inline unsigned char getMode()
	{
		return (ADMUX >> ADLAR) & 1;
     4fc:	10 91 7c 00 	lds	r17, 0x007C
	// set the ADC to run in either 8-bit mode (MODE_8_BIT) or 
	// 10-bit mode (MODE_10_BIT)
	static inline void setMode(unsigned char mode)
	{
		if (mode == MODE_10_BIT)
			ADMUX &= ~(1 << ADLAR);	// right-adjust result (ADC has result)
     500:	80 91 7c 00 	lds	r24, 0x007C
     504:	8f 7d       	andi	r24, 0xDF	; 223
     506:	80 93 7c 00 	sts	0x007C, r24
	setMode(MODE_10_BIT);
	
	// bandgap cannot deliver much current, so it takes some time for the ADC
	// to settle to the BG voltage.  The following read connects the ADC to
	// the BG voltage and gives the voltage time to settle.
	readAverage(30, 20);
     50a:	8e e1       	ldi	r24, 0x1E	; 30
     50c:	64 e1       	ldi	r22, 0x14	; 20
     50e:	70 e0       	ldi	r23, 0x00	; 0
     510:	0e 94 1e 02 	call	0x43c	; 0x43c <_ZN15OrangutanAnalog11readAverageEhj>
	
	unsigned int reading = readAverage(30, 20);  // channel 30 is internal 1.1V BG
     514:	8e e1       	ldi	r24, 0x1E	; 30
     516:	64 e1       	ldi	r22, 0x14	; 20
     518:	70 e0       	ldi	r23, 0x00	; 0
     51a:	0e 94 1e 02 	call	0x43c	; 0x43c <_ZN15OrangutanAnalog11readAverageEhj>
     51e:	9c 01       	movw	r18, r24

	// set the ADC to run in either 8-bit mode (MODE_8_BIT) or 
	// 10-bit mode (MODE_10_BIT)
	static inline void setMode(unsigned char mode)
	{
		if (mode == MODE_10_BIT)
     520:	15 fd       	sbrc	r17, 5
     522:	04 c0       	rjmp	.+8      	; 0x52c <_ZN15OrangutanAnalog17readVCCMillivoltsEv+0x32>
			ADMUX &= ~(1 << ADLAR);	// right-adjust result (ADC has result)
     524:	80 91 7c 00 	lds	r24, 0x007C
     528:	8f 7d       	andi	r24, 0xDF	; 223
     52a:	03 c0       	rjmp	.+6      	; 0x532 <_ZN15OrangutanAnalog17readVCCMillivoltsEv+0x38>
		else
			ADMUX |= 1 << ADLAR;		// left-adjust result (ADCH has result)	
     52c:	80 91 7c 00 	lds	r24, 0x007C
     530:	80 62       	ori	r24, 0x20	; 32
     532:	80 93 7c 00 	sts	0x007C, r24
     536:	b9 01       	movw	r22, r18
     538:	76 95       	lsr	r23
     53a:	67 95       	ror	r22
     53c:	80 e0       	ldi	r24, 0x00	; 0
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	6c 54       	subi	r22, 0x4C	; 76
     542:	74 4d       	sbci	r23, 0xD4	; 212
     544:	8e 4e       	sbci	r24, 0xEE	; 238
     546:	9f 4f       	sbci	r25, 0xFF	; 255
     548:	40 e0       	ldi	r20, 0x00	; 0
     54a:	50 e0       	ldi	r21, 0x00	; 0
     54c:	0e 94 73 10 	call	0x20e6	; 0x20e6 <__udivmodsi4>
     550:	c9 01       	movw	r24, r18
	unsigned int value = (1023UL * 1100UL + (reading>>1)) / reading;
	setMode(mode);
	return value;
}
     552:	1f 91       	pop	r17
     554:	08 95       	ret

00000556 <read_vcc_millivolts>:
	OrangutanAnalog::setMillivoltCalibration(calibration);
}

extern "C" unsigned int read_vcc_millivolts()
{
	return OrangutanAnalog::readVCCMillivolts();
     556:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_ZN15OrangutanAnalog17readVCCMillivoltsEv>
}
     55a:	08 95       	ret

0000055c <_ZN15OrangutanAnalog12toMillivoltsEj>:
}

// converts the specified ADC result to millivolts
unsigned int OrangutanAnalog::toMillivolts(unsigned int adcResult)
{
	unsigned long temp = adcResult * (unsigned long)millivolt_calibration;
     55c:	a0 e0       	ldi	r26, 0x00	; 0
     55e:	b0 e0       	ldi	r27, 0x00	; 0
     560:	20 91 2b 01 	lds	r18, 0x012B
     564:	30 91 2c 01 	lds	r19, 0x012C
     568:	40 e0       	ldi	r20, 0x00	; 0
     56a:	50 e0       	ldi	r21, 0x00	; 0
     56c:	bc 01       	movw	r22, r24
     56e:	cd 01       	movw	r24, r26
     570:	0e 94 21 10 	call	0x2042	; 0x2042 <__mulsi3>
     574:	9b 01       	movw	r18, r22
     576:	ac 01       	movw	r20, r24
	// value of this method can be directly compared against the macros
	// MODE_8_BIT and MODE_10_BIT:
	// For example: if (getMode() == MODE_8_BIT) ...
	static inline unsigned char getMode()
	{
		return (ADMUX >> ADLAR) & 1;
     578:	80 91 7c 00 	lds	r24, 0x007C
	if (getMode())							// if 8-bit mode
     57c:	85 ff       	sbrs	r24, 5
     57e:	0b c0       	rjmp	.+22     	; 0x596 <_ZN15OrangutanAnalog12toMillivoltsEj+0x3a>
		return (temp + 127) / 255;
     580:	b9 01       	movw	r22, r18
     582:	ca 01       	movw	r24, r20
     584:	61 58       	subi	r22, 0x81	; 129
     586:	7f 4f       	sbci	r23, 0xFF	; 255
     588:	8f 4f       	sbci	r24, 0xFF	; 255
     58a:	9f 4f       	sbci	r25, 0xFF	; 255
     58c:	2f ef       	ldi	r18, 0xFF	; 255
     58e:	30 e0       	ldi	r19, 0x00	; 0
     590:	40 e0       	ldi	r20, 0x00	; 0
     592:	50 e0       	ldi	r21, 0x00	; 0
     594:	0a c0       	rjmp	.+20     	; 0x5aa <_ZN15OrangutanAnalog12toMillivoltsEj+0x4e>
	return (temp + 511) / 1023;
     596:	b9 01       	movw	r22, r18
     598:	ca 01       	movw	r24, r20
     59a:	61 50       	subi	r22, 0x01	; 1
     59c:	7e 4f       	sbci	r23, 0xFE	; 254
     59e:	8f 4f       	sbci	r24, 0xFF	; 255
     5a0:	9f 4f       	sbci	r25, 0xFF	; 255
     5a2:	2f ef       	ldi	r18, 0xFF	; 255
     5a4:	33 e0       	ldi	r19, 0x03	; 3
     5a6:	40 e0       	ldi	r20, 0x00	; 0
     5a8:	50 e0       	ldi	r21, 0x00	; 0
     5aa:	0e 94 73 10 	call	0x20e6	; 0x20e6 <__udivmodsi4>
}
     5ae:	c9 01       	movw	r24, r18
     5b0:	08 95       	ret

000005b2 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>:
			// We have not implemented averaging of the adc readings from the auxiliary
			// processor on the SVP, so we will just return a simple reading.
			return readMillivolts(channel);
		}
	#endif
		return toMillivolts(readAverage(channel, samples));
     5b2:	0e 94 1e 02 	call	0x43c	; 0x43c <_ZN15OrangutanAnalog11readAverageEhj>
     5b6:	0e 94 ae 02 	call	0x55c	; 0x55c <_ZN15OrangutanAnalog12toMillivoltsEj>
	}
     5ba:	08 95       	ret

000005bc <analog_read_average_millivolts>:
	return OrangutanAnalog::readAverage(channel, samples);
}

extern "C" unsigned int analog_read_average_millivolts(unsigned char channel, unsigned int samples)
{
	return OrangutanAnalog::readAverageMillivolts(channel, samples);
     5bc:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>
}
     5c0:	08 95       	ret

000005c2 <_ZN15OrangutanAnalog26conversionResultMillivoltsEv>:
	// value of this method can be directly compared against the macros
	// MODE_8_BIT and MODE_10_BIT:
	// For example: if (getMode() == MODE_8_BIT) ...
	static inline unsigned char getMode()
	{
		return (ADMUX >> ADLAR) & 1;
     5c2:	80 91 7c 00 	lds	r24, 0x007C
	{
		return adc_result_millivolts;
	}
	#endif

	if (getMode())  // if left-adjusted (i.e. 8-bit mode)
     5c6:	85 ff       	sbrs	r24, 5
     5c8:	06 c0       	rjmp	.+12     	; 0x5d6 <_ZN15OrangutanAnalog26conversionResultMillivoltsEv+0x14>
	{
		return toMillivolts(ADCH);
     5ca:	80 91 79 00 	lds	r24, 0x0079
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	0e 94 ae 02 	call	0x55c	; 0x55c <_ZN15OrangutanAnalog12toMillivoltsEj>
     5d4:	08 95       	ret
	}
	else
	{
		return toMillivolts(ADC);
     5d6:	80 91 78 00 	lds	r24, 0x0078
     5da:	90 91 79 00 	lds	r25, 0x0079
     5de:	0e 94 ae 02 	call	0x55c	; 0x55c <_ZN15OrangutanAnalog12toMillivoltsEj>
	}
}
     5e2:	08 95       	ret

000005e4 <_ZN15OrangutanAnalog14readMillivoltsEh>:
}

// take a single analog reading of the specified channel and return the result in millivolts
unsigned int OrangutanAnalog::readMillivolts(unsigned char channel)
{
	startConversion(channel);
     5e4:	60 e0       	ldi	r22, 0x00	; 0
     5e6:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_ZN15OrangutanAnalog15startConversionEhh>

	// returns 1 if the ADC is in the middle of an conversion, otherwise
	// returns 0
	static inline unsigned char isConverting()
	{
		return (ADCSRA >> ADSC) & 1;
     5ea:	80 91 7a 00 	lds	r24, 0x007A
	while (isConverting());	// wait for conversion to finish
     5ee:	86 fd       	sbrc	r24, 6
     5f0:	fc cf       	rjmp	.-8      	; 0x5ea <_ZN15OrangutanAnalog14readMillivoltsEh+0x6>
	return conversionResultMillivolts();
     5f2:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <_ZN15OrangutanAnalog26conversionResultMillivoltsEv>
}
     5f6:	08 95       	ret

000005f8 <analog_read_millivolts>:
	return OrangutanAnalog::read(channel);
}

extern "C" unsigned int analog_read_millivolts(unsigned char channel)
{
	return OrangutanAnalog::readMillivolts(channel);
     5f8:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <_ZN15OrangutanAnalog14readMillivoltsEh>
}
     5fc:	08 95       	ret

000005fe <analog_conversion_result_millivolts>:
	return OrangutanAnalog::conversionResult();
}

extern "C" unsigned int analog_conversion_result_millivolts()
{
	return OrangutanAnalog::conversionResultMillivolts();
     5fe:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <_ZN15OrangutanAnalog26conversionResultMillivoltsEv>
}
     602:	08 95       	ret

00000604 <read_trimpot_millivolts>:
	// On the Orangutan SVP, the trimpot is on the auxiliary processor, so 
	// calling this function can have side effects related to enabling SPI
	// communication (see the SVP user's guide for more info).
	static inline unsigned int readTrimpot()
	{
		return readAverage(TRIMPOT, 20);
     604:	87 e0       	ldi	r24, 0x07	; 7
     606:	64 e1       	ldi	r22, 0x14	; 20
     608:	70 e0       	ldi	r23, 0x00	; 0
     60a:	0e 94 1e 02 	call	0x43c	; 0x43c <_ZN15OrangutanAnalog11readAverageEhj>
	static inline unsigned int readTrimpotMillivolts()
	{
	#ifdef _ORANGUTAN_SVP
		return OrangutanSVP::getTrimpotMillivolts();
	#else
		return toMillivolts(readTrimpot());
     60e:	0e 94 ae 02 	call	0x55c	; 0x55c <_ZN15OrangutanAnalog12toMillivoltsEj>
}

extern "C" unsigned int read_trimpot_millivolts()
{
	return OrangutanAnalog::readTrimpotMillivolts();
}
     612:	08 95       	ret

00000614 <to_millivolts>:
	return OrangutanAnalog::readVCCMillivolts();
}

extern "C" unsigned int to_millivolts(unsigned int analog_result)
{
	return OrangutanAnalog::toMillivolts(analog_result);
     614:	0e 94 ae 02 	call	0x55c	; 0x55c <_ZN15OrangutanAnalog12toMillivoltsEj>
}
     618:	08 95       	ret

0000061a <_ZN15OrangutanAnalog16readTemperatureFEv>:

// The temperature sensor reading (on the Orangutan LV) can be converted into degrees C as follows:
//   T = (Vout - 0.4) / 0.0195 Celcius
// The return value of this function is *tenths* of a degree Farenheit, although
// the accuracy of the temperature sensor is +/- 2 C.
int OrangutanAnalog::readTemperatureF()
     61a:	1f 93       	push	r17
	// value of this method can be directly compared against the macros
	// MODE_8_BIT and MODE_10_BIT:
	// For example: if (getMode() == MODE_8_BIT) ...
	static inline unsigned char getMode()
	{
		return (ADMUX >> ADLAR) & 1;
     61c:	10 91 7c 00 	lds	r17, 0x007C
	// set the ADC to run in either 8-bit mode (MODE_8_BIT) or 
	// 10-bit mode (MODE_10_BIT)
	static inline void setMode(unsigned char mode)
	{
		if (mode == MODE_10_BIT)
			ADMUX &= ~(1 << ADLAR);	// right-adjust result (ADC has result)
     620:	80 91 7c 00 	lds	r24, 0x007C
     624:	8f 7d       	andi	r24, 0xDF	; 223
     626:	80 93 7c 00 	sts	0x007C, r24
{
	unsigned char mode = getMode();
	setMode(MODE_10_BIT);
	int value = (((int)(readAverageMillivolts(TEMP_SENSOR, 20)) * 12) - 634) / 13;
     62a:	86 e0       	ldi	r24, 0x06	; 6
     62c:	64 e1       	ldi	r22, 0x14	; 20
     62e:	70 e0       	ldi	r23, 0x00	; 0
     630:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>
     634:	9c 01       	movw	r18, r24

	// set the ADC to run in either 8-bit mode (MODE_8_BIT) or 
	// 10-bit mode (MODE_10_BIT)
	static inline void setMode(unsigned char mode)
	{
		if (mode == MODE_10_BIT)
     636:	15 fd       	sbrc	r17, 5
     638:	04 c0       	rjmp	.+8      	; 0x642 <_ZN15OrangutanAnalog16readTemperatureFEv+0x28>
			ADMUX &= ~(1 << ADLAR);	// right-adjust result (ADC has result)
     63a:	80 91 7c 00 	lds	r24, 0x007C
     63e:	8f 7d       	andi	r24, 0xDF	; 223
     640:	03 c0       	rjmp	.+6      	; 0x648 <_ZN15OrangutanAnalog16readTemperatureFEv+0x2e>
		else
			ADMUX |= 1 << ADLAR;		// left-adjust result (ADCH has result)	
     642:	80 91 7c 00 	lds	r24, 0x007C
     646:	80 62       	ori	r24, 0x20	; 32
     648:	80 93 7c 00 	sts	0x007C, r24
     64c:	c9 01       	movw	r24, r18
     64e:	88 0f       	add	r24, r24
     650:	99 1f       	adc	r25, r25
     652:	82 0f       	add	r24, r18
     654:	93 1f       	adc	r25, r19
     656:	88 0f       	add	r24, r24
     658:	99 1f       	adc	r25, r25
     65a:	88 0f       	add	r24, r24
     65c:	99 1f       	adc	r25, r25
     65e:	8a 57       	subi	r24, 0x7A	; 122
     660:	92 40       	sbci	r25, 0x02	; 2
     662:	6d e0       	ldi	r22, 0x0D	; 13
     664:	70 e0       	ldi	r23, 0x00	; 0
     666:	0e 94 60 10 	call	0x20c0	; 0x20c0 <__divmodhi4>
     66a:	cb 01       	movw	r24, r22
	setMode(mode);
	return value;
}
     66c:	1f 91       	pop	r17
     66e:	08 95       	ret

00000670 <read_temperature_f>:
	return OrangutanAnalog::readBatteryMillivolts_SV();
}

extern "C" int read_temperature_f()
{
	return OrangutanAnalog::readTemperatureF();
     670:	0e 94 0d 03 	call	0x61a	; 0x61a <_ZN15OrangutanAnalog16readTemperatureFEv>
}
     674:	08 95       	ret

00000676 <_ZN15OrangutanAnalog16readTemperatureCEv>:
	return value;
}


// Orangutan LV only: The return value of this function is *tenths* of a degree Celcius.
int OrangutanAnalog::readTemperatureC()
     676:	1f 93       	push	r17
	// value of this method can be directly compared against the macros
	// MODE_8_BIT and MODE_10_BIT:
	// For example: if (getMode() == MODE_8_BIT) ...
	static inline unsigned char getMode()
	{
		return (ADMUX >> ADLAR) & 1;
     678:	10 91 7c 00 	lds	r17, 0x007C
	// set the ADC to run in either 8-bit mode (MODE_8_BIT) or 
	// 10-bit mode (MODE_10_BIT)
	static inline void setMode(unsigned char mode)
	{
		if (mode == MODE_10_BIT)
			ADMUX &= ~(1 << ADLAR);	// right-adjust result (ADC has result)
     67c:	80 91 7c 00 	lds	r24, 0x007C
     680:	8f 7d       	andi	r24, 0xDF	; 223
     682:	80 93 7c 00 	sts	0x007C, r24
{
	unsigned char mode = getMode();
	setMode(MODE_10_BIT);
	int value = (((int)(readAverageMillivolts(TEMP_SENSOR, 20) * 20)) - 7982) / 39;
     686:	86 e0       	ldi	r24, 0x06	; 6
     688:	64 e1       	ldi	r22, 0x14	; 20
     68a:	70 e0       	ldi	r23, 0x00	; 0
     68c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>
     690:	9c 01       	movw	r18, r24

	// set the ADC to run in either 8-bit mode (MODE_8_BIT) or 
	// 10-bit mode (MODE_10_BIT)
	static inline void setMode(unsigned char mode)
	{
		if (mode == MODE_10_BIT)
     692:	15 fd       	sbrc	r17, 5
     694:	04 c0       	rjmp	.+8      	; 0x69e <_ZN15OrangutanAnalog16readTemperatureCEv+0x28>
			ADMUX &= ~(1 << ADLAR);	// right-adjust result (ADC has result)
     696:	80 91 7c 00 	lds	r24, 0x007C
     69a:	8f 7d       	andi	r24, 0xDF	; 223
     69c:	03 c0       	rjmp	.+6      	; 0x6a4 <_ZN15OrangutanAnalog16readTemperatureCEv+0x2e>
		else
			ADMUX |= 1 << ADLAR;		// left-adjust result (ADCH has result)	
     69e:	80 91 7c 00 	lds	r24, 0x007C
     6a2:	80 62       	ori	r24, 0x20	; 32
     6a4:	80 93 7c 00 	sts	0x007C, r24
     6a8:	84 e1       	ldi	r24, 0x14	; 20
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	ac 01       	movw	r20, r24
     6ae:	24 9f       	mul	r18, r20
     6b0:	c0 01       	movw	r24, r0
     6b2:	25 9f       	mul	r18, r21
     6b4:	90 0d       	add	r25, r0
     6b6:	34 9f       	mul	r19, r20
     6b8:	90 0d       	add	r25, r0
     6ba:	11 24       	eor	r1, r1
     6bc:	8e 52       	subi	r24, 0x2E	; 46
     6be:	9f 41       	sbci	r25, 0x1F	; 31
     6c0:	67 e2       	ldi	r22, 0x27	; 39
     6c2:	70 e0       	ldi	r23, 0x00	; 0
     6c4:	0e 94 60 10 	call	0x20c0	; 0x20c0 <__divmodhi4>
     6c8:	cb 01       	movw	r24, r22
	setMode(mode);
	return value;
}
     6ca:	1f 91       	pop	r17
     6cc:	08 95       	ret

000006ce <read_temperature_c>:
	return OrangutanAnalog::readTemperatureF();
}

extern "C" int read_temperature_c()
{
	return OrangutanAnalog::readTemperatureC();
     6ce:	0e 94 3b 03 	call	0x676	; 0x676 <_ZN15OrangutanAnalog16readTemperatureCEv>
}
     6d2:	08 95       	ret

000006d4 <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>:
	int value = (((int)(readAverageMillivolts(TEMP_SENSOR, 20) * 20)) - 7982) / 39;
	setMode(mode);
	return value;
}

unsigned int OrangutanAnalog::readBatteryMillivolts_3pi()
     6d4:	1f 93       	push	r17
	// value of this method can be directly compared against the macros
	// MODE_8_BIT and MODE_10_BIT:
	// For example: if (getMode() == MODE_8_BIT) ...
	static inline unsigned char getMode()
	{
		return (ADMUX >> ADLAR) & 1;
     6d6:	10 91 7c 00 	lds	r17, 0x007C
	// set the ADC to run in either 8-bit mode (MODE_8_BIT) or 
	// 10-bit mode (MODE_10_BIT)
	static inline void setMode(unsigned char mode)
	{
		if (mode == MODE_10_BIT)
			ADMUX &= ~(1 << ADLAR);	// right-adjust result (ADC has result)
     6da:	80 91 7c 00 	lds	r24, 0x007C
     6de:	8f 7d       	andi	r24, 0xDF	; 223
     6e0:	80 93 7c 00 	sts	0x007C, r24
{
	unsigned char mode = getMode();
	setMode(MODE_10_BIT);
	unsigned int value = (readAverageMillivolts(6, 10) * 3 + 1) / 2;
     6e4:	86 e0       	ldi	r24, 0x06	; 6
     6e6:	6a e0       	ldi	r22, 0x0A	; 10
     6e8:	70 e0       	ldi	r23, 0x00	; 0
     6ea:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>
     6ee:	ac 01       	movw	r20, r24

	// set the ADC to run in either 8-bit mode (MODE_8_BIT) or 
	// 10-bit mode (MODE_10_BIT)
	static inline void setMode(unsigned char mode)
	{
		if (mode == MODE_10_BIT)
     6f0:	15 fd       	sbrc	r17, 5
     6f2:	04 c0       	rjmp	.+8      	; 0x6fc <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv+0x28>
			ADMUX &= ~(1 << ADLAR);	// right-adjust result (ADC has result)
     6f4:	80 91 7c 00 	lds	r24, 0x007C
     6f8:	8f 7d       	andi	r24, 0xDF	; 223
     6fa:	03 c0       	rjmp	.+6      	; 0x702 <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv+0x2e>
		else
			ADMUX |= 1 << ADLAR;		// left-adjust result (ADCH has result)	
     6fc:	80 91 7c 00 	lds	r24, 0x007C
     700:	80 62       	ori	r24, 0x20	; 32
     702:	80 93 7c 00 	sts	0x007C, r24
     706:	9a 01       	movw	r18, r20
     708:	22 0f       	add	r18, r18
     70a:	33 1f       	adc	r19, r19
     70c:	24 0f       	add	r18, r20
     70e:	35 1f       	adc	r19, r21
     710:	2f 5f       	subi	r18, 0xFF	; 255
     712:	3f 4f       	sbci	r19, 0xFF	; 255
     714:	36 95       	lsr	r19
     716:	27 95       	ror	r18
	setMode(mode);
	return value;
}
     718:	c9 01       	movw	r24, r18
     71a:	1f 91       	pop	r17
     71c:	08 95       	ret

0000071e <read_battery_millivolts_3pi>:

#else

extern "C" unsigned int read_battery_millivolts_3pi()
{
	return OrangutanAnalog::readBatteryMillivolts_3pi();
     71e:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>
}
     722:	08 95       	ret

00000724 <_ZN15OrangutanAnalog24readBatteryMillivolts_SVEv>:
	unsigned int value = (readAverageMillivolts(6, 10) * 3 + 1) / 2;
	setMode(mode);
	return value;
}

unsigned int OrangutanAnalog::readBatteryMillivolts_SV()
     724:	1f 93       	push	r17
	// value of this method can be directly compared against the macros
	// MODE_8_BIT and MODE_10_BIT:
	// For example: if (getMode() == MODE_8_BIT) ...
	static inline unsigned char getMode()
	{
		return (ADMUX >> ADLAR) & 1;
     726:	10 91 7c 00 	lds	r17, 0x007C
	// set the ADC to run in either 8-bit mode (MODE_8_BIT) or 
	// 10-bit mode (MODE_10_BIT)
	static inline void setMode(unsigned char mode)
	{
		if (mode == MODE_10_BIT)
			ADMUX &= ~(1 << ADLAR);	// right-adjust result (ADC has result)
     72a:	80 91 7c 00 	lds	r24, 0x007C
     72e:	8f 7d       	andi	r24, 0xDF	; 223
     730:	80 93 7c 00 	sts	0x007C, r24
{
	unsigned char mode = getMode();
	setMode(MODE_10_BIT);
	unsigned int value = readAverageMillivolts(6,10) * 3;
     734:	86 e0       	ldi	r24, 0x06	; 6
     736:	6a e0       	ldi	r22, 0x0A	; 10
     738:	70 e0       	ldi	r23, 0x00	; 0
     73a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>
     73e:	ac 01       	movw	r20, r24

	// set the ADC to run in either 8-bit mode (MODE_8_BIT) or 
	// 10-bit mode (MODE_10_BIT)
	static inline void setMode(unsigned char mode)
	{
		if (mode == MODE_10_BIT)
     740:	15 fd       	sbrc	r17, 5
     742:	04 c0       	rjmp	.+8      	; 0x74c <_ZN15OrangutanAnalog24readBatteryMillivolts_SVEv+0x28>
			ADMUX &= ~(1 << ADLAR);	// right-adjust result (ADC has result)
     744:	80 91 7c 00 	lds	r24, 0x007C
     748:	8f 7d       	andi	r24, 0xDF	; 223
     74a:	03 c0       	rjmp	.+6      	; 0x752 <_ZN15OrangutanAnalog24readBatteryMillivolts_SVEv+0x2e>
		else
			ADMUX |= 1 << ADLAR;		// left-adjust result (ADCH has result)	
     74c:	80 91 7c 00 	lds	r24, 0x007C
     750:	80 62       	ori	r24, 0x20	; 32
     752:	80 93 7c 00 	sts	0x007C, r24
     756:	9a 01       	movw	r18, r20
     758:	22 0f       	add	r18, r18
     75a:	33 1f       	adc	r19, r19
     75c:	24 0f       	add	r18, r20
     75e:	35 1f       	adc	r19, r21
	setMode(mode);
	return value;
}
     760:	c9 01       	movw	r24, r18
     762:	1f 91       	pop	r17
     764:	08 95       	ret

00000766 <read_battery_millivolts_sv168>:
	return OrangutanAnalog::readBatteryMillivolts_SV();
}

extern "C" unsigned int read_battery_millivolts_sv168()
{
	return OrangutanAnalog::readBatteryMillivolts_SV();
     766:	0e 94 92 03 	call	0x724	; 0x724 <_ZN15OrangutanAnalog24readBatteryMillivolts_SVEv>
}
     76a:	08 95       	ret

0000076c <read_battery_millivolts_sv>:
	return OrangutanAnalog::readBatteryMillivolts_3pi();
}

extern "C" unsigned int read_battery_millivolts_sv()
{
	return OrangutanAnalog::readBatteryMillivolts_SV();
     76c:	0e 94 92 03 	call	0x724	; 0x724 <_ZN15OrangutanAnalog24readBatteryMillivolts_SVEv>
}
     770:	08 95       	ret

00000772 <_ZN15OrangutanBuzzerC2Ev>:

// constructor

OrangutanBuzzer::OrangutanBuzzer()
{
}
     772:	08 95       	ret

00000774 <_ZN15OrangutanBuzzerC1Ev>:
     774:	08 95       	ret

00000776 <is_playing>:


// Returns 1 if the buzzer is currently playing, otherwise it returns 0
unsigned char OrangutanBuzzer::isPlaying()
{
	return !buzzerFinished || buzzerSequence != 0;
     776:	80 91 38 01 	lds	r24, 0x0138
     77a:	88 23       	and	r24, r24
     77c:	39 f0       	breq	.+14     	; 0x78c <is_playing+0x16>
     77e:	20 e0       	ldi	r18, 0x00	; 0
     780:	80 91 5e 01 	lds	r24, 0x015E
     784:	90 91 5f 01 	lds	r25, 0x015F
     788:	89 2b       	or	r24, r25
     78a:	09 f0       	breq	.+2      	; 0x78e <is_playing+0x18>
     78c:	21 e0       	ldi	r18, 0x01	; 1
}

extern "C" unsigned char is_playing()
{
	return OrangutanBuzzer::isPlaying();
}
     78e:	82 2f       	mov	r24, r18
     790:	08 95       	ret

00000792 <_ZN15OrangutanBuzzer5init2Ev>:
}

// initializes timer1 for buzzer control
void OrangutanBuzzer::init2()
{
	DISABLE_TIMER1_INTERRUPT();	// disable all timer1 interrupts
     792:	10 92 6f 00 	sts	0x006F, r1
	TCCR1A = 0x03;	// bits 6 and 7 clear: normal port op., OC1A disconnected
					// bit 4 and 5 clear: normal port op., OC1B disconnected
					// bits 2 and 3: not used
					// bits 0 & 1 set: combine with bits 3 & 4 of TCCR1B...
#else
	TCCR1A = 0x23;	// bits 6 and 7 clear: normal port op., OC1A disconnected
     796:	83 e2       	ldi	r24, 0x23	; 35
     798:	80 93 80 00 	sts	0x0080, r24
					//                     set OC1B on comp match when downcounting
					// bits 2 and 3: not used
					// bits 0 & 1 set: combine with bits 3 & 4 of TCCR1B...
#endif

	TCCR1B = 0x11;	// bit 7 clear: input capture noise canceler disabled
     79c:	81 e1       	ldi	r24, 0x11	; 17
     79e:	80 93 81 00 	sts	0x0081, r24
					// bit 3 clear and 4 set: combine with bits 0 & 1 of TCCR1A to
					// 		select waveform generation mode 11, phase-correct PWM,
					//		TOP = OCR1A, OCR1B set at TOP, TOV1 flag set at TOP
					// bit 0 set, 1-2 clear: timer clock = IO clk (prescaler 1)

	TCCR1C = 0x00;	// bit 7 clear: no force output compare for channel A
     7a2:	10 92 82 00 	sts	0x0082, r1
	//   on compare match, set at TOP; OC1B is disconnected.
	//   Note: if the PWM frequency and duty cycle are changed, the first
	//   cycle of the new frequency will be at the old duty cycle, since
	//   the duty cycle (OCR1A) is not updated until TOP.

	OCR1A = (F_CPU/2) / 1000;	// set TOP for freq = 1 kHz
     7a6:	80 e1       	ldi	r24, 0x10	; 16
     7a8:	97 e2       	ldi	r25, 0x27	; 39
     7aa:	90 93 89 00 	sts	0x0089, r25
     7ae:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 0;					// set 0% duty cycle
     7b2:	10 92 8b 00 	sts	0x008B, r1
     7b6:	10 92 8a 00 	sts	0x008A, r1
	
#ifndef _ORANGUTAN_X2
	BUZZER_DDR |= BUZZER;		// buzzer pin set as an output
     7ba:	22 9a       	sbi	0x04, 2	; 4
#endif
	sei();
     7bc:	78 94       	sei
}
     7be:	08 95       	ret

000007c0 <_ZN15OrangutanBuzzer13playFrequencyEjjh>:
//   means that you can't use a max duration of 65535 ms for frequencies
//   greater than 1 kHz.  For example, the max duration you can use for a
//   frequency of 10 kHz is 6553 ms.  If you use a duration longer than this,
//   you will cause an integer overflow that produces unexpected behavior.
void OrangutanBuzzer::playFrequency(unsigned int freq, unsigned int dur, 
				   					unsigned char volume)
     7c0:	a0 e0       	ldi	r26, 0x00	; 0
     7c2:	b0 e0       	ldi	r27, 0x00	; 0
     7c4:	e6 ee       	ldi	r30, 0xE6	; 230
     7c6:	f3 e0       	ldi	r31, 0x03	; 3
     7c8:	0c 94 b8 10 	jmp	0x2170	; 0x2170 <__prologue_saves__+0x10>
     7cc:	8c 01       	movw	r16, r24
     7ce:	5b 01       	movw	r10, r22
     7d0:	c4 2e       	mov	r12, r20
extern unsigned char buzzerInitialized;

// this is called by playFrequency()
inline void OrangutanBuzzer::init()
{
	if (!buzzerInitialized)
     7d2:	80 91 5d 01 	lds	r24, 0x015D
     7d6:	88 23       	and	r24, r24
     7d8:	29 f4       	brne	.+10     	; 0x7e4 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x24>
	{
		buzzerInitialized = 1;
     7da:	81 e0       	ldi	r24, 0x01	; 1
     7dc:	80 93 5d 01 	sts	0x015D, r24
		init2();
     7e0:	0e 94 c9 03 	call	0x792	; 0x792 <_ZN15OrangutanBuzzer5init2Ev>
//   you will cause an integer overflow that produces unexpected behavior.
void OrangutanBuzzer::playFrequency(unsigned int freq, unsigned int dur, 
				   					unsigned char volume)
{
	init();		// initializes the buzzer if necessary
	buzzerFinished = 0;
     7e4:	10 92 38 01 	sts	0x0138, r1
	unsigned int newTCCR1B;
	unsigned int timeout;
	unsigned char multiplier = 1;
	

	if (freq & DIV_BY_10)		// if frequency's DIV_BY_10 bit is set
     7e8:	17 fd       	sbrc	r17, 7
     7ea:	03 c0       	rjmp	.+6      	; 0x7f2 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x32>
     7ec:	dd 24       	eor	r13, r13
     7ee:	d3 94       	inc	r13
     7f0:	03 c0       	rjmp	.+6      	; 0x7f8 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x38>
	{							//  then the true frequency is freq/10
		multiplier = 10;		//  (gives higher resolution for small freqs)
		freq &= ~DIV_BY_10;		// clear DIV_BY_10 bit
     7f2:	1f 77       	andi	r17, 0x7F	; 127
     7f4:	2a e0       	ldi	r18, 0x0A	; 10
     7f6:	d2 2e       	mov	r13, r18
	}

	newTCCR1B = TCCR1B & 0xF8;	// clear clock select bits
     7f8:	80 91 81 00 	lds	r24, 0x0081
     7fc:	e8 2e       	mov	r14, r24
     7fe:	ff 24       	eor	r15, r15
     800:	88 ef       	ldi	r24, 0xF8	; 248
     802:	e8 22       	and	r14, r24
     804:	ff 24       	eor	r15, r15

	// calculate necessary clock source and counter top value to get freq
	if (freq > 200 * ((unsigned int)multiplier))	// clock prescaler = 1
     806:	88 ec       	ldi	r24, 0xC8	; 200
     808:	d8 9e       	mul	r13, r24
     80a:	c0 01       	movw	r24, r0
     80c:	11 24       	eor	r1, r1
     80e:	80 17       	cp	r24, r16
     810:	91 07       	cpc	r25, r17
     812:	c8 f4       	brcc	.+50     	; 0x846 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x86>
     814:	e8 01       	movw	r28, r16
     816:	97 e2       	ldi	r25, 0x27	; 39
     818:	01 31       	cpi	r16, 0x11	; 17
     81a:	19 07       	cpc	r17, r25
     81c:	10 f0       	brcs	.+4      	; 0x822 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x62>
     81e:	c0 e1       	ldi	r28, 0x10	; 16
     820:	d7 e2       	ldi	r29, 0x27	; 39
	{
		if (freq > 10000)
			freq = 10000;			// max frequency allowed is 10kHz

		newOCR1A = (unsigned int)((10000000UL + (freq >> 1)) / freq);
     822:	be 01       	movw	r22, r28
     824:	76 95       	lsr	r23
     826:	67 95       	ror	r22
     828:	80 e0       	ldi	r24, 0x00	; 0
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	60 58       	subi	r22, 0x80	; 128
     82e:	79 46       	sbci	r23, 0x69	; 105
     830:	87 46       	sbci	r24, 0x67	; 103
     832:	9f 4f       	sbci	r25, 0xFF	; 255
     834:	9e 01       	movw	r18, r28
     836:	40 e0       	ldi	r20, 0x00	; 0
     838:	50 e0       	ldi	r21, 0x00	; 0
     83a:	0e 94 73 10 	call	0x20e6	; 0x20e6 <__udivmodsi4>
     83e:	89 01       	movw	r16, r18

		// timer1 clock select:
		newTCCR1B |= TIMER1_CLK_1;	// select IO clk (prescaler = 1)
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	25 c0       	rjmp	.+74     	; 0x890 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xd0>
     846:	88 e2       	ldi	r24, 0x28	; 40
     848:	d8 9e       	mul	r13, r24
     84a:	80 2d       	mov	r24, r0
     84c:	11 24       	eor	r1, r1
     84e:	c8 2f       	mov	r28, r24
     850:	d0 e0       	ldi	r29, 0x00	; 0
     852:	c0 17       	cp	r28, r16
     854:	d1 07       	cpc	r29, r17
     856:	08 f4       	brcc	.+2      	; 0x85a <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x9a>
     858:	e8 01       	movw	r28, r16
     85a:	be 01       	movw	r22, r28
     85c:	76 95       	lsr	r23
     85e:	67 95       	ror	r22
     860:	9e 01       	movw	r18, r28
     862:	40 e0       	ldi	r20, 0x00	; 0
     864:	50 e0       	ldi	r21, 0x00	; 0
		unsigned char val = 40 * multiplier;
		if (freq < val)				// min frequency allowed is 40 Hz
			freq = val;

		// set top (frequency):
		if (multiplier == 10)
     866:	9a e0       	ldi	r25, 0x0A	; 10
     868:	d9 16       	cp	r13, r25
     86a:	39 f4       	brne	.+14     	; 0x87a <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xba>
			newOCR1A = (unsigned int)((12500000UL + (freq >> 1))/ freq);
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	60 5e       	subi	r22, 0xE0	; 224
     872:	73 44       	sbci	r23, 0x43	; 67
     874:	81 44       	sbci	r24, 0x41	; 65
     876:	9f 4f       	sbci	r25, 0xFF	; 255
     878:	06 c0       	rjmp	.+12     	; 0x886 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xc6>
		else
			newOCR1A = (unsigned int)((1250000UL + (freq >> 1)) / freq);
     87a:	80 e0       	ldi	r24, 0x00	; 0
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	60 53       	subi	r22, 0x30	; 48
     880:	7d 4e       	sbci	r23, 0xED	; 237
     882:	8c 4e       	sbci	r24, 0xEC	; 236
     884:	9f 4f       	sbci	r25, 0xFF	; 255
     886:	0e 94 73 10 	call	0x20e6	; 0x20e6 <__udivmodsi4>
     88a:	89 01       	movw	r16, r18

		// timer1 clock select
		newTCCR1B |= TIMER1_CLK_8;	// select IO clk / 8
     88c:	82 e0       	ldi	r24, 0x02	; 2
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	e8 2a       	or	r14, r24
     892:	f9 2a       	or	r15, r25
	}


	// set timeout (duration):
	if (multiplier == 10)
     894:	9a e0       	ldi	r25, 0x0A	; 10
     896:	d9 16       	cp	r13, r25
     898:	39 f4       	brne	.+14     	; 0x8a8 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xe8>
		freq = (freq + 5) / 10;
     89a:	ce 01       	movw	r24, r28
     89c:	05 96       	adiw	r24, 0x05	; 5
     89e:	6a e0       	ldi	r22, 0x0A	; 10
     8a0:	70 e0       	ldi	r23, 0x00	; 0
     8a2:	0e 94 4c 10 	call	0x2098	; 0x2098 <__udivmodhi4>
     8a6:	eb 01       	movw	r28, r22

	if (freq == 1000)
     8a8:	83 e0       	ldi	r24, 0x03	; 3
     8aa:	c8 3e       	cpi	r28, 0xE8	; 232
     8ac:	d8 07       	cpc	r29, r24
     8ae:	11 f4       	brne	.+4      	; 0x8b4 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xf4>
     8b0:	b5 01       	movw	r22, r10
     8b2:	0f c0       	rjmp	.+30     	; 0x8d2 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x112>
		timeout = dur;	// duration for silent notes is exact
	else
		timeout = (unsigned int)((long)dur * freq / 1000);
     8b4:	be 01       	movw	r22, r28
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	95 01       	movw	r18, r10
     8bc:	40 e0       	ldi	r20, 0x00	; 0
     8be:	50 e0       	ldi	r21, 0x00	; 0
     8c0:	0e 94 21 10 	call	0x2042	; 0x2042 <__mulsi3>
     8c4:	28 ee       	ldi	r18, 0xE8	; 232
     8c6:	33 e0       	ldi	r19, 0x03	; 3
     8c8:	40 e0       	ldi	r20, 0x00	; 0
     8ca:	50 e0       	ldi	r21, 0x00	; 0
     8cc:	0e 94 95 10 	call	0x212a	; 0x212a <__divmodsi4>
     8d0:	b9 01       	movw	r22, r18
	
	if (volume > 15)
		volume = 15;

	DISABLE_TIMER1_INTERRUPT();			// disable interrupts while writing 
     8d2:	10 92 6f 00 	sts	0x006F, r1
										//  to 16-bit registers
	TCCR1B = newTCCR1B;					// select timer 1 clock prescaler
     8d6:	e0 92 81 00 	sts	0x0081, r14
	OCR1A = newOCR1A;					// set timer 1 pwm frequency
     8da:	10 93 89 00 	sts	0x0089, r17
     8de:	00 93 88 00 	sts	0x0088, r16
	OCR1B = OCR1A >> (16 - volume);	// set duty cycle (volume)
     8e2:	e0 91 88 00 	lds	r30, 0x0088
     8e6:	f0 91 89 00 	lds	r31, 0x0089
     8ea:	ac 2d       	mov	r26, r12
     8ec:	a0 31       	cpi	r26, 0x10	; 16
     8ee:	08 f0       	brcs	.+2      	; 0x8f2 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x132>
     8f0:	af e0       	ldi	r26, 0x0F	; 15
     8f2:	80 e1       	ldi	r24, 0x10	; 16
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	8a 1b       	sub	r24, r26
     8f8:	91 09       	sbc	r25, r1
     8fa:	02 c0       	rjmp	.+4      	; 0x900 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x140>
     8fc:	f6 95       	lsr	r31
     8fe:	e7 95       	ror	r30
     900:	8a 95       	dec	r24
     902:	e2 f7       	brpl	.-8      	; 0x8fc <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x13c>
     904:	f0 93 8b 00 	sts	0x008B, r31
     908:	e0 93 8a 00 	sts	0x008A, r30
	buzzerTimeout = timeout;			// set buzzer duration
     90c:	70 93 45 01 	sts	0x0145, r23
     910:	60 93 44 01 	sts	0x0144, r22
	
#endif // _ORANGUTAN_X2

	TIFR1 |= 0xFF;						// clear any pending t1 overflow int.
     914:	86 b3       	in	r24, 0x16	; 22
     916:	8f ef       	ldi	r24, 0xFF	; 255
     918:	86 bb       	out	0x16, r24	; 22
	ENABLE_TIMER1_INTERRUPT();			// this is the only place the t1
     91a:	81 e0       	ldi	r24, 0x01	; 1
     91c:	80 93 6f 00 	sts	0x006F, r24
										//  overflow is enabled unless using X2
										
}
     920:	cd b7       	in	r28, 0x3d	; 61
     922:	de b7       	in	r29, 0x3e	; 62
     924:	ea e0       	ldi	r30, 0x0A	; 10
     926:	0c 94 d4 10 	jmp	0x21a8	; 0x21a8 <__epilogue_restores__+0x10>

0000092a <play_frequency>:
#ifdef LIB_POLOLU

extern "C" void play_frequency(unsigned int freq, unsigned int dur, 
							   unsigned char volume)
{
	OrangutanBuzzer::playFrequency(freq, dur, volume);
     92a:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
}
     92e:	08 95       	ret

00000930 <_ZN15OrangutanBuzzer8playNoteEhjh>:
//  means that you can't use a max duration of 65535 ms for frequencies
//  greater than 1 kHz.  For example, the max duration you can use for a
//  frequency of 10 kHz is 6553 ms.  If you use a duration longer than this,
//  you will cause an integer overflow that produces unexpected behavior.
void OrangutanBuzzer::playNote(unsigned char note, unsigned int dur,
							   unsigned char volume)
     930:	cf 93       	push	r28
     932:	df 93       	push	r29
     934:	eb 01       	movw	r28, r22
#else

	unsigned int freq = 0;
	unsigned char offset_note = note - 16;

	if (note == SILENT_NOTE || volume == 0)
     936:	8f 3f       	cpi	r24, 0xFF	; 255
     938:	11 f0       	breq	.+4      	; 0x93e <_ZN15OrangutanBuzzer8playNoteEhjh+0xe>
     93a:	44 23       	and	r20, r20
     93c:	29 f4       	brne	.+10     	; 0x948 <_ZN15OrangutanBuzzer8playNoteEhjh+0x18>
	{
		freq = 1000;	// silent notes => use 1kHz freq (for cycle counter)
		playFrequency(freq, dur, 0);
     93e:	88 ee       	ldi	r24, 0xE8	; 232
     940:	93 e0       	ldi	r25, 0x03	; 3
     942:	be 01       	movw	r22, r28
     944:	40 e0       	ldi	r20, 0x00	; 0
     946:	67 c0       	rjmp	.+206    	; 0xa16 <_ZN15OrangutanBuzzer8playNoteEhjh+0xe6>
		return;
	}

	if (note <= 16)
     948:	81 31       	cpi	r24, 0x11	; 17
     94a:	10 f4       	brcc	.+4      	; 0x950 <_ZN15OrangutanBuzzer8playNoteEhjh+0x20>
     94c:	20 e0       	ldi	r18, 0x00	; 0
     94e:	05 c0       	rjmp	.+10     	; 0x95a <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
	sei();
	
#else

	unsigned int freq = 0;
	unsigned char offset_note = note - 16;
     950:	28 2f       	mov	r18, r24
     952:	20 51       	subi	r18, 0x10	; 16
     954:	20 36       	cpi	r18, 0x60	; 96
     956:	08 f0       	brcs	.+2      	; 0x95a <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
     958:	2f e5       	ldi	r18, 0x5F	; 95
	if (note <= 16)
		offset_note = 0;
	else if (offset_note > 95)
		offset_note = 95;

	unsigned char exponent = offset_note / 12;
     95a:	82 2f       	mov	r24, r18
     95c:	6c e0       	ldi	r22, 0x0C	; 12
     95e:	0e 94 40 10 	call	0x2080	; 0x2080 <__udivmodqi4>
     962:	38 2f       	mov	r19, r24

	// frequency table for the lowest 12 allowed notes
	//   frequencies are specified in tenths of a Hertz for added resolution
	switch (offset_note - exponent * 12)	// equivalent to (offset_note % 12)
     964:	68 2f       	mov	r22, r24
     966:	70 e0       	ldi	r23, 0x00	; 0
     968:	84 ef       	ldi	r24, 0xF4	; 244
     96a:	9f ef       	ldi	r25, 0xFF	; 255
     96c:	68 9f       	mul	r22, r24
     96e:	f0 01       	movw	r30, r0
     970:	69 9f       	mul	r22, r25
     972:	f0 0d       	add	r31, r0
     974:	78 9f       	mul	r23, r24
     976:	f0 0d       	add	r31, r0
     978:	11 24       	eor	r1, r1
     97a:	e2 0f       	add	r30, r18
     97c:	f1 1d       	adc	r31, r1
     97e:	ec 30       	cpi	r30, 0x0C	; 12
     980:	f1 05       	cpc	r31, r1
     982:	38 f4       	brcc	.+14     	; 0x992 <_ZN15OrangutanBuzzer8playNoteEhjh+0x62>
     984:	ea 5b       	subi	r30, 0xBA	; 186
     986:	ff 4f       	sbci	r31, 0xFF	; 255
     988:	0c 94 e7 10 	jmp	0x21ce	; 0x21ce <__tablejump2__>
     98c:	8c e9       	ldi	r24, 0x9C	; 156
     98e:	91 e0       	ldi	r25, 0x01	; 1
     990:	23 c0       	rjmp	.+70     	; 0x9d8 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa8>
     992:	80 e0       	ldi	r24, 0x00	; 0
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	20 c0       	rjmp	.+64     	; 0x9d8 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa8>
     998:	85 eb       	ldi	r24, 0xB5	; 181
     99a:	91 e0       	ldi	r25, 0x01	; 1
     99c:	1d c0       	rjmp	.+58     	; 0x9d8 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa8>
		case 0:				// note E1 = 41.2 Hz
			freq = 412;
			break;
		case 1:				// note F1 = 43.7 Hz
			freq = 437;
			break;
     99e:	8f ec       	ldi	r24, 0xCF	; 207
     9a0:	91 e0       	ldi	r25, 0x01	; 1
     9a2:	1a c0       	rjmp	.+52     	; 0x9d8 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa8>
		case 2:				// note F#1 = 46.3 Hz
			freq = 463;
			break;
     9a4:	8a ee       	ldi	r24, 0xEA	; 234
     9a6:	91 e0       	ldi	r25, 0x01	; 1
     9a8:	17 c0       	rjmp	.+46     	; 0x9d8 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa8>
		case 3:				// note G1 = 49.0 Hz
			freq = 490;
			break;
     9aa:	87 e0       	ldi	r24, 0x07	; 7
     9ac:	92 e0       	ldi	r25, 0x02	; 2
     9ae:	14 c0       	rjmp	.+40     	; 0x9d8 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa8>
		case 4:				// note G#1 = 51.9 Hz
			freq = 519;
			break;
     9b0:	86 e2       	ldi	r24, 0x26	; 38
     9b2:	92 e0       	ldi	r25, 0x02	; 2
     9b4:	11 c0       	rjmp	.+34     	; 0x9d8 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa8>
		case 5:				// note A1 = 55.0 Hz
			freq = 550;
			break;
     9b6:	87 e4       	ldi	r24, 0x47	; 71
     9b8:	92 e0       	ldi	r25, 0x02	; 2
     9ba:	0e c0       	rjmp	.+28     	; 0x9d8 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa8>
		case 6:				// note A#1 = 58.3 Hz
			freq = 583;
			break;
     9bc:	89 e6       	ldi	r24, 0x69	; 105
     9be:	92 e0       	ldi	r25, 0x02	; 2
     9c0:	0b c0       	rjmp	.+22     	; 0x9d8 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa8>
		case 7:				// note B1 = 61.7 Hz
			freq = 617;
			break;
     9c2:	8e e8       	ldi	r24, 0x8E	; 142
     9c4:	92 e0       	ldi	r25, 0x02	; 2
     9c6:	08 c0       	rjmp	.+16     	; 0x9d8 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa8>
		case 8:				// note C2 = 65.4 Hz
			freq = 654;
			break;
     9c8:	85 eb       	ldi	r24, 0xB5	; 181
     9ca:	92 e0       	ldi	r25, 0x02	; 2
     9cc:	05 c0       	rjmp	.+10     	; 0x9d8 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa8>
		case 9:				// note C#2 = 69.3 Hz
			freq = 693;
			break;
     9ce:	8e ed       	ldi	r24, 0xDE	; 222
     9d0:	92 e0       	ldi	r25, 0x02	; 2
     9d2:	02 c0       	rjmp	.+4      	; 0x9d8 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa8>
		case 10:			// note D2 = 73.4 Hz
			freq = 734;
			break;
     9d4:	8a e0       	ldi	r24, 0x0A	; 10
     9d6:	93 e0       	ldi	r25, 0x03	; 3
		case 11:			// note D#2 = 77.8 Hz
			freq = 778;
			break;
	}

	if (exponent < 7)
     9d8:	37 30       	cpi	r19, 0x07	; 7
     9da:	71 f0       	breq	.+28     	; 0x9f8 <_ZN15OrangutanBuzzer8playNoteEhjh+0xc8>
	{
		freq = freq << exponent;	// frequency *= 2 ^ exponent
     9dc:	02 c0       	rjmp	.+4      	; 0x9e2 <_ZN15OrangutanBuzzer8playNoteEhjh+0xb2>
     9de:	88 0f       	add	r24, r24
     9e0:	99 1f       	adc	r25, r25
     9e2:	6a 95       	dec	r22
     9e4:	e2 f7       	brpl	.-8      	; 0x9de <_ZN15OrangutanBuzzer8playNoteEhjh+0xae>
		if (exponent > 1)			// if the frequency is greater than 160 Hz
     9e6:	32 30       	cpi	r19, 0x02	; 2
     9e8:	20 f0       	brcs	.+8      	; 0x9f2 <_ZN15OrangutanBuzzer8playNoteEhjh+0xc2>
			freq = (freq + 5) / 10;	//   we don't need the extra resolution
     9ea:	05 96       	adiw	r24, 0x05	; 5
     9ec:	6a e0       	ldi	r22, 0x0A	; 10
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	0b c0       	rjmp	.+22     	; 0xa08 <_ZN15OrangutanBuzzer8playNoteEhjh+0xd8>
		else
			freq += DIV_BY_10;		// else keep the added digit of resolution
     9f2:	80 50       	subi	r24, 0x00	; 0
     9f4:	90 48       	sbci	r25, 0x80	; 128
     9f6:	0b c0       	rjmp	.+22     	; 0xa0e <_ZN15OrangutanBuzzer8playNoteEhjh+0xde>
	}
	else
		freq = (freq * 64 + 2) / 5;	// == freq * 2^7 / 10 without int overflow
     9f8:	36 e0       	ldi	r19, 0x06	; 6
     9fa:	88 0f       	add	r24, r24
     9fc:	99 1f       	adc	r25, r25
     9fe:	3a 95       	dec	r19
     a00:	e1 f7       	brne	.-8      	; 0x9fa <_ZN15OrangutanBuzzer8playNoteEhjh+0xca>
     a02:	02 96       	adiw	r24, 0x02	; 2
     a04:	65 e0       	ldi	r22, 0x05	; 5
     a06:	70 e0       	ldi	r23, 0x00	; 0
     a08:	0e 94 4c 10 	call	0x2098	; 0x2098 <__udivmodhi4>
     a0c:	cb 01       	movw	r24, r22

	if (volume > 15)
		volume = 15;
	playFrequency(freq, dur, volume);	// set buzzer this freq/duration
     a0e:	40 31       	cpi	r20, 0x10	; 16
     a10:	08 f0       	brcs	.+2      	; 0xa14 <_ZN15OrangutanBuzzer8playNoteEhjh+0xe4>
     a12:	4f e0       	ldi	r20, 0x0F	; 15
     a14:	be 01       	movw	r22, r28
     a16:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
#endif // _ORANGUTAN_X2
}
     a1a:	df 91       	pop	r29
     a1c:	cf 91       	pop	r28
     a1e:	08 95       	ret

00000a20 <play_note>:
}

extern "C" void play_note(unsigned char note, unsigned int dur,
						  unsigned char volume)
{
	OrangutanBuzzer::playNote(note, dur, volume);
     a20:	0e 94 98 04 	call	0x930	; 0x930 <_ZN15OrangutanBuzzer8playNoteEhjh>
}
     a24:	08 95       	ret

00000a26 <_ZN15OrangutanBuzzer9isPlayingEv>:


// Returns 1 if the buzzer is currently playing, otherwise it returns 0
unsigned char OrangutanBuzzer::isPlaying()
{
	return !buzzerFinished || buzzerSequence != 0;
     a26:	80 91 38 01 	lds	r24, 0x0138
     a2a:	88 23       	and	r24, r24
     a2c:	39 f0       	breq	.+14     	; 0xa3c <_ZN15OrangutanBuzzer9isPlayingEv+0x16>
     a2e:	20 e0       	ldi	r18, 0x00	; 0
     a30:	80 91 5e 01 	lds	r24, 0x015E
     a34:	90 91 5f 01 	lds	r25, 0x015F
     a38:	89 2b       	or	r24, r25
     a3a:	09 f0       	breq	.+2      	; 0xa3e <_ZN15OrangutanBuzzer9isPlayingEv+0x18>
     a3c:	21 e0       	ldi	r18, 0x01	; 1
}
     a3e:	82 2f       	mov	r24, r18
     a40:	08 95       	ret

00000a42 <_ZN15OrangutanBuzzer11stopPlayingEv>:


// stop all sound playback immediately
void OrangutanBuzzer::stopPlaying()
{
	DISABLE_TIMER1_INTERRUPT();					// disable interrupts
     a42:	10 92 6f 00 	sts	0x006F, r1
	TCCR1B = (TCCR1B & 0xF8) | TIMER1_CLK_1;	// select IO clock
     a46:	e1 e8       	ldi	r30, 0x81	; 129
     a48:	f0 e0       	ldi	r31, 0x00	; 0
     a4a:	80 81       	ld	r24, Z
     a4c:	88 7f       	andi	r24, 0xF8	; 248
     a4e:	81 60       	ori	r24, 0x01	; 1
     a50:	80 83       	st	Z, r24
	OCR1A = (F_CPU/2) / 1000;					// set TOP for freq = 1 kHz
     a52:	80 e1       	ldi	r24, 0x10	; 16
     a54:	97 e2       	ldi	r25, 0x27	; 39
     a56:	90 93 89 00 	sts	0x0089, r25
     a5a:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 0;									// 0% duty cycle
     a5e:	10 92 8b 00 	sts	0x008B, r1
     a62:	10 92 8a 00 	sts	0x008A, r1
	buzzerFinished = 1;
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	80 93 38 01 	sts	0x0138, r24
	buzzerSequence = 0;
     a6c:	10 92 5f 01 	sts	0x015F, r1
     a70:	10 92 5e 01 	sts	0x015E, r1
#ifdef _ORANGUTAN_X2
	OrangutanX2::buzzerOff();
#endif
}
     a74:	08 95       	ret

00000a76 <stop_playing>:
	return OrangutanBuzzer::isPlaying();
}

extern "C" void stop_playing()
{
	OrangutanBuzzer::stopPlaying();
     a76:	0e 94 21 05 	call	0xa42	; 0xa42 <_ZN15OrangutanBuzzer11stopPlayingEv>
}
     a7a:	08 95       	ret

00000a7c <_ZL16currentCharacterv>:
static char currentCharacter()
{
	char c = 0;
	do
	{
		if(use_program_space)
     a7c:	30 91 42 01 	lds	r19, 0x0142
     a80:	e0 91 5e 01 	lds	r30, 0x015E
     a84:	f0 91 5f 01 	lds	r31, 0x015F
     a88:	33 23       	and	r19, r19
     a8a:	11 f0       	breq	.+4      	; 0xa90 <_ZL16currentCharacterv+0x14>
			c = pgm_read_byte(buzzerSequence);
     a8c:	24 91       	lpm	r18, Z+
     a8e:	01 c0       	rjmp	.+2      	; 0xa92 <_ZL16currentCharacterv+0x16>
		else
			c = *buzzerSequence;
     a90:	20 81       	ld	r18, Z

		if(c >= 'A' && c <= 'Z')
     a92:	82 2f       	mov	r24, r18
     a94:	81 54       	subi	r24, 0x41	; 65
     a96:	8a 31       	cpi	r24, 0x1A	; 26
     a98:	08 f4       	brcc	.+2      	; 0xa9c <_ZL16currentCharacterv+0x20>
			c += 'a'-'A';
     a9a:	20 5e       	subi	r18, 0xE0	; 224
// Gets the current character, converting to lower-case and skipping
// spaces.  For any spaces, this automatically increments sequence!
static char currentCharacter()
{
	char c = 0;
	do
     a9c:	20 32       	cpi	r18, 0x20	; 32
     a9e:	59 f4       	brne	.+22     	; 0xab6 <_ZL16currentCharacterv+0x3a>
     aa0:	80 91 5e 01 	lds	r24, 0x015E
     aa4:	90 91 5f 01 	lds	r25, 0x015F
     aa8:	01 96       	adiw	r24, 0x01	; 1
     aaa:	90 93 5f 01 	sts	0x015F, r25
     aae:	80 93 5e 01 	sts	0x015E, r24
     ab2:	01 97       	sbiw	r24, 0x01	; 1
     ab4:	29 f7       	brne	.-54     	; 0xa80 <_ZL16currentCharacterv+0x4>
		if(c >= 'A' && c <= 'Z')
			c += 'a'-'A';
	} while(c == ' ' && (buzzerSequence ++));

	return c;
}
     ab6:	82 2f       	mov	r24, r18
     ab8:	08 95       	ret

00000aba <_ZL9getNumberv>:

// Returns the numerical argument specified at buzzerSequence[0] and
// increments sequence to point to the character immediately after the
// argument.
static unsigned int getNumber()
     aba:	cf 93       	push	r28
     abc:	df 93       	push	r29
{
	unsigned int arg = 0;

	// read all digits, one at a time
	char c = currentCharacter();
     abe:	0e 94 3e 05 	call	0xa7c	; 0xa7c <_ZL16currentCharacterv>
     ac2:	28 2f       	mov	r18, r24
     ac4:	c0 e0       	ldi	r28, 0x00	; 0
     ac6:	d0 e0       	ldi	r29, 0x00	; 0
     ac8:	1d c0       	rjmp	.+58     	; 0xb04 <_ZL9getNumberv+0x4a>
	while(c >= '0' && c <= '9')
	{
		arg *= 10;
		arg += c-'0';
     aca:	ce 01       	movw	r24, r28
     acc:	53 e0       	ldi	r21, 0x03	; 3
     ace:	88 0f       	add	r24, r24
     ad0:	99 1f       	adc	r25, r25
     ad2:	5a 95       	dec	r21
     ad4:	e1 f7       	brne	.-8      	; 0xace <_ZL9getNumberv+0x14>
     ad6:	cc 0f       	add	r28, r28
     ad8:	dd 1f       	adc	r29, r29
     ada:	c8 0f       	add	r28, r24
     adc:	d9 1f       	adc	r29, r25
     ade:	82 2f       	mov	r24, r18
     ae0:	99 27       	eor	r25, r25
     ae2:	87 fd       	sbrc	r24, 7
     ae4:	90 95       	com	r25
     ae6:	c8 0f       	add	r28, r24
     ae8:	d9 1f       	adc	r29, r25
     aea:	e0 97       	sbiw	r28, 0x30	; 48
		buzzerSequence ++;
     aec:	80 91 5e 01 	lds	r24, 0x015E
     af0:	90 91 5f 01 	lds	r25, 0x015F
     af4:	01 96       	adiw	r24, 0x01	; 1
     af6:	90 93 5f 01 	sts	0x015F, r25
     afa:	80 93 5e 01 	sts	0x015E, r24
		c = currentCharacter();
     afe:	0e 94 3e 05 	call	0xa7c	; 0xa7c <_ZL16currentCharacterv>
     b02:	28 2f       	mov	r18, r24
{
	unsigned int arg = 0;

	// read all digits, one at a time
	char c = currentCharacter();
	while(c >= '0' && c <= '9')
     b04:	82 2f       	mov	r24, r18
     b06:	80 53       	subi	r24, 0x30	; 48
     b08:	8a 30       	cpi	r24, 0x0A	; 10
     b0a:	f8 f2       	brcs	.-66     	; 0xaca <_ZL9getNumberv+0x10>
		buzzerSequence ++;
		c = currentCharacter();
	}

	return arg;
}
     b0c:	ce 01       	movw	r24, r28
     b0e:	df 91       	pop	r29
     b10:	cf 91       	pop	r28
     b12:	08 95       	ret

00000b14 <_ZL8nextNotev>:

static void nextNote()
     b14:	a0 e0       	ldi	r26, 0x00	; 0
     b16:	b0 e0       	ldi	r27, 0x00	; 0
     b18:	e0 e9       	ldi	r30, 0x90	; 144
     b1a:	f5 e0       	ldi	r31, 0x05	; 5
     b1c:	0c 94 b6 10 	jmp	0x216c	; 0x216c <__prologue_saves__+0xc>
{
	unsigned char note = 0;
	unsigned char rest = 0;
	unsigned char tmp_octave = octave; // the octave for this note
     b20:	80 90 2d 01 	lds	r8, 0x012D
	unsigned int dot_add;

	char c; // temporary variable

	// if we are playing staccato, after every note we play a rest
	if(staccato && staccato_rest_duration)
     b24:	b0 90 40 01 	lds	r11, 0x0140
     b28:	bb 20       	and	r11, r11
     b2a:	21 f0       	breq	.+8      	; 0xb34 <_ZL8nextNotev+0x20>
     b2c:	60 91 41 01 	lds	r22, 0x0141
     b30:	66 23       	and	r22, r22
     b32:	99 f4       	brne	.+38     	; 0xb5a <_ZL8nextNotev+0x46>
     b34:	a0 90 41 01 	lds	r10, 0x0141
     b38:	00 91 32 01 	lds	r16, 0x0132
     b3c:	10 91 33 01 	lds	r17, 0x0133
     b40:	e0 90 2e 01 	lds	r14, 0x012E
     b44:	f0 90 2f 01 	lds	r15, 0x012F
     b48:	c0 91 30 01 	lds	r28, 0x0130
     b4c:	d0 91 31 01 	lds	r29, 0x0131
     b50:	c0 90 34 01 	lds	r12, 0x0134
     b54:	d0 90 35 01 	lds	r13, 0x0135
     b58:	08 c1       	rjmp	.+528    	; 0xd6a <_ZL8nextNotev+0x256>
	{
		OrangutanBuzzer::playNote(SILENT_NOTE, staccato_rest_duration, 0);
     b5a:	8f ef       	ldi	r24, 0xFF	; 255
     b5c:	70 e0       	ldi	r23, 0x00	; 0
     b5e:	40 e0       	ldi	r20, 0x00	; 0
     b60:	0e 94 98 04 	call	0x930	; 0x930 <_ZN15OrangutanBuzzer8playNoteEhjh>
		staccato_rest_duration = 0;
     b64:	10 92 41 01 	sts	0x0141, r1
     b68:	cb c1       	rjmp	.+918    	; 0xf00 <_ZL8nextNotev+0x3ec>
		return;
     b6a:	94 e0       	ldi	r25, 0x04	; 4
     b6c:	89 2e       	mov	r8, r25
     b6e:	bb 24       	eor	r11, r11
     b70:	04 ef       	ldi	r16, 0xF4	; 244
     b72:	11 e0       	ldi	r17, 0x01	; 1
     b74:	84 e0       	ldi	r24, 0x04	; 4
     b76:	e8 2e       	mov	r14, r24
     b78:	f1 2c       	mov	r15, r1
     b7a:	c0 ed       	ldi	r28, 0xD0	; 208
     b7c:	d7 e0       	ldi	r29, 0x07	; 7
     b7e:	b4 e0       	ldi	r27, 0x04	; 4
     b80:	9b 2e       	mov	r9, r27
     b82:	af e0       	ldi	r26, 0x0F	; 15
     b84:	ca 2e       	mov	r12, r26
     b86:	d1 2c       	mov	r13, r1
	}

 parse_character:

	// Get current character
	c = currentCharacter();
     b88:	0e 94 3e 05 	call	0xa7c	; 0xa7c <_ZL16currentCharacterv>
     b8c:	28 2f       	mov	r18, r24
	buzzerSequence ++;
     b8e:	80 91 5e 01 	lds	r24, 0x015E
     b92:	90 91 5f 01 	lds	r25, 0x015F
     b96:	01 96       	adiw	r24, 0x01	; 1
     b98:	90 93 5f 01 	sts	0x015F, r25
     b9c:	80 93 5e 01 	sts	0x015E, r24

	// Interpret the character.
	switch(c)
     ba0:	26 36       	cpi	r18, 0x66	; 102
     ba2:	09 f4       	brne	.+2      	; 0xba6 <_ZL8nextNotev+0x92>
     ba4:	98 c0       	rjmp	.+304    	; 0xcd6 <_ZL8nextNotev+0x1c2>
     ba6:	27 36       	cpi	r18, 0x67	; 103
     ba8:	cc f4       	brge	.+50     	; 0xbdc <_ZL8nextNotev+0xc8>
     baa:	22 36       	cpi	r18, 0x62	; 98
     bac:	a1 f1       	breq	.+104    	; 0xc16 <_ZL8nextNotev+0x102>
     bae:	23 36       	cpi	r18, 0x63	; 99
     bb0:	74 f4       	brge	.+28     	; 0xbce <_ZL8nextNotev+0xba>
     bb2:	2e 33       	cpi	r18, 0x3E	; 62
     bb4:	61 f1       	breq	.+88     	; 0xc0e <_ZL8nextNotev+0xfa>
     bb6:	2f 33       	cpi	r18, 0x3F	; 63
     bb8:	34 f4       	brge	.+12     	; 0xbc6 <_ZL8nextNotev+0xb2>
     bba:	21 32       	cpi	r18, 0x21	; 33
     bbc:	b1 f2       	breq	.-84     	; 0xb6a <_ZL8nextNotev+0x56>
     bbe:	2c 33       	cpi	r18, 0x3C	; 60
     bc0:	09 f0       	breq	.+2      	; 0xbc4 <_ZL8nextNotev+0xb0>
     bc2:	0b c1       	rjmp	.+534    	; 0xdda <_ZL8nextNotev+0x2c6>
     bc4:	26 c0       	rjmp	.+76     	; 0xc12 <_ZL8nextNotev+0xfe>
     bc6:	21 36       	cpi	r18, 0x61	; 97
     bc8:	09 f0       	breq	.+2      	; 0xbcc <_ZL8nextNotev+0xb8>
     bca:	07 c1       	rjmp	.+526    	; 0xdda <_ZL8nextNotev+0x2c6>
     bcc:	21 c1       	rjmp	.+578    	; 0xe10 <_ZL8nextNotev+0x2fc>
     bce:	24 36       	cpi	r18, 0x64	; 100
     bd0:	09 f4       	brne	.+2      	; 0xbd4 <_ZL8nextNotev+0xc0>
     bd2:	51 c0       	rjmp	.+162    	; 0xc76 <_ZL8nextNotev+0x162>
     bd4:	25 36       	cpi	r18, 0x65	; 101
     bd6:	0c f0       	brlt	.+2      	; 0xbda <_ZL8nextNotev+0xc6>
     bd8:	66 c0       	rjmp	.+204    	; 0xca6 <_ZL8nextNotev+0x192>
     bda:	35 c0       	rjmp	.+106    	; 0xc46 <_ZL8nextNotev+0x132>
     bdc:	2f 36       	cpi	r18, 0x6F	; 111
     bde:	09 f4       	brne	.+2      	; 0xbe2 <_ZL8nextNotev+0xce>
     be0:	c1 c0       	rjmp	.+386    	; 0xd64 <_ZL8nextNotev+0x250>
     be2:	20 37       	cpi	r18, 0x70	; 112
     be4:	54 f4       	brge	.+20     	; 0xbfa <_ZL8nextNotev+0xe6>
     be6:	2c 36       	cpi	r18, 0x6C	; 108
     be8:	09 f4       	brne	.+2      	; 0xbec <_ZL8nextNotev+0xd8>
     bea:	a5 c0       	rjmp	.+330    	; 0xd36 <_ZL8nextNotev+0x222>
     bec:	2d 36       	cpi	r18, 0x6D	; 109
     bee:	09 f4       	brne	.+2      	; 0xbf2 <_ZL8nextNotev+0xde>
     bf0:	a6 c0       	rjmp	.+332    	; 0xd3e <_ZL8nextNotev+0x22a>
     bf2:	27 36       	cpi	r18, 0x67	; 103
     bf4:	09 f0       	breq	.+2      	; 0xbf8 <_ZL8nextNotev+0xe4>
     bf6:	f1 c0       	rjmp	.+482    	; 0xdda <_ZL8nextNotev+0x2c6>
     bf8:	86 c0       	rjmp	.+268    	; 0xd06 <_ZL8nextNotev+0x1f2>
     bfa:	24 37       	cpi	r18, 0x74	; 116
     bfc:	09 f4       	brne	.+2      	; 0xc00 <_ZL8nextNotev+0xec>
     bfe:	d1 c0       	rjmp	.+418    	; 0xda2 <_ZL8nextNotev+0x28e>
     c00:	26 37       	cpi	r18, 0x76	; 118
     c02:	09 f4       	brne	.+2      	; 0xc06 <_ZL8nextNotev+0xf2>
     c04:	e6 c0       	rjmp	.+460    	; 0xdd2 <_ZL8nextNotev+0x2be>
     c06:	22 37       	cpi	r18, 0x72	; 114
     c08:	09 f0       	breq	.+2      	; 0xc0c <_ZL8nextNotev+0xf8>
     c0a:	e7 c0       	rjmp	.+462    	; 0xdda <_ZL8nextNotev+0x2c6>
     c0c:	b0 c0       	rjmp	.+352    	; 0xd6e <_ZL8nextNotev+0x25a>
	{
	case '>':
		// shift the octave temporarily up
		tmp_octave ++;
     c0e:	83 94       	inc	r8
     c10:	bb cf       	rjmp	.-138    	; 0xb88 <_ZL8nextNotev+0x74>
		goto parse_character;
	case '<':
		// shift the octave temporarily down
		tmp_octave --;
     c12:	8a 94       	dec	r8
     c14:	b9 cf       	rjmp	.-142    	; 0xb88 <_ZL8nextNotev+0x74>
		goto parse_character;
     c16:	a0 92 41 01 	sts	0x0141, r10
     c1a:	b0 92 40 01 	sts	0x0140, r11
     c1e:	10 93 33 01 	sts	0x0133, r17
     c22:	00 93 32 01 	sts	0x0132, r16
     c26:	f0 92 2f 01 	sts	0x012F, r15
     c2a:	e0 92 2e 01 	sts	0x012E, r14
     c2e:	d0 93 31 01 	sts	0x0131, r29
     c32:	c0 93 30 01 	sts	0x0130, r28
     c36:	90 92 2d 01 	sts	0x012D, r9
     c3a:	d0 92 35 01 	sts	0x0135, r13
     c3e:	c0 92 34 01 	sts	0x0134, r12
     c42:	2b e0       	ldi	r18, 0x0B	; 11
     c44:	fc c0       	rjmp	.+504    	; 0xe3e <_ZL8nextNotev+0x32a>
	case 'a':
		note = A(0);
		break;
	case 'b':
		note = B(0);
		break;
     c46:	a0 92 41 01 	sts	0x0141, r10
     c4a:	b0 92 40 01 	sts	0x0140, r11
     c4e:	10 93 33 01 	sts	0x0133, r17
     c52:	00 93 32 01 	sts	0x0132, r16
     c56:	f0 92 2f 01 	sts	0x012F, r15
     c5a:	e0 92 2e 01 	sts	0x012E, r14
     c5e:	d0 93 31 01 	sts	0x0131, r29
     c62:	c0 93 30 01 	sts	0x0130, r28
     c66:	90 92 2d 01 	sts	0x012D, r9
     c6a:	d0 92 35 01 	sts	0x0135, r13
     c6e:	c0 92 34 01 	sts	0x0134, r12
     c72:	20 e0       	ldi	r18, 0x00	; 0
     c74:	e4 c0       	rjmp	.+456    	; 0xe3e <_ZL8nextNotev+0x32a>
	case 'c':
		note = C(0);
		break;
     c76:	a0 92 41 01 	sts	0x0141, r10
     c7a:	b0 92 40 01 	sts	0x0140, r11
     c7e:	10 93 33 01 	sts	0x0133, r17
     c82:	00 93 32 01 	sts	0x0132, r16
     c86:	f0 92 2f 01 	sts	0x012F, r15
     c8a:	e0 92 2e 01 	sts	0x012E, r14
     c8e:	d0 93 31 01 	sts	0x0131, r29
     c92:	c0 93 30 01 	sts	0x0130, r28
     c96:	90 92 2d 01 	sts	0x012D, r9
     c9a:	d0 92 35 01 	sts	0x0135, r13
     c9e:	c0 92 34 01 	sts	0x0134, r12
     ca2:	22 e0       	ldi	r18, 0x02	; 2
     ca4:	cc c0       	rjmp	.+408    	; 0xe3e <_ZL8nextNotev+0x32a>
	case 'd':
		note = D(0);
		break;
     ca6:	a0 92 41 01 	sts	0x0141, r10
     caa:	b0 92 40 01 	sts	0x0140, r11
     cae:	10 93 33 01 	sts	0x0133, r17
     cb2:	00 93 32 01 	sts	0x0132, r16
     cb6:	f0 92 2f 01 	sts	0x012F, r15
     cba:	e0 92 2e 01 	sts	0x012E, r14
     cbe:	d0 93 31 01 	sts	0x0131, r29
     cc2:	c0 93 30 01 	sts	0x0130, r28
     cc6:	90 92 2d 01 	sts	0x012D, r9
     cca:	d0 92 35 01 	sts	0x0135, r13
     cce:	c0 92 34 01 	sts	0x0134, r12
     cd2:	24 e0       	ldi	r18, 0x04	; 4
     cd4:	b4 c0       	rjmp	.+360    	; 0xe3e <_ZL8nextNotev+0x32a>
	case 'e':
		note = E(0);
		break;
     cd6:	a0 92 41 01 	sts	0x0141, r10
     cda:	b0 92 40 01 	sts	0x0140, r11
     cde:	10 93 33 01 	sts	0x0133, r17
     ce2:	00 93 32 01 	sts	0x0132, r16
     ce6:	f0 92 2f 01 	sts	0x012F, r15
     cea:	e0 92 2e 01 	sts	0x012E, r14
     cee:	d0 93 31 01 	sts	0x0131, r29
     cf2:	c0 93 30 01 	sts	0x0130, r28
     cf6:	90 92 2d 01 	sts	0x012D, r9
     cfa:	d0 92 35 01 	sts	0x0135, r13
     cfe:	c0 92 34 01 	sts	0x0134, r12
     d02:	25 e0       	ldi	r18, 0x05	; 5
     d04:	9c c0       	rjmp	.+312    	; 0xe3e <_ZL8nextNotev+0x32a>
	case 'f':
		note = F(0);
		break;
     d06:	a0 92 41 01 	sts	0x0141, r10
     d0a:	b0 92 40 01 	sts	0x0140, r11
     d0e:	10 93 33 01 	sts	0x0133, r17
     d12:	00 93 32 01 	sts	0x0132, r16
     d16:	f0 92 2f 01 	sts	0x012F, r15
     d1a:	e0 92 2e 01 	sts	0x012E, r14
     d1e:	d0 93 31 01 	sts	0x0131, r29
     d22:	c0 93 30 01 	sts	0x0130, r28
     d26:	90 92 2d 01 	sts	0x012D, r9
     d2a:	d0 92 35 01 	sts	0x0135, r13
     d2e:	c0 92 34 01 	sts	0x0134, r12
     d32:	27 e0       	ldi	r18, 0x07	; 7
     d34:	84 c0       	rjmp	.+264    	; 0xe3e <_ZL8nextNotev+0x32a>
	case 'g':
		note = G(0);
		break;
	case 'l':
		// set the default note duration
		note_type = getNumber();
     d36:	0e 94 5d 05 	call	0xaba	; 0xaba <_ZL9getNumberv>
     d3a:	7c 01       	movw	r14, r24
     d3c:	44 c0       	rjmp	.+136    	; 0xdc6 <_ZL8nextNotev+0x2b2>
		duration = whole_note_duration/note_type;
		goto parse_character;
	case 'm':
		// set music staccato or legato
		if(currentCharacter() == 'l')
     d3e:	0e 94 3e 05 	call	0xa7c	; 0xa7c <_ZL16currentCharacterv>
     d42:	8c 36       	cpi	r24, 0x6C	; 108
     d44:	11 f4       	brne	.+4      	; 0xd4a <_ZL8nextNotev+0x236>
     d46:	bb 24       	eor	r11, r11
     d48:	03 c0       	rjmp	.+6      	; 0xd50 <_ZL8nextNotev+0x23c>
     d4a:	aa 24       	eor	r10, r10
     d4c:	bb 24       	eor	r11, r11
     d4e:	b3 94       	inc	r11
		else
		{
			staccato = true;
			staccato_rest_duration = 0;
		}
		buzzerSequence ++;
     d50:	80 91 5e 01 	lds	r24, 0x015E
     d54:	90 91 5f 01 	lds	r25, 0x015F
     d58:	01 96       	adiw	r24, 0x01	; 1
     d5a:	90 93 5f 01 	sts	0x015F, r25
     d5e:	80 93 5e 01 	sts	0x015E, r24
     d62:	12 cf       	rjmp	.-476    	; 0xb88 <_ZL8nextNotev+0x74>
		goto parse_character;
	case 'o':
		// set the octave permanently
		octave = getNumber();
     d64:	0e 94 5d 05 	call	0xaba	; 0xaba <_ZL9getNumberv>
     d68:	88 2e       	mov	r8, r24
     d6a:	98 2c       	mov	r9, r8
     d6c:	0d cf       	rjmp	.-486    	; 0xb88 <_ZL8nextNotev+0x74>
		tmp_octave = octave;
		goto parse_character;
     d6e:	a0 92 41 01 	sts	0x0141, r10
     d72:	b0 92 40 01 	sts	0x0140, r11
     d76:	10 93 33 01 	sts	0x0133, r17
     d7a:	00 93 32 01 	sts	0x0132, r16
     d7e:	f0 92 2f 01 	sts	0x012F, r15
     d82:	e0 92 2e 01 	sts	0x012E, r14
     d86:	d0 93 31 01 	sts	0x0131, r29
     d8a:	c0 93 30 01 	sts	0x0130, r28
     d8e:	90 92 2d 01 	sts	0x012D, r9
     d92:	d0 92 35 01 	sts	0x0135, r13
     d96:	c0 92 34 01 	sts	0x0134, r12
     d9a:	20 e0       	ldi	r18, 0x00	; 0
     d9c:	ff 24       	eor	r15, r15
     d9e:	f3 94       	inc	r15
     da0:	4f c0       	rjmp	.+158    	; 0xe40 <_ZL8nextNotev+0x32c>
		// Rest - the note value doesn't matter.
		rest = 1;
		break;
	case 't':
		// set the tempo
		whole_note_duration = 60*400/getNumber()*10;
     da2:	0e 94 5d 05 	call	0xaba	; 0xaba <_ZL9getNumberv>
     da6:	bc 01       	movw	r22, r24
     da8:	80 ec       	ldi	r24, 0xC0	; 192
     daa:	9d e5       	ldi	r25, 0x5D	; 93
     dac:	0e 94 4c 10 	call	0x2098	; 0x2098 <__udivmodhi4>
     db0:	cb 01       	movw	r24, r22
     db2:	eb 01       	movw	r28, r22
     db4:	f3 e0       	ldi	r31, 0x03	; 3
     db6:	cc 0f       	add	r28, r28
     db8:	dd 1f       	adc	r29, r29
     dba:	fa 95       	dec	r31
     dbc:	e1 f7       	brne	.-8      	; 0xdb6 <_ZL8nextNotev+0x2a2>
     dbe:	88 0f       	add	r24, r24
     dc0:	99 1f       	adc	r25, r25
     dc2:	c8 0f       	add	r28, r24
     dc4:	d9 1f       	adc	r29, r25
		duration = whole_note_duration/note_type;
     dc6:	ce 01       	movw	r24, r28
     dc8:	b7 01       	movw	r22, r14
     dca:	0e 94 4c 10 	call	0x2098	; 0x2098 <__udivmodhi4>
     dce:	8b 01       	movw	r16, r22
     dd0:	db ce       	rjmp	.-586    	; 0xb88 <_ZL8nextNotev+0x74>
		goto parse_character;
	case 'v':
		// set the volume
		volume = getNumber();
     dd2:	0e 94 5d 05 	call	0xaba	; 0xaba <_ZL9getNumberv>
     dd6:	6c 01       	movw	r12, r24
     dd8:	d7 ce       	rjmp	.-594    	; 0xb88 <_ZL8nextNotev+0x74>
		goto parse_character;
     dda:	a0 92 41 01 	sts	0x0141, r10
     dde:	b0 92 40 01 	sts	0x0140, r11
     de2:	10 93 33 01 	sts	0x0133, r17
     de6:	00 93 32 01 	sts	0x0132, r16
     dea:	f0 92 2f 01 	sts	0x012F, r15
     dee:	e0 92 2e 01 	sts	0x012E, r14
     df2:	d0 93 31 01 	sts	0x0131, r29
     df6:	c0 93 30 01 	sts	0x0130, r28
     dfa:	90 92 2d 01 	sts	0x012D, r9
     dfe:	d0 92 35 01 	sts	0x0135, r13
     e02:	c0 92 34 01 	sts	0x0134, r12
		// reset temp variables that depend on the defaults
		tmp_octave = octave;
		tmp_duration = duration;
		goto parse_character;
	default:
		buzzerSequence = 0;
     e06:	10 92 5f 01 	sts	0x015F, r1
     e0a:	10 92 5e 01 	sts	0x015E, r1
     e0e:	78 c0       	rjmp	.+240    	; 0xf00 <_ZL8nextNotev+0x3ec>
		return;
     e10:	a0 92 41 01 	sts	0x0141, r10
     e14:	b0 92 40 01 	sts	0x0140, r11
     e18:	10 93 33 01 	sts	0x0133, r17
     e1c:	00 93 32 01 	sts	0x0132, r16
     e20:	f0 92 2f 01 	sts	0x012F, r15
     e24:	e0 92 2e 01 	sts	0x012E, r14
     e28:	d0 93 31 01 	sts	0x0131, r29
     e2c:	c0 93 30 01 	sts	0x0130, r28
     e30:	90 92 2d 01 	sts	0x012D, r9
     e34:	d0 92 35 01 	sts	0x0135, r13
     e38:	c0 92 34 01 	sts	0x0134, r12
     e3c:	29 e0       	ldi	r18, 0x09	; 9
     e3e:	ff 24       	eor	r15, r15
	}

	note += tmp_octave*12;
     e40:	8c e0       	ldi	r24, 0x0C	; 12
     e42:	88 9e       	mul	r8, r24
     e44:	c0 01       	movw	r24, r0
     e46:	11 24       	eor	r1, r1
     e48:	e2 2e       	mov	r14, r18
     e4a:	e8 0e       	add	r14, r24
     e4c:	0a c0       	rjmp	.+20     	; 0xe62 <_ZL8nextNotev+0x34e>

	// handle sharps and flats
	c = currentCharacter();
	while(c == '+' || c == '#')
	{
		buzzerSequence ++;
     e4e:	80 91 5e 01 	lds	r24, 0x015E
     e52:	90 91 5f 01 	lds	r25, 0x015F
     e56:	01 96       	adiw	r24, 0x01	; 1
     e58:	90 93 5f 01 	sts	0x015F, r25
     e5c:	80 93 5e 01 	sts	0x015E, r24
		note ++;
     e60:	e3 94       	inc	r14
		c = currentCharacter();
     e62:	0e 94 3e 05 	call	0xa7c	; 0xa7c <_ZL16currentCharacterv>

	note += tmp_octave*12;

	// handle sharps and flats
	c = currentCharacter();
	while(c == '+' || c == '#')
     e66:	8b 32       	cpi	r24, 0x2B	; 43
     e68:	91 f3       	breq	.-28     	; 0xe4e <_ZL8nextNotev+0x33a>
     e6a:	83 32       	cpi	r24, 0x23	; 35
     e6c:	81 f3       	breq	.-32     	; 0xe4e <_ZL8nextNotev+0x33a>
     e6e:	0c c0       	rjmp	.+24     	; 0xe88 <_ZL8nextNotev+0x374>
		note ++;
		c = currentCharacter();
	}
	while(c == '-')
	{
		buzzerSequence ++;
     e70:	80 91 5e 01 	lds	r24, 0x015E
     e74:	90 91 5f 01 	lds	r25, 0x015F
     e78:	01 96       	adiw	r24, 0x01	; 1
     e7a:	90 93 5f 01 	sts	0x015F, r25
     e7e:	80 93 5e 01 	sts	0x015E, r24
		note --;
     e82:	ea 94       	dec	r14
		c = currentCharacter();
     e84:	0e 94 3e 05 	call	0xa7c	; 0xa7c <_ZL16currentCharacterv>
	{
		buzzerSequence ++;
		note ++;
		c = currentCharacter();
	}
	while(c == '-')
     e88:	8d 32       	cpi	r24, 0x2D	; 45
     e8a:	91 f3       	breq	.-28     	; 0xe70 <_ZL8nextNotev+0x35c>
		note --;
		c = currentCharacter();
	}

	// set the duration of just this note
	tmp_duration = duration;
     e8c:	c0 91 32 01 	lds	r28, 0x0132
     e90:	d0 91 33 01 	lds	r29, 0x0133

	// If the input is 'c16', make it a 16th note, etc.
	if(c > '0' && c < '9')
     e94:	81 53       	subi	r24, 0x31	; 49
     e96:	88 30       	cpi	r24, 0x08	; 8
     e98:	58 f4       	brcc	.+22     	; 0xeb0 <_ZL8nextNotev+0x39c>
		tmp_duration = whole_note_duration/getNumber();
     e9a:	00 91 30 01 	lds	r16, 0x0130
     e9e:	10 91 31 01 	lds	r17, 0x0131
     ea2:	0e 94 5d 05 	call	0xaba	; 0xaba <_ZL9getNumberv>
     ea6:	bc 01       	movw	r22, r24
     ea8:	c8 01       	movw	r24, r16
     eaa:	0e 94 4c 10 	call	0x2098	; 0x2098 <__udivmodhi4>
     eae:	eb 01       	movw	r28, r22

	// Handle dotted notes - the first dot adds 50%, and each
	// additional dot adds 50% of the previous dot.
	dot_add = tmp_duration/2;
     eb0:	8e 01       	movw	r16, r28
     eb2:	0b c0       	rjmp	.+22     	; 0xeca <_ZL8nextNotev+0x3b6>
	while(currentCharacter() == '.')
	{
		buzzerSequence ++;
     eb4:	80 91 5e 01 	lds	r24, 0x015E
     eb8:	90 91 5f 01 	lds	r25, 0x015F
     ebc:	01 96       	adiw	r24, 0x01	; 1
     ebe:	90 93 5f 01 	sts	0x015F, r25
     ec2:	80 93 5e 01 	sts	0x015E, r24
		tmp_duration += dot_add;
     ec6:	c0 0f       	add	r28, r16
     ec8:	d1 1f       	adc	r29, r17
		dot_add /= 2;
     eca:	16 95       	lsr	r17
     ecc:	07 95       	ror	r16
		tmp_duration = whole_note_duration/getNumber();

	// Handle dotted notes - the first dot adds 50%, and each
	// additional dot adds 50% of the previous dot.
	dot_add = tmp_duration/2;
	while(currentCharacter() == '.')
     ece:	0e 94 3e 05 	call	0xa7c	; 0xa7c <_ZL16currentCharacterv>
     ed2:	8e 32       	cpi	r24, 0x2E	; 46
     ed4:	79 f3       	breq	.-34     	; 0xeb4 <_ZL8nextNotev+0x3a0>
		buzzerSequence ++;
		tmp_duration += dot_add;
		dot_add /= 2;
	}

	if(staccato)
     ed6:	80 91 40 01 	lds	r24, 0x0140
     eda:	88 23       	and	r24, r24
     edc:	39 f0       	breq	.+14     	; 0xeec <_ZL8nextNotev+0x3d8>
	{
		staccato_rest_duration = tmp_duration / 2;
     ede:	ce 01       	movw	r24, r28
     ee0:	96 95       	lsr	r25
     ee2:	87 95       	ror	r24
     ee4:	80 93 41 01 	sts	0x0141, r24
		tmp_duration -= staccato_rest_duration;
     ee8:	c8 1b       	sub	r28, r24
     eea:	d1 09       	sbc	r29, r1
	}
	
	// this will re-enable the timer1 overflow interrupt
	OrangutanBuzzer::playNote(rest ? SILENT_NOTE : note, tmp_duration, volume);
     eec:	ff 20       	and	r15, r15
     eee:	11 f0       	breq	.+4      	; 0xef4 <_ZL8nextNotev+0x3e0>
     ef0:	ee 24       	eor	r14, r14
     ef2:	ea 94       	dec	r14
     ef4:	8e 2d       	mov	r24, r14
     ef6:	be 01       	movw	r22, r28
     ef8:	40 91 34 01 	lds	r20, 0x0134
     efc:	0e 94 98 04 	call	0x930	; 0x930 <_ZN15OrangutanBuzzer8playNoteEhjh>
}
     f00:	cd b7       	in	r28, 0x3d	; 61
     f02:	de b7       	in	r29, 0x3e	; 62
     f04:	ec e0       	ldi	r30, 0x0C	; 12
     f06:	0c 94 d2 10 	jmp	0x21a4	; 0x21a4 <__epilogue_restores__+0xc>

00000f0a <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>:
	nextNote();					// this re-enables the timer1 interrupt
}

void OrangutanBuzzer::playFromProgramSpace(const char *notes_p)
{
	DISABLE_TIMER1_INTERRUPT();	// prevent this from being interrupted
     f0a:	10 92 6f 00 	sts	0x006F, r1
	buzzerSequence = notes_p;
     f0e:	90 93 5f 01 	sts	0x015F, r25
     f12:	80 93 5e 01 	sts	0x015E, r24
	use_program_space = 1;
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	80 93 42 01 	sts	0x0142, r24
	staccato_rest_duration = 0;
     f1c:	10 92 41 01 	sts	0x0141, r1
	nextNote();					// this re-enables the timer1 interrupt
     f20:	0e 94 8a 05 	call	0xb14	; 0xb14 <_ZL8nextNotev>
}
     f24:	08 95       	ret

00000f26 <play_from_program_space>:
	OrangutanBuzzer::play(sequence);
}

extern "C" void play_from_program_space(char *sequence_p)
{
	OrangutanBuzzer::playFromProgramSpace(sequence_p);
     f26:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>
}
     f2a:	08 95       	ret

00000f2c <_ZN15OrangutanBuzzer4playEPKc>:
//
// Here is an example from Bach:
//   play("T240 L8 a gafaeada c+adaeafa <aa<bac#ada c#adaeaf4");
void OrangutanBuzzer::play(const char *notes)
{
	DISABLE_TIMER1_INTERRUPT();	// prevent this from being interrupted
     f2c:	10 92 6f 00 	sts	0x006F, r1
	buzzerSequence = notes;
     f30:	90 93 5f 01 	sts	0x015F, r25
     f34:	80 93 5e 01 	sts	0x015E, r24
	use_program_space = 0;
     f38:	10 92 42 01 	sts	0x0142, r1
	staccato_rest_duration = 0;
     f3c:	10 92 41 01 	sts	0x0141, r1
	nextNote();					// this re-enables the timer1 interrupt
     f40:	0e 94 8a 05 	call	0xb14	; 0xb14 <_ZL8nextNotev>
}
     f44:	08 95       	ret

00000f46 <play>:
	OrangutanBuzzer::playNote(note, dur, volume);
}

extern "C" void play(const char *sequence)
{
	OrangutanBuzzer::play(sequence);
     f46:	0e 94 96 07 	call	0xf2c	; 0xf2c <_ZN15OrangutanBuzzer4playEPKc>
}
     f4a:	08 95       	ret

00000f4c <__vector_13>:
												//  to play a note

static void nextNote();

// Timer1 overflow interrupt
ISR (TIMER1_OVF_vect)
     f4c:	1f 92       	push	r1
     f4e:	0f 92       	push	r0
     f50:	0f b6       	in	r0, 0x3f	; 63
     f52:	0f 92       	push	r0
     f54:	11 24       	eor	r1, r1
     f56:	2f 93       	push	r18
     f58:	3f 93       	push	r19
     f5a:	4f 93       	push	r20
     f5c:	5f 93       	push	r21
     f5e:	6f 93       	push	r22
     f60:	7f 93       	push	r23
     f62:	8f 93       	push	r24
     f64:	9f 93       	push	r25
     f66:	af 93       	push	r26
     f68:	bf 93       	push	r27
     f6a:	ef 93       	push	r30
     f6c:	ff 93       	push	r31
{
	if (buzzerTimeout-- == 0)
     f6e:	80 91 44 01 	lds	r24, 0x0144
     f72:	90 91 45 01 	lds	r25, 0x0145
     f76:	01 97       	sbiw	r24, 0x01	; 1
     f78:	90 93 45 01 	sts	0x0145, r25
     f7c:	80 93 44 01 	sts	0x0144, r24
     f80:	01 96       	adiw	r24, 0x01	; 1
     f82:	11 f5       	brne	.+68     	; 0xfc8 <__vector_13+0x7c>
	{
		DISABLE_TIMER1_INTERRUPT();
     f84:	10 92 6f 00 	sts	0x006F, r1
		sei();		// re-enable global interrupts (nextNote() is very slow)
     f88:	78 94       	sei
		TCCR1B = (TCCR1B & 0xF8) | TIMER1_CLK_1;	// select IO clock
     f8a:	80 91 81 00 	lds	r24, 0x0081
     f8e:	88 7f       	andi	r24, 0xF8	; 248
     f90:	81 60       	ori	r24, 0x01	; 1
     f92:	80 93 81 00 	sts	0x0081, r24
		OCR1A = (F_CPU/2) / 1000;			// set TOP for freq = 1 kHz
     f96:	80 e1       	ldi	r24, 0x10	; 16
     f98:	97 e2       	ldi	r25, 0x27	; 39
     f9a:	90 93 89 00 	sts	0x0089, r25
     f9e:	80 93 88 00 	sts	0x0088, r24
		OCR1B = 0;						// 0% duty cycle
     fa2:	10 92 8b 00 	sts	0x008B, r1
     fa6:	10 92 8a 00 	sts	0x008A, r1
		buzzerFinished = 1;
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	80 93 38 01 	sts	0x0138, r24
		if (buzzerSequence && (play_mode_setting == PLAY_AUTOMATIC))
     fb0:	80 91 5e 01 	lds	r24, 0x015E
     fb4:	90 91 5f 01 	lds	r25, 0x015F
     fb8:	89 2b       	or	r24, r25
     fba:	31 f0       	breq	.+12     	; 0xfc8 <__vector_13+0x7c>
     fbc:	80 91 43 01 	lds	r24, 0x0143
     fc0:	88 23       	and	r24, r24
     fc2:	11 f4       	brne	.+4      	; 0xfc8 <__vector_13+0x7c>
			nextNote();
     fc4:	0e 94 8a 05 	call	0xb14	; 0xb14 <_ZL8nextNotev>
	}
}
     fc8:	ff 91       	pop	r31
     fca:	ef 91       	pop	r30
     fcc:	bf 91       	pop	r27
     fce:	af 91       	pop	r26
     fd0:	9f 91       	pop	r25
     fd2:	8f 91       	pop	r24
     fd4:	7f 91       	pop	r23
     fd6:	6f 91       	pop	r22
     fd8:	5f 91       	pop	r21
     fda:	4f 91       	pop	r20
     fdc:	3f 91       	pop	r19
     fde:	2f 91       	pop	r18
     fe0:	0f 90       	pop	r0
     fe2:	0f be       	out	0x3f, r0	; 63
     fe4:	0f 90       	pop	r0
     fe6:	1f 90       	pop	r1
     fe8:	18 95       	reti

00000fea <_ZN15OrangutanBuzzer9playCheckEv>:
// in your main loop to avoid delays between notes in the sequence.
//
// Returns true if it is still playing.
unsigned char OrangutanBuzzer::playCheck()
{
	DISABLE_TIMER1_INTERRUPT();
     fea:	10 92 6f 00 	sts	0x006F, r1
	if(buzzerFinished && buzzerSequence != 0)
     fee:	80 91 38 01 	lds	r24, 0x0138
     ff2:	88 23       	and	r24, r24
     ff4:	41 f0       	breq	.+16     	; 0x1006 <_ZN15OrangutanBuzzer9playCheckEv+0x1c>
     ff6:	80 91 5e 01 	lds	r24, 0x015E
     ffa:	90 91 5f 01 	lds	r25, 0x015F
     ffe:	89 2b       	or	r24, r25
    1000:	11 f0       	breq	.+4      	; 0x1006 <_ZN15OrangutanBuzzer9playCheckEv+0x1c>
		nextNote();
    1002:	0e 94 8a 05 	call	0xb14	; 0xb14 <_ZL8nextNotev>
	ENABLE_TIMER1_INTERRUPT();
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	80 93 6f 00 	sts	0x006F, r24
    100c:	20 e0       	ldi	r18, 0x00	; 0
    100e:	80 91 5e 01 	lds	r24, 0x015E
    1012:	90 91 5f 01 	lds	r25, 0x015F
    1016:	89 2b       	or	r24, r25
    1018:	09 f0       	breq	.+2      	; 0x101c <_ZN15OrangutanBuzzer9playCheckEv+0x32>
    101a:	21 e0       	ldi	r18, 0x01	; 1
	return buzzerSequence != 0;
}
    101c:	82 2f       	mov	r24, r18
    101e:	08 95       	ret

00001020 <_ZN15OrangutanBuzzer8playModeEh>:
// Usage: playMode(PLAY_AUTOMATIC) makes it automatic (the
// default), playMode(PLAY_CHECK) sets it to a mode where you have
// to call playCheck().
void OrangutanBuzzer::playMode(unsigned char mode)
{
	play_mode_setting = mode;
    1020:	80 93 43 01 	sts	0x0143, r24

	// We want to check to make sure that we didn't miss a note if we
	// are going out of play-check mode.
	if(mode == PLAY_AUTOMATIC)
    1024:	88 23       	and	r24, r24
    1026:	11 f4       	brne	.+4      	; 0x102c <_ZN15OrangutanBuzzer8playModeEh+0xc>
		playCheck();
    1028:	0e 94 f5 07 	call	0xfea	; 0xfea <_ZN15OrangutanBuzzer9playCheckEv>
    102c:	08 95       	ret

0000102e <play_mode>:
	OrangutanBuzzer::stopPlaying();
}

extern "C" void play_mode(unsigned char mode)
{
	OrangutanBuzzer::playMode(mode);
    102e:	0e 94 10 08 	call	0x1020	; 0x1020 <_ZN15OrangutanBuzzer8playModeEh>
}
    1032:	08 95       	ret

00001034 <play_check>:

extern "C" unsigned char play_check()
{
	return OrangutanBuzzer::playCheck();
    1034:	0e 94 f5 07 	call	0xfea	; 0xfea <_ZN15OrangutanBuzzer9playCheckEv>
}
    1038:	08 95       	ret

0000103a <_ZN12OrangutanLCDC2Ev>:

// constructor (doesn't do anything)

OrangutanLCD::OrangutanLCD()
{
}
    103a:	08 95       	ret

0000103c <_ZN12OrangutanLCDC1Ev>:
    103c:	08 95       	ret

0000103e <void_getchar>:
	return c;
}

extern "C" int void_getchar(FILE *f) {
	return 0;
}
    103e:	80 e0       	ldi	r24, 0x00	; 0
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	08 95       	ret

00001044 <_ZN12OrangutanLCD8busyWaitEv>:

// Wait for the busy flag to clear.  The 4-bit interface is 
// more complicated than the 8-bit interface because E must
// be strobed twice to get the full eight bits back from
// the LCD, even though we're only interested in one of them.
void OrangutanLCD::busyWait()
    1044:	ef 92       	push	r14
    1046:	ff 92       	push	r15
    1048:	0f 93       	push	r16
    104a:	1f 93       	push	r17
{
	uint8_t temp_ddr, data;

	// Save our DDR information
	temp_ddr = LCD_BF_DDR;
    104c:	6a b1       	in	r22, 0x0a	; 10

	// Set up the data DDR for input
	LCD_BF_DDR &= ~LCD_BF_MASK;
    104e:	57 98       	cbi	0x0a, 7	; 10

	// Set up RS and RW to read the state of the LCD's busy flag
	LCD_RS_PORT &= ~(1 << LCD_RS);
    1050:	5a 98       	cbi	0x0b, 2	; 11
	LCD_RW_PORT |= 1 << LCD_RW;
    1052:	28 9a       	sbi	0x05, 0	; 5
	
	unsigned int usCounter = 0;

	do
    1054:	e0 90 4a 01 	lds	r14, 0x014A
    1058:	f0 90 4b 01 	lds	r15, 0x014B
    105c:	00 91 4c 01 	lds	r16, 0x014C
    1060:	10 91 4d 01 	lds	r17, 0x014D
    1064:	20 e0       	ldi	r18, 0x00	; 0
    1066:	30 e0       	ldi	r19, 0x00	; 0
						  "   pop  r22"     "\n\t"   
						  "   sbiw %0, 1"   "\n\t"
						  "   brne 1b"
						  : "=w" ( microseconds )  
						  : "0" ( microseconds )
						  );  
    1068:	41 e0       	ldi	r20, 0x01	; 1
    106a:	50 e0       	ldi	r21, 0x00	; 0
    106c:	ca 01       	movw	r24, r20
    106e:	6f 93       	push	r22
    1070:	64 e0       	ldi	r22, 0x04	; 4
    1072:	6a 95       	dec	r22
    1074:	f1 f7       	brne	.-4      	; 0x1072 <_ZN12OrangutanLCD8busyWaitEv+0x2e>
    1076:	6f 91       	pop	r22
    1078:	01 97       	sbiw	r24, 0x01	; 1
    107a:	c9 f7       	brne	.-14     	; 0x106e <_ZN12OrangutanLCD8busyWaitEv+0x2a>
	{
		delayMicroseconds(1);
		
		// Bring E high
		LCD_E_PORT |= 1 << LCD_E;
    107c:	5c 9a       	sbi	0x0b, 4	; 11
    107e:	ca 01       	movw	r24, r20
    1080:	6f 93       	push	r22
    1082:	64 e0       	ldi	r22, 0x04	; 4
    1084:	6a 95       	dec	r22
    1086:	f1 f7       	brne	.-4      	; 0x1084 <_ZN12OrangutanLCD8busyWaitEv+0x40>
    1088:	6f 91       	pop	r22
    108a:	01 97       	sbiw	r24, 0x01	; 1
    108c:	c9 f7       	brne	.-14     	; 0x1080 <_ZN12OrangutanLCD8busyWaitEv+0x3c>

		// Wait at least 120ns (1us is excessive)
		delayMicroseconds(1);

		// Get the data back from the LCD
		data = LCD_BF_PIN;
    108e:	89 b1       	in	r24, 0x09	; 9
		// That excessive delay means our cycle time on E cannot be
		// shorter than 1000ns (500ns being the spec), so no further
		// delays are required

		// Bring E low
		LCD_E_PORT &= ~(1 << LCD_E);
    1090:	5c 98       	cbi	0x0b, 4	; 11
    1092:	fa 01       	movw	r30, r20
    1094:	6f 93       	push	r22
    1096:	64 e0       	ldi	r22, 0x04	; 4
    1098:	6a 95       	dec	r22
    109a:	f1 f7       	brne	.-4      	; 0x1098 <_ZN12OrangutanLCD8busyWaitEv+0x54>
    109c:	6f 91       	pop	r22
    109e:	31 97       	sbiw	r30, 0x01	; 1
    10a0:	c9 f7       	brne	.-14     	; 0x1094 <_ZN12OrangutanLCD8busyWaitEv+0x50>

		// When using the 4-bit interface, we still need to
		// strobe out the 4 bits we don't care about:

		// Bring E high
		LCD_E_PORT |= 1 << LCD_E;
    10a2:	5c 9a       	sbi	0x0b, 4	; 11
    10a4:	fa 01       	movw	r30, r20
    10a6:	6f 93       	push	r22
    10a8:	64 e0       	ldi	r22, 0x04	; 4
    10aa:	6a 95       	dec	r22
    10ac:	f1 f7       	brne	.-4      	; 0x10aa <_ZN12OrangutanLCD8busyWaitEv+0x66>
    10ae:	6f 91       	pop	r22
    10b0:	31 97       	sbiw	r30, 0x01	; 1
    10b2:	c9 f7       	brne	.-14     	; 0x10a6 <_ZN12OrangutanLCD8busyWaitEv+0x62>

		// Wait at least 120ns (1us is excessive)
		delayMicroseconds(1);

		// Bring E low
		LCD_E_PORT &= ~(1 << LCD_E);
    10b4:	5c 98       	cbi	0x0b, 4	; 11
	LCD_RS_PORT &= ~(1 << LCD_RS);
	LCD_RW_PORT |= 1 << LCD_RW;
	
	unsigned int usCounter = 0;

	do
    10b6:	87 ff       	sbrs	r24, 7
    10b8:	0b c0       	rjmp	.+22     	; 0x10d0 <_ZN12OrangutanLCD8busyWaitEv+0x8c>
		delayMicroseconds(1);

		// Bring E low
		LCD_E_PORT &= ~(1 << LCD_E);
		
		usCounter += 2;
    10ba:	2c 5f       	subi	r18, 0xFC	; 252
    10bc:	3f 4f       	sbci	r19, 0xFF	; 255
	LCD_RS_PORT &= ~(1 << LCD_RS);
	LCD_RW_PORT |= 1 << LCD_RW;
	
	unsigned int usCounter = 0;

	do
    10be:	c9 01       	movw	r24, r18
    10c0:	a0 e0       	ldi	r26, 0x00	; 0
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	8e 15       	cp	r24, r14
    10c6:	9f 05       	cpc	r25, r15
    10c8:	a0 07       	cpc	r26, r16
    10ca:	b1 07       	cpc	r27, r17
    10cc:	08 f4       	brcc	.+2      	; 0x10d0 <_ZN12OrangutanLCD8busyWaitEv+0x8c>
    10ce:	ce cf       	rjmp	.-100    	; 0x106c <_ZN12OrangutanLCD8busyWaitEv+0x28>
	}
	
#endif

	// Restore our DDR information
	LCD_BF_DDR = temp_ddr;
    10d0:	6a b9       	out	0x0a, r22	; 10
}
    10d2:	1f 91       	pop	r17
    10d4:	0f 91       	pop	r16
    10d6:	ff 90       	pop	r15
    10d8:	ef 90       	pop	r14
    10da:	08 95       	ret

000010dc <_ZN12OrangutanLCD8sendDataEh>:
#ifdef _ORANGUTAN_SVP
	PORTC = (PORTC & ~LCD_PORTC_MASK) | LCD_PORTC_DATA(data);
#elif defined(_ORANGUTAN_X2)
	PORTC = data;
#else
	PORTB = (PORTB & ~LCD_PORTB_MASK) | LCD_PORTB_DATA(data);
    10dc:	65 b1       	in	r22, 0x05	; 5
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	ac 01       	movw	r20, r24
    10e2:	41 70       	andi	r20, 0x01	; 1
    10e4:	50 70       	andi	r21, 0x00	; 0
    10e6:	44 0f       	add	r20, r20
    10e8:	55 1f       	adc	r21, r21
    10ea:	9c 01       	movw	r18, r24
    10ec:	26 70       	andi	r18, 0x06	; 6
    10ee:	30 70       	andi	r19, 0x00	; 0
    10f0:	53 e0       	ldi	r21, 0x03	; 3
    10f2:	22 0f       	add	r18, r18
    10f4:	33 1f       	adc	r19, r19
    10f6:	5a 95       	dec	r21
    10f8:	e1 f7       	brne	.-8      	; 0x10f2 <_ZN12OrangutanLCD8sendDataEh+0x16>
    10fa:	42 2b       	or	r20, r18
    10fc:	6d 7c       	andi	r22, 0xCD	; 205
    10fe:	46 2b       	or	r20, r22
    1100:	45 b9       	out	0x05, r20	; 5
	PORTD = (PORTD & ~LCD_PORTD_MASK) | LCD_PORTD_DATA(data);
    1102:	2b b1       	in	r18, 0x0b	; 11
    1104:	88 70       	andi	r24, 0x08	; 8
    1106:	90 70       	andi	r25, 0x00	; 0
    1108:	34 e0       	ldi	r19, 0x04	; 4
    110a:	88 0f       	add	r24, r24
    110c:	99 1f       	adc	r25, r25
    110e:	3a 95       	dec	r19
    1110:	e1 f7       	brne	.-8      	; 0x110a <__stack+0xb>
    1112:	2f 77       	andi	r18, 0x7F	; 127
    1114:	28 2b       	or	r18, r24
    1116:	2b b9       	out	0x0b, r18	; 11

	// At this point the four data lines are set, so the Enable pin 
	// is strobed to let the LCD latch them.

	// Bring E high
	LCD_E_PORT |= 1 << LCD_E;
    1118:	5c 9a       	sbi	0x0b, 4	; 11
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	fc 01       	movw	r30, r24
    1120:	6f 93       	push	r22
    1122:	64 e0       	ldi	r22, 0x04	; 4
    1124:	6a 95       	dec	r22
    1126:	f1 f7       	brne	.-4      	; 0x1124 <__stack+0x25>
    1128:	6f 91       	pop	r22
    112a:	31 97       	sbiw	r30, 0x01	; 1
    112c:	c9 f7       	brne	.-14     	; 0x1120 <__stack+0x21>
	
	// Wait => 450ns (1us is excessive)
	delayMicroseconds(1);

	// Bring E low
	LCD_E_PORT &= ~(1 << LCD_E);
    112e:	5c 98       	cbi	0x0b, 4	; 11
    1130:	6f 93       	push	r22
    1132:	64 e0       	ldi	r22, 0x04	; 4
    1134:	6a 95       	dec	r22
    1136:	f1 f7       	brne	.-4      	; 0x1134 <__stack+0x35>
    1138:	6f 91       	pop	r22
    113a:	01 97       	sbiw	r24, 0x01	; 1
    113c:	c9 f7       	brne	.-14     	; 0x1130 <__stack+0x31>
	// Dropping out of the routine will take at least 10ns, the time
	// given by the datasheet for the LCD controller to read the
	// nibble on the falling edge of E

	// Our nibble has now been sent to the LCD.
}
    113e:	08 95       	ret

00001140 <_ZN12OrangutanLCD10initPrintfEv>:
#ifdef LIB_POLOLU
// Initializes the LCD library for printf support.  After this,
// printf will start sending characters to the LCD.
void OrangutanLCD::initPrintf()
{
	if (printf_chars != 0)
    1140:	80 91 46 01 	lds	r24, 0x0146
    1144:	90 91 47 01 	lds	r25, 0x0147
    1148:	00 97       	sbiw	r24, 0x00	; 0
    114a:	11 f0       	breq	.+4      	; 0x1150 <_ZN12OrangutanLCD10initPrintfEv+0x10>
		free(printf_chars);
    114c:	0e 94 9a 11 	call	0x2334	; 0x2334 <free>
		
	printf_chars = (char*)malloc(sizeof(char)*SAVED_CHARS);
    1150:	80 91 36 01 	lds	r24, 0x0136
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	01 97       	sbiw	r24, 0x01	; 1
    1158:	20 91 37 01 	lds	r18, 0x0137
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	ac 01       	movw	r20, r24
    1160:	42 9f       	mul	r20, r18
    1162:	c0 01       	movw	r24, r0
    1164:	43 9f       	mul	r20, r19
    1166:	90 0d       	add	r25, r0
    1168:	52 9f       	mul	r21, r18
    116a:	90 0d       	add	r25, r0
    116c:	11 24       	eor	r1, r1
    116e:	0e 94 ed 10 	call	0x21da	; 0x21da <malloc>
    1172:	90 93 47 01 	sts	0x0147, r25
    1176:	80 93 46 01 	sts	0x0146, r24
	if (printf_chars == 0)
    117a:	00 97       	sbiw	r24, 0x00	; 0
    117c:	29 f1       	breq	.+74     	; 0x11c8 <_ZN12OrangutanLCD10initPrintfEv+0x88>
		return;
    117e:	60 e0       	ldi	r22, 0x00	; 0
	unsigned char i;
	for (i = 0; i < SAVED_CHARS; i++)
		printf_chars[i] = ' ';
    1180:	70 e2       	ldi	r23, 0x20	; 32
    1182:	08 c0       	rjmp	.+16     	; 0x1194 <_ZN12OrangutanLCD10initPrintfEv+0x54>
    1184:	e0 91 46 01 	lds	r30, 0x0146
    1188:	f0 91 47 01 	lds	r31, 0x0147
    118c:	e4 0f       	add	r30, r20
    118e:	f5 1f       	adc	r31, r21
    1190:	70 83       	st	Z, r23
		
	printf_chars = (char*)malloc(sizeof(char)*SAVED_CHARS);
	if (printf_chars == 0)
		return;
	unsigned char i;
	for (i = 0; i < SAVED_CHARS; i++)
    1192:	6f 5f       	subi	r22, 0xFF	; 255
    1194:	46 2f       	mov	r20, r22
    1196:	50 e0       	ldi	r21, 0x00	; 0
    1198:	80 91 36 01 	lds	r24, 0x0136
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	01 97       	sbiw	r24, 0x01	; 1
    11a0:	20 91 37 01 	lds	r18, 0x0137
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	fc 01       	movw	r30, r24
    11a8:	e2 9f       	mul	r30, r18
    11aa:	c0 01       	movw	r24, r0
    11ac:	e3 9f       	mul	r30, r19
    11ae:	90 0d       	add	r25, r0
    11b0:	f2 9f       	mul	r31, r18
    11b2:	90 0d       	add	r25, r0
    11b4:	11 24       	eor	r1, r1
    11b6:	48 17       	cp	r20, r24
    11b8:	59 07       	cpc	r21, r25
    11ba:	24 f3       	brlt	.-56     	; 0x1184 <_ZN12OrangutanLCD10initPrintfEv+0x44>
		printf_chars[i] = ' ';
	fdevopen(lcd_putchar, void_getchar);
    11bc:	83 ee       	ldi	r24, 0xE3	; 227
    11be:	9a e0       	ldi	r25, 0x0A	; 10
    11c0:	6f e1       	ldi	r22, 0x1F	; 31
    11c2:	78 e0       	ldi	r23, 0x08	; 8
    11c4:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <fdevopen>
    11c8:	08 95       	ret

000011ca <_ZN12OrangutanLCD10initPrintfEhh>:
}

void OrangutanLCD::initPrintf(unsigned char lcdWidth, unsigned char lcdHeight)
{
	numLCDCols = lcdWidth;
    11ca:	80 93 37 01 	sts	0x0137, r24
	numLCDRows = lcdHeight;
    11ce:	60 93 36 01 	sts	0x0136, r22
	initPrintf();
    11d2:	0e 94 a0 08 	call	0x1140	; 0x1140 <_ZN12OrangutanLCD10initPrintfEv>
}
    11d6:	08 95       	ret

000011d8 <lcd_init_printf_with_dimensions>:
	fdevopen(lcd_putchar, void_getchar);
}

void OrangutanLCD::initPrintf(unsigned char lcdWidth, unsigned char lcdHeight)
{
	numLCDCols = lcdWidth;
    11d8:	80 93 37 01 	sts	0x0137, r24
	numLCDRows = lcdHeight;
    11dc:	60 93 36 01 	sts	0x0136, r22
	initPrintf();
    11e0:	0e 94 a0 08 	call	0x1140	; 0x1140 <_ZN12OrangutanLCD10initPrintfEv>
}

extern "C" void lcd_init_printf_with_dimensions(unsigned char width, unsigned char height)
{
	OrangutanLCD::initPrintf(width, height);
}
    11e4:	08 95       	ret

000011e6 <lcd_init_printf>:
	OrangutanLCD::gotoXY(col,row);
}

extern "C" void lcd_init_printf()
{
	OrangutanLCD::initPrintf();
    11e6:	0e 94 a0 08 	call	0x1140	; 0x1140 <_ZN12OrangutanLCD10initPrintfEv>
}
    11ea:	08 95       	ret

000011ec <_ZN12OrangutanLCD5init2Ev>:
	LCD_BF_DDR &= ~LCD_BF_MASK;		// make pull-up pin an input
	LCD_BF_PORT |= LCD_BF_MASK;		// enable pull-up on BF pin
	lcdTimeout = 30000;		// 20ms

#else
	lcdTimeout = 10000;		// 3ms
    11ec:	80 e1       	ldi	r24, 0x10	; 16
    11ee:	97 e2       	ldi	r25, 0x27	; 39
    11f0:	a0 e0       	ldi	r26, 0x00	; 0
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	80 93 4a 01 	sts	0x014A, r24
    11f8:	90 93 4b 01 	sts	0x014B, r25
    11fc:	a0 93 4c 01 	sts	0x014C, r26
    1200:	b0 93 4d 01 	sts	0x014D, r27
#endif
	
	// Set up the DDR for the LCD control lines
	LCD_RS_DDR |= 1 << LCD_RS;
    1204:	52 9a       	sbi	0x0a, 2	; 10
	LCD_RW_DDR |= 1 << LCD_RW;
    1206:	20 9a       	sbi	0x04, 0	; 4
	LCD_E_DDR |= 1 << LCD_E;
    1208:	54 9a       	sbi	0x0a, 4	; 10
// These aliases are only accessible when the file is included from
// another C++ file.
inline unsigned long get_ms() { return OrangutanTime::ms(); }
inline unsigned long millis() { return OrangutanTime::ms(); }

inline void delay(unsigned int milliseconds) { OrangutanTime::delayMilliseconds(milliseconds); }
    120a:	8e e1       	ldi	r24, 0x1E	; 30
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <_ZN13OrangutanTime17delayMillisecondsEj>
	delay(2);	// wait >100us
	send_cmd(0x38);	// 8-bit, 2 line, 5x8 dots char (busy flag is now valid)

#else	// Orangutan SVP, LV, SV, and 3pi robot

	send_4bit_cmd(0x3);	// function set
    1212:	83 e0       	ldi	r24, 0x03	; 3
    1214:	0e 94 29 0c 	call	0x1852	; 0x1852 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1218:	86 e0       	ldi	r24, 0x06	; 6
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <_ZN13OrangutanTime17delayMillisecondsEj>
	delay(6);	// wait >4.1ms
	send_4bit_cmd(0x3);	// function set
    1220:	83 e0       	ldi	r24, 0x03	; 3
    1222:	0e 94 29 0c 	call	0x1852	; 0x1852 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1226:	82 e0       	ldi	r24, 0x02	; 2
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <_ZN13OrangutanTime17delayMillisecondsEj>
	delay(2);	// wait >100us
	send_4bit_cmd(0x3);	// function set
    122e:	83 e0       	ldi	r24, 0x03	; 3
    1230:	0e 94 29 0c 	call	0x1852	; 0x1852 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1234:	82 e0       	ldi	r24, 0x02	; 2
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <_ZN13OrangutanTime17delayMillisecondsEj>
	delay(2);	// wait >100us
	send_4bit_cmd(0x2);	// 4-bit interface
    123c:	82 e0       	ldi	r24, 0x02	; 2
    123e:	0e 94 29 0c 	call	0x1852	; 0x1852 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1242:	82 e0       	ldi	r24, 0x02	; 2
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <_ZN13OrangutanTime17delayMillisecondsEj>
	delay(2);
	send_cmd(0x28);	// 4-bit, 2 line, 5x8 dots char (busy flag is now valid)
    124a:	88 e2       	ldi	r24, 0x28	; 40
    124c:	0e 94 73 09 	call	0x12e6	; 0x12e6 <_ZN12OrangutanLCD8send_cmdEh>

#endif

	send_cmd(0x08);	// display off, cursor off, blinking off
    1250:	88 e0       	ldi	r24, 0x08	; 8
    1252:	0e 94 73 09 	call	0x12e6	; 0x12e6 <_ZN12OrangutanLCD8send_cmdEh>
	send_cmd(0x01);	// clear display
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	0e 94 73 09 	call	0x12e6	; 0x12e6 <_ZN12OrangutanLCD8send_cmdEh>
	send_cmd(0x06);	// set entry mode: cursor shifts right, no scrolling
    125c:	86 e0       	ldi	r24, 0x06	; 6
    125e:	0e 94 73 09 	call	0x12e6	; 0x12e6 <_ZN12OrangutanLCD8send_cmdEh>
	send_cmd(0x0C);	// display on, cursor off, blinking off
    1262:	8c e0       	ldi	r24, 0x0C	; 12
    1264:	0e 94 73 09 	call	0x12e6	; 0x12e6 <_ZN12OrangutanLCD8send_cmdEh>
}
    1268:	08 95       	ret

0000126a <_ZN12OrangutanLCD4initEv>:
  
	static inline void init()
	{
		static unsigned char initialized = 0;

		if (!initialized)
    126a:	80 91 4e 01 	lds	r24, 0x014E
    126e:	88 23       	and	r24, r24
    1270:	29 f4       	brne	.+10     	; 0x127c <_ZN12OrangutanLCD4initEv+0x12>
		{
			initialized = 1;
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	80 93 4e 01 	sts	0x014E, r24
			init2();
    1278:	0e 94 f6 08 	call	0x11ec	; 0x11ec <_ZN12OrangutanLCD5init2Ev>
    127c:	08 95       	ret

0000127e <_ZN12OrangutanLCD4sendEhhh>:
	// Our nibble has now been sent to the LCD.
}


// Send either data or a command
void OrangutanLCD::send(unsigned char data, unsigned char rs, unsigned char numSends)
    127e:	bf 92       	push	r11
    1280:	cf 92       	push	r12
    1282:	df 92       	push	r13
    1284:	ef 92       	push	r14
    1286:	ff 92       	push	r15
    1288:	0f 93       	push	r16
    128a:	1f 93       	push	r17
    128c:	08 2f       	mov	r16, r24
    128e:	16 2f       	mov	r17, r22
    1290:	f4 2e       	mov	r15, r20
{	
	init();  // initialize the LCD if we haven't already
    1292:	0e 94 35 09 	call	0x126a	; 0x126a <_ZN12OrangutanLCD4initEv>

	// Wait until the busy flag clears
	busyWait();
    1296:	0e 94 22 08 	call	0x1044	; 0x1044 <_ZN12OrangutanLCD8busyWaitEv>
	unsigned char temp_ddrc, temp_portc;
	temp_ddrc = DDRC;
	temp_portc = PORTC;
#else
	unsigned char temp_ddrb, temp_portb, temp_ddrd, temp_portd;
	temp_ddrb = DDRB;
    129a:	b4 b0       	in	r11, 0x04	; 4
	temp_portb = PORTB;
    129c:	c5 b0       	in	r12, 0x05	; 5
	temp_ddrd = DDRD;
    129e:	da b0       	in	r13, 0x0a	; 10
	temp_portd = PORTD;
    12a0:	eb b0       	in	r14, 0x0b	; 11
#endif

	// Clear RW and set or clear RS based on the rs argument
	LCD_RW_PORT &= ~(1 << LCD_RW);
    12a2:	28 98       	cbi	0x05, 0	; 5
	if (rs)
    12a4:	11 23       	and	r17, r17
    12a6:	11 f0       	breq	.+4      	; 0x12ac <_ZN12OrangutanLCD4sendEhhh+0x2e>
		LCD_RS_PORT |= 1 << LCD_RS;
    12a8:	5a 9a       	sbi	0x0b, 2	; 11
    12aa:	01 c0       	rjmp	.+2      	; 0x12ae <_ZN12OrangutanLCD4sendEhhh+0x30>
	else
		LCD_RS_PORT &= ~(1 << LCD_RS);
    12ac:	5a 98       	cbi	0x0b, 2	; 11
#else

  #ifdef _ORANGUTAN_SVP
	DDRC |= LCD_PORTC_MASK;
  #else
	DDRB |= LCD_PORTB_MASK;
    12ae:	84 b1       	in	r24, 0x04	; 4
    12b0:	82 63       	ori	r24, 0x32	; 50
    12b2:	84 b9       	out	0x04, r24	; 4
	DDRD |= LCD_PORTD_MASK;
    12b4:	57 9a       	sbi	0x0a, 7	; 10
  #endif  // ifdef _ORANGUTAN_SVP

	if (numSends != 1)
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	f8 16       	cp	r15, r24
    12ba:	29 f0       	breq	.+10     	; 0x12c6 <_ZN12OrangutanLCD4sendEhhh+0x48>
		sendData(data >> 4);	// send high nibble via 4-bit interface
    12bc:	80 2f       	mov	r24, r16
    12be:	82 95       	swap	r24
    12c0:	8f 70       	andi	r24, 0x0F	; 15
    12c2:	0e 94 6e 08 	call	0x10dc	; 0x10dc <_ZN12OrangutanLCD8sendDataEh>
	sendData(data & 0x0F);	// send low nibble via 4-bit interface
    12c6:	80 2f       	mov	r24, r16
    12c8:	8f 70       	andi	r24, 0x0F	; 15
    12ca:	0e 94 6e 08 	call	0x10dc	; 0x10dc <_ZN12OrangutanLCD8sendDataEh>
	// Restore our DDR and port information
#if defined(_ORANGUTAN_SVP) || defined(_ORANGUTAN_X2)
	DDRC = temp_ddrc;
	PORTC = temp_portc;
#else
	DDRD = temp_ddrd;
    12ce:	da b8       	out	0x0a, r13	; 10
	PORTD = temp_portd;
    12d0:	eb b8       	out	0x0b, r14	; 11
	DDRB = temp_ddrb;
    12d2:	b4 b8       	out	0x04, r11	; 4
	PORTB = temp_portb;
    12d4:	c5 b8       	out	0x05, r12	; 5
#endif
}
    12d6:	1f 91       	pop	r17
    12d8:	0f 91       	pop	r16
    12da:	ff 90       	pop	r15
    12dc:	ef 90       	pop	r14
    12de:	df 90       	pop	r13
    12e0:	cf 90       	pop	r12
    12e2:	bf 90       	pop	r11
    12e4:	08 95       	ret

000012e6 <_ZN12OrangutanLCD8send_cmdEh>:
	// sent via a single 8-bit transfer.
	static void send(unsigned char data, unsigned char rs, unsigned char numSends);
	
	static inline void send_cmd(unsigned char cmd)
	{
		send(cmd, 0, 2);
    12e6:	60 e0       	ldi	r22, 0x00	; 0
    12e8:	42 e0       	ldi	r20, 0x02	; 2
    12ea:	0e 94 3f 09 	call	0x127e	; 0x127e <_ZN12OrangutanLCD4sendEhhh>
	}
    12ee:	08 95       	ret

000012f0 <_ZN12OrangutanLCD10moveCursorEhh>:


// shifts the cursor LEFT or RIGHT the given number of positions.
// direction should be either LCD_LEFT or LCD_RIGHT
void OrangutanLCD::moveCursor(unsigned char direction, 
							   unsigned char num)
    12f0:	0f 93       	push	r16
    12f2:	1f 93       	push	r17
    12f4:	08 2f       	mov	r16, r24
    12f6:	16 2f       	mov	r17, r22
    12f8:	08 c0       	rjmp	.+16     	; 0x130a <_ZN12OrangutanLCD10moveCursorEhh+0x1a>
{
	while(num-- > 0)
	{
		if (direction == LCD_LEFT)
    12fa:	00 23       	and	r16, r16
    12fc:	11 f4       	brne	.+4      	; 0x1302 <_ZN12OrangutanLCD10moveCursorEhh+0x12>
			send_cmd(LCD_CURSOR_L);
    12fe:	80 e1       	ldi	r24, 0x10	; 16
    1300:	01 c0       	rjmp	.+2      	; 0x1304 <_ZN12OrangutanLCD10moveCursorEhh+0x14>
		else
			send_cmd(LCD_CURSOR_R);
    1302:	84 e1       	ldi	r24, 0x14	; 20
    1304:	0e 94 73 09 	call	0x12e6	; 0x12e6 <_ZN12OrangutanLCD8send_cmdEh>
    1308:	11 50       	subi	r17, 0x01	; 1
// shifts the cursor LEFT or RIGHT the given number of positions.
// direction should be either LCD_LEFT or LCD_RIGHT
void OrangutanLCD::moveCursor(unsigned char direction, 
							   unsigned char num)
{
	while(num-- > 0)
    130a:	11 23       	and	r17, r17
    130c:	b1 f7       	brne	.-20     	; 0x12fa <_ZN12OrangutanLCD10moveCursorEhh+0xa>
		if (direction == LCD_LEFT)
			send_cmd(LCD_CURSOR_L);
		else
			send_cmd(LCD_CURSOR_R);
	}
}
    130e:	1f 91       	pop	r17
    1310:	0f 91       	pop	r16
    1312:	08 95       	ret

00001314 <lcd_move_cursor>:
	OrangutanLCD::hideCursor();
}

extern "C" void lcd_move_cursor(unsigned char direction, unsigned char num)
{
	OrangutanLCD::moveCursor(direction, num);
    1314:	0e 94 78 09 	call	0x12f0	; 0x12f0 <_ZN12OrangutanLCD10moveCursorEhh>
}
    1318:	08 95       	ret

0000131a <_ZN12OrangutanLCD10hideCursorEv>:


// Hides the cursor
void OrangutanLCD::hideCursor()
{
	send_cmd(LCD_HIDE);
    131a:	8c e0       	ldi	r24, 0x0C	; 12
    131c:	0e 94 73 09 	call	0x12e6	; 0x12e6 <_ZN12OrangutanLCD8send_cmdEh>
}
    1320:	08 95       	ret

00001322 <lcd_hide_cursor>:
	OrangutanLCD::showCursor(cursorType);
}

extern "C" void lcd_hide_cursor()
{
	OrangutanLCD::hideCursor();
    1322:	0e 94 8d 09 	call	0x131a	; 0x131a <_ZN12OrangutanLCD10hideCursorEv>
}
    1326:	08 95       	ret

00001328 <_ZN12OrangutanLCD10showCursorEh>:

// Shows the cursor as either a BLINKING or SOLID block
// cursorType should be either CURSOR_BLINKING or CURSOR_SOLID
void OrangutanLCD::showCursor(unsigned char cursorType)
{
	if (cursorType == CURSOR_BLINKING)
    1328:	81 30       	cpi	r24, 0x01	; 1
    132a:	11 f4       	brne	.+4      	; 0x1330 <_ZN12OrangutanLCD10showCursorEh+0x8>
		send_cmd(LCD_SHOW_BLINK);
    132c:	8f e0       	ldi	r24, 0x0F	; 15
    132e:	01 c0       	rjmp	.+2      	; 0x1332 <_ZN12OrangutanLCD10showCursorEh+0xa>
	else
		send_cmd(LCD_SHOW_SOLID);
    1330:	8e e0       	ldi	r24, 0x0E	; 14
    1332:	0e 94 73 09 	call	0x12e6	; 0x12e6 <_ZN12OrangutanLCD8send_cmdEh>
    1336:	08 95       	ret

00001338 <lcd_show_cursor>:
	OrangutanLCD::printBinary(value);
}

extern "C" void lcd_show_cursor(unsigned char cursorType)
{
	OrangutanLCD::showCursor(cursorType);
    1338:	0e 94 94 09 	call	0x1328	; 0x1328 <_ZN12OrangutanLCD10showCursorEh>
}
    133c:	08 95       	ret

0000133e <_ZN12OrangutanLCD6gotoXYEhh>:


// moves the cursor to the specified (x, y) position
// x is a zero-based column indicator (0 <= x <= 7)
// y is a zero-based row indicator (0 <= y <= LCD rows-1)
void OrangutanLCD::gotoXY(unsigned char x, unsigned char y)
    133e:	a4 e0       	ldi	r26, 0x04	; 4
    1340:	b0 e0       	ldi	r27, 0x00	; 0
    1342:	e5 ea       	ldi	r30, 0xA5	; 165
    1344:	f9 e0       	ldi	r31, 0x09	; 9
    1346:	0c 94 be 10 	jmp	0x217c	; 0x217c <__prologue_saves__+0x1c>
    134a:	18 2f       	mov	r17, r24
    134c:	06 2f       	mov	r16, r22
	// The actual memory locations are 0x00, and 0x40, but since
	// D7 needs to be high in order to set a new memory location, we can go
	// ahead and make the seventh bit of our memory location bytes to 1,
	// which makes the numbers 0x80 and 0xC0:

	unsigned char line_mem[] = {0x80, 0xC0, 0x94, 0xD4};
    134e:	80 e8       	ldi	r24, 0x80	; 128
    1350:	89 83       	std	Y+1, r24	; 0x01
    1352:	80 ec       	ldi	r24, 0xC0	; 192
    1354:	8a 83       	std	Y+2, r24	; 0x02
    1356:	84 e9       	ldi	r24, 0x94	; 148
    1358:	8b 83       	std	Y+3, r24	; 0x03
    135a:	84 ed       	ldi	r24, 0xD4	; 212
    135c:	8c 83       	std	Y+4, r24	; 0x04

	// Grab the location in the LCD's memory of the start of line y,
	// and add X to it to get the right character location.
	send_cmd(line_mem[y] + x);
    135e:	fe 01       	movw	r30, r28
    1360:	e6 0f       	add	r30, r22
    1362:	f1 1d       	adc	r31, r1
    1364:	81 81       	ldd	r24, Z+1	; 0x01
    1366:	81 0f       	add	r24, r17
    1368:	0e 94 73 09 	call	0x12e6	; 0x12e6 <_ZN12OrangutanLCD8send_cmdEh>

#ifdef LIB_POLOLU
	// Save it for use with printf.
	col = x;
    136c:	10 93 49 01 	sts	0x0149, r17
	row = y;
    1370:	00 93 48 01 	sts	0x0148, r16
#endif
}
    1374:	24 96       	adiw	r28, 0x04	; 4
    1376:	e4 e0       	ldi	r30, 0x04	; 4
    1378:	0c 94 da 10 	jmp	0x21b4	; 0x21b4 <__epilogue_restores__+0x1c>

0000137c <lcd_goto_xy>:
	return 0;
}

extern "C" void lcd_goto_xy(unsigned char col, unsigned char row)
{
	OrangutanLCD::gotoXY(col,row);
    137c:	0e 94 9f 09 	call	0x133e	; 0x133e <_ZN12OrangutanLCD6gotoXYEhh>
}
    1380:	08 95       	ret

00001382 <_ZN12OrangutanLCD5clearEv>:


// clears the LCD screen and returns the cursor to position (0, 0)
void OrangutanLCD::clear()
{
	send_cmd(LCD_CLEAR);
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	0e 94 73 09 	call	0x12e6	; 0x12e6 <_ZN12OrangutanLCD8send_cmdEh>

#ifdef LIB_POLOLU
	if (printf_chars == 0)		// if we haven't used printf(), return now
    1388:	80 91 46 01 	lds	r24, 0x0146
    138c:	90 91 47 01 	lds	r25, 0x0147
    1390:	89 2b       	or	r24, r25
    1392:	19 f1       	breq	.+70     	; 0x13da <_ZN12OrangutanLCD5clearEv+0x58>
		return;
    1394:	60 e0       	ldi	r22, 0x00	; 0

	unsigned char i;

	// clear out the LCD
	for(i = 0; i < SAVED_CHARS; i++)
		printf_chars[i] = ' ';
    1396:	70 e2       	ldi	r23, 0x20	; 32
    1398:	08 c0       	rjmp	.+16     	; 0x13aa <_ZN12OrangutanLCD5clearEv+0x28>
    139a:	e0 91 46 01 	lds	r30, 0x0146
    139e:	f0 91 47 01 	lds	r31, 0x0147
    13a2:	e4 0f       	add	r30, r20
    13a4:	f5 1f       	adc	r31, r21
    13a6:	70 83       	st	Z, r23
		return;

	unsigned char i;

	// clear out the LCD
	for(i = 0; i < SAVED_CHARS; i++)
    13a8:	6f 5f       	subi	r22, 0xFF	; 255
    13aa:	46 2f       	mov	r20, r22
    13ac:	50 e0       	ldi	r21, 0x00	; 0
    13ae:	80 91 36 01 	lds	r24, 0x0136
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	01 97       	sbiw	r24, 0x01	; 1
    13b6:	20 91 37 01 	lds	r18, 0x0137
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	fc 01       	movw	r30, r24
    13be:	e2 9f       	mul	r30, r18
    13c0:	c0 01       	movw	r24, r0
    13c2:	e3 9f       	mul	r30, r19
    13c4:	90 0d       	add	r25, r0
    13c6:	f2 9f       	mul	r31, r18
    13c8:	90 0d       	add	r25, r0
    13ca:	11 24       	eor	r1, r1
    13cc:	48 17       	cp	r20, r24
    13ce:	59 07       	cpc	r21, r25
    13d0:	24 f3       	brlt	.-56     	; 0x139a <_ZN12OrangutanLCD5clearEv+0x18>
		printf_chars[i] = ' ';

	col = 0;
    13d2:	10 92 49 01 	sts	0x0149, r1
	row = 0;
    13d6:	10 92 48 01 	sts	0x0148, r1
    13da:	08 95       	ret

000013dc <clear>:
	OrangutanLCD::initPrintf(width, height);
}

extern "C" void clear()
{
	OrangutanLCD::clear();
    13dc:	0e 94 c1 09 	call	0x1382	; 0x1382 <_ZN12OrangutanLCD5clearEv>
}
    13e0:	08 95       	ret

000013e2 <_ZN12OrangutanLCD9send_dataEh>:
		send(cmd, 0, 1);
	}

	static inline void send_data(unsigned char data)
	{
		send(data, 1, 2);
    13e2:	61 e0       	ldi	r22, 0x01	; 1
    13e4:	42 e0       	ldi	r20, 0x02	; 2
    13e6:	0e 94 3f 09 	call	0x127e	; 0x127e <_ZN12OrangutanLCD4sendEhhh>
	}
    13ea:	08 95       	ret

000013ec <_ZN12OrangutanLCD11printBinaryEh>:
	printHexNibble(byte & 0x0F); // display high byte low nibble
}


// display a byte in binary starting at your current cursor location
void OrangutanLCD::printBinary(unsigned char byte)
    13ec:	0f 93       	push	r16
    13ee:	1f 93       	push	r17
    13f0:	cf 93       	push	r28
    13f2:	df 93       	push	r29
    13f4:	00 e0       	ldi	r16, 0x00	; 0
    13f6:	10 e8       	ldi	r17, 0x80	; 128
	unsigned char i, bitmask;

	bitmask = 1 << 7;
	for (i = 0; i < 8; i++)
	{
		if (byte & bitmask)
    13f8:	c8 2f       	mov	r28, r24
    13fa:	d0 e0       	ldi	r29, 0x00	; 0
    13fc:	81 2f       	mov	r24, r17
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	8c 23       	and	r24, r28
    1402:	9d 23       	and	r25, r29
    1404:	89 2b       	or	r24, r25
    1406:	11 f0       	breq	.+4      	; 0x140c <_ZN12OrangutanLCD11printBinaryEh+0x20>
			send_data('1');
    1408:	81 e3       	ldi	r24, 0x31	; 49
    140a:	01 c0       	rjmp	.+2      	; 0x140e <_ZN12OrangutanLCD11printBinaryEh+0x22>
		else
			send_data('0');
    140c:	80 e3       	ldi	r24, 0x30	; 48
    140e:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <_ZN12OrangutanLCD9send_dataEh>
void OrangutanLCD::printBinary(unsigned char byte)
{
	unsigned char i, bitmask;

	bitmask = 1 << 7;
	for (i = 0; i < 8; i++)
    1412:	0f 5f       	subi	r16, 0xFF	; 255
    1414:	08 30       	cpi	r16, 0x08	; 8
    1416:	11 f0       	breq	.+4      	; 0x141c <_ZN12OrangutanLCD11printBinaryEh+0x30>
	{
		if (byte & bitmask)
			send_data('1');
		else
			send_data('0');
		bitmask >>= 1;
    1418:	16 95       	lsr	r17
    141a:	f0 cf       	rjmp	.-32     	; 0x13fc <_ZN12OrangutanLCD11printBinaryEh+0x10>
	}
}
    141c:	df 91       	pop	r29
    141e:	cf 91       	pop	r28
    1420:	1f 91       	pop	r17
    1422:	0f 91       	pop	r16
    1424:	08 95       	ret

00001426 <print_binary>:
	OrangutanLCD::printHex(value);
}

extern "C" void print_binary(unsigned char value)
{
	OrangutanLCD::printBinary(value);
    1426:	0e 94 f6 09 	call	0x13ec	; 0x13ec <_ZN12OrangutanLCD11printBinaryEh>
}
    142a:	08 95       	ret

0000142c <_ZN12OrangutanLCD14printHexNibbleEh>:


// display a hex nibble (half of a hex byte) at your current cursor location
void OrangutanLCD::printHexNibble(unsigned char nibble)
{
	if (nibble < 10)
    142c:	8a 30       	cpi	r24, 0x0A	; 10
    142e:	10 f4       	brcc	.+4      	; 0x1434 <_ZN12OrangutanLCD14printHexNibbleEh+0x8>
		send_data('0' + nibble);
    1430:	80 5d       	subi	r24, 0xD0	; 208
    1432:	01 c0       	rjmp	.+2      	; 0x1436 <_ZN12OrangutanLCD14printHexNibbleEh+0xa>
	else
		send_data('A' + (nibble - 10));
    1434:	89 5c       	subi	r24, 0xC9	; 201
    1436:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <_ZN12OrangutanLCD9send_dataEh>
    143a:	08 95       	ret

0000143c <_ZN12OrangutanLCD8printHexEh>:
	printHex((unsigned char)(word >> 8));
	printHex((unsigned char)word);
}

// display a single-byte value in hex (00 - FF) at the current cursor location
void OrangutanLCD::printHex(unsigned char byte)
    143c:	1f 93       	push	r17
    143e:	18 2f       	mov	r17, r24
{
	printHexNibble(byte >> 4);	 // display high byte high nibble
    1440:	82 95       	swap	r24
    1442:	8f 70       	andi	r24, 0x0F	; 15
    1444:	0e 94 16 0a 	call	0x142c	; 0x142c <_ZN12OrangutanLCD14printHexNibbleEh>
	printHexNibble(byte & 0x0F); // display high byte low nibble
    1448:	81 2f       	mov	r24, r17
    144a:	8f 70       	andi	r24, 0x0F	; 15
    144c:	0e 94 16 0a 	call	0x142c	; 0x142c <_ZN12OrangutanLCD14printHexNibbleEh>
}
    1450:	1f 91       	pop	r17
    1452:	08 95       	ret

00001454 <_ZN12OrangutanLCD8printHexEj>:
	else
		send_data('A' + (nibble - 10));
}

// display a two-byte value in hex (0000 - FFFF) at the current cursor location
void OrangutanLCD::printHex(unsigned int word)
    1454:	1f 93       	push	r17
    1456:	18 2f       	mov	r17, r24
{
	printHex((unsigned char)(word >> 8));
    1458:	89 2f       	mov	r24, r25
    145a:	0e 94 1e 0a 	call	0x143c	; 0x143c <_ZN12OrangutanLCD8printHexEh>
	printHex((unsigned char)word);
    145e:	81 2f       	mov	r24, r17
    1460:	0e 94 1e 0a 	call	0x143c	; 0x143c <_ZN12OrangutanLCD8printHexEh>
}
    1464:	1f 91       	pop	r17
    1466:	08 95       	ret

00001468 <print_hex>:
	OrangutanLCD::print(value);
}

extern "C" void print_hex(unsigned int value)
{
	OrangutanLCD::printHex(value);
    1468:	0e 94 2a 0a 	call	0x1454	; 0x1454 <_ZN12OrangutanLCD8printHexEj>
}
    146c:	08 95       	ret

0000146e <print_hex_byte>:

extern "C" void print_hex_byte(unsigned char value)
{
	OrangutanLCD::printHex(value);
    146e:	0e 94 1e 0a 	call	0x143c	; 0x143c <_ZN12OrangutanLCD8printHexEh>
}
    1472:	08 95       	ret

00001474 <_ZN12OrangutanLCD5printEm>:


// prints an unsigned long.  This prints from wherever the cursor is and will
// not span lines.  (This lets you concatenate print statements.)  This
// will only print as many characters as there are digits in the number.
void OrangutanLCD::print(unsigned long value)
    1474:	6f 92       	push	r6
    1476:	7f 92       	push	r7
    1478:	8f 92       	push	r8
    147a:	9f 92       	push	r9
    147c:	af 92       	push	r10
    147e:	bf 92       	push	r11
    1480:	cf 92       	push	r12
    1482:	df 92       	push	r13
    1484:	ff 92       	push	r15
    1486:	0f 93       	push	r16
    1488:	df 93       	push	r29
    148a:	cf 93       	push	r28
    148c:	cd b7       	in	r28, 0x3d	; 61
    148e:	de b7       	in	r29, 0x3e	; 62
    1490:	2a 97       	sbiw	r28, 0x0a	; 10
    1492:	0f b6       	in	r0, 0x3f	; 63
    1494:	f8 94       	cli
    1496:	de bf       	out	0x3e, r29	; 62
    1498:	0f be       	out	0x3f, r0	; 63
    149a:	cd bf       	out	0x3d, r28	; 61
    149c:	5b 01       	movw	r10, r22
    149e:	6c 01       	movw	r12, r24
    14a0:	0a e0       	ldi	r16, 0x0A	; 10
	do
	{
		digit = value;
		value /= 10;
		digit -= value * 10;
		str[--i] = '0' + (unsigned char)digit;
    14a2:	3e 01       	movw	r6, r28
    14a4:	08 94       	sec
    14a6:	61 1c       	adc	r6, r1
    14a8:	71 1c       	adc	r7, r1
    // print_long on the Orangutan SVP, but I don't know why.  -David
	unsigned char digit;

	do
	{
		digit = value;
    14aa:	fa 2c       	mov	r15, r10
		value /= 10;
    14ac:	c6 01       	movw	r24, r12
    14ae:	b5 01       	movw	r22, r10
    14b0:	2a e0       	ldi	r18, 0x0A	; 10
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	40 e0       	ldi	r20, 0x00	; 0
    14b6:	50 e0       	ldi	r21, 0x00	; 0
    14b8:	0e 94 73 10 	call	0x20e6	; 0x20e6 <__udivmodsi4>
    14bc:	c9 01       	movw	r24, r18
    14be:	da 01       	movw	r26, r20
    14c0:	5c 01       	movw	r10, r24
    14c2:	6d 01       	movw	r12, r26
		digit -= value * 10;
		str[--i] = '0' + (unsigned char)digit;
    14c4:	01 50       	subi	r16, 0x01	; 1
    14c6:	43 01       	movw	r8, r6
    14c8:	80 0e       	add	r8, r16
    14ca:	91 1c       	adc	r9, r1
    14cc:	80 e3       	ldi	r24, 0x30	; 48
    14ce:	f8 0e       	add	r15, r24
    14d0:	c6 01       	movw	r24, r12
    14d2:	b5 01       	movw	r22, r10
    14d4:	2a e0       	ldi	r18, 0x0A	; 10
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	40 e0       	ldi	r20, 0x00	; 0
    14da:	50 e0       	ldi	r21, 0x00	; 0
    14dc:	0e 94 21 10 	call	0x2042	; 0x2042 <__mulsi3>
    14e0:	f6 1a       	sub	r15, r22
    14e2:	f4 01       	movw	r30, r8
    14e4:	f0 82       	st	Z, r15

    // Changed digit from a long to char 2009-11-20.  This fixed a bug with
    // print_long on the Orangutan SVP, but I don't know why.  -David
	unsigned char digit;

	do
    14e6:	a1 14       	cp	r10, r1
    14e8:	b1 04       	cpc	r11, r1
    14ea:	c1 04       	cpc	r12, r1
    14ec:	d1 04       	cpc	r13, r1
    14ee:	e9 f6       	brne	.-70     	; 0x14aa <_ZN12OrangutanLCD5printEm+0x36>
    14f0:	08 c0       	rjmp	.+16     	; 0x1502 <_ZN12OrangutanLCD5printEm+0x8e>
		str[--i] = '0' + (unsigned char)digit;
	}
	while (value != 0);

	for(; i < 10; i++)
		send_data(str[i]);
    14f2:	f6 01       	movw	r30, r12
    14f4:	e0 0f       	add	r30, r16
    14f6:	f1 1d       	adc	r31, r1
    14f8:	80 81       	ld	r24, Z
    14fa:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <_ZN12OrangutanLCD9send_dataEh>
		digit -= value * 10;
		str[--i] = '0' + (unsigned char)digit;
	}
	while (value != 0);

	for(; i < 10; i++)
    14fe:	0f 5f       	subi	r16, 0xFF	; 255
    1500:	04 c0       	rjmp	.+8      	; 0x150a <_ZN12OrangutanLCD5printEm+0x96>
		send_data(str[i]);
    1502:	6e 01       	movw	r12, r28
    1504:	08 94       	sec
    1506:	c1 1c       	adc	r12, r1
    1508:	d1 1c       	adc	r13, r1
		digit -= value * 10;
		str[--i] = '0' + (unsigned char)digit;
	}
	while (value != 0);

	for(; i < 10; i++)
    150a:	0a 30       	cpi	r16, 0x0A	; 10
    150c:	90 f3       	brcs	.-28     	; 0x14f2 <_ZN12OrangutanLCD5printEm+0x7e>
		send_data(str[i]);
}
    150e:	2a 96       	adiw	r28, 0x0a	; 10
    1510:	0f b6       	in	r0, 0x3f	; 63
    1512:	f8 94       	cli
    1514:	de bf       	out	0x3e, r29	; 62
    1516:	0f be       	out	0x3f, r0	; 63
    1518:	cd bf       	out	0x3d, r28	; 61
    151a:	cf 91       	pop	r28
    151c:	df 91       	pop	r29
    151e:	0f 91       	pop	r16
    1520:	ff 90       	pop	r15
    1522:	df 90       	pop	r13
    1524:	cf 90       	pop	r12
    1526:	bf 90       	pop	r11
    1528:	af 90       	pop	r10
    152a:	9f 90       	pop	r9
    152c:	8f 90       	pop	r8
    152e:	7f 90       	pop	r7
    1530:	6f 90       	pop	r6
    1532:	08 95       	ret

00001534 <print_unsigned_long>:
	OrangutanLCD::print(value);
}

extern "C" void print_unsigned_long(unsigned long value)
{
	OrangutanLCD::print(value);
    1534:	0e 94 3a 0a 	call	0x1474	; 0x1474 <_ZN12OrangutanLCD5printEm>
}
    1538:	08 95       	ret

0000153a <_ZN12OrangutanLCD5printEl>:

// prints a signed long.  This prints from wherever the cursor is and will not
// span lines.  (This lets you concatenate print statements.)  This function
// will only print as many characters as there are digits in the number (plus
// a minus sign if the number is negative).
void OrangutanLCD::print(long value)
    153a:	ef 92       	push	r14
    153c:	ff 92       	push	r15
    153e:	0f 93       	push	r16
    1540:	1f 93       	push	r17
    1542:	7b 01       	movw	r14, r22
    1544:	8c 01       	movw	r16, r24
{
	if (value < 0)
    1546:	97 ff       	sbrs	r25, 7
    1548:	0b c0       	rjmp	.+22     	; 0x1560 <_ZN12OrangutanLCD5printEl+0x26>
	{
		value = -value;
    154a:	10 95       	com	r17
    154c:	00 95       	com	r16
    154e:	f0 94       	com	r15
    1550:	e0 94       	com	r14
    1552:	e1 1c       	adc	r14, r1
    1554:	f1 1c       	adc	r15, r1
    1556:	01 1d       	adc	r16, r1
    1558:	11 1d       	adc	r17, r1
		send_data('-');		// print the minus sign
    155a:	8d e2       	ldi	r24, 0x2D	; 45
    155c:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <_ZN12OrangutanLCD9send_dataEh>
	}
	print((unsigned long)value);
    1560:	c8 01       	movw	r24, r16
    1562:	b7 01       	movw	r22, r14
    1564:	0e 94 3a 0a 	call	0x1474	; 0x1474 <_ZN12OrangutanLCD5printEm>
}
    1568:	1f 91       	pop	r17
    156a:	0f 91       	pop	r16
    156c:	ff 90       	pop	r15
    156e:	ef 90       	pop	r14
    1570:	08 95       	ret

00001572 <print_long>:
	OrangutanLCD::print(c);
}

extern "C" void print_long(long value)
{
	OrangutanLCD::print(value);
    1572:	0e 94 9d 0a 	call	0x153a	; 0x153a <_ZN12OrangutanLCD5printEl>
}
    1576:	08 95       	ret

00001578 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>:
}

// sends a string to the LCD.  The string is printed from 
// wherever the cursor is and will not span lines.  (This lets you 
// concatenate print statements.)
void OrangutanLCD::printFromProgramSpace(const char *str)
    1578:	cf 93       	push	r28
    157a:	df 93       	push	r29
    157c:	ec 01       	movw	r28, r24
    157e:	03 c0       	rjmp	.+6      	; 0x1586 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0xe>
{
	char c;
	while ((c = pgm_read_byte(str)) != 0)
	{
		send_data(c);
    1580:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <_ZN12OrangutanLCD9send_dataEh>
		str ++;
    1584:	21 96       	adiw	r28, 0x01	; 1
// wherever the cursor is and will not span lines.  (This lets you 
// concatenate print statements.)
void OrangutanLCD::printFromProgramSpace(const char *str)
{
	char c;
	while ((c = pgm_read_byte(str)) != 0)
    1586:	fe 01       	movw	r30, r28
    1588:	84 91       	lpm	r24, Z+
    158a:	88 23       	and	r24, r24
    158c:	c9 f7       	brne	.-14     	; 0x1580 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0x8>
	{
		send_data(c);
		str ++;
	}
}
    158e:	df 91       	pop	r29
    1590:	cf 91       	pop	r28
    1592:	08 95       	ret

00001594 <print_from_program_space>:
	OrangutanLCD::print(str);
}

extern "C" void print_from_program_space(const char *str)
{
	OrangutanLCD::printFromProgramSpace(str);
    1594:	0e 94 bc 0a 	call	0x1578	; 0x1578 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>
}
    1598:	08 95       	ret

0000159a <_ZN12OrangutanLCD5printEPKc>:


// sends a string to the LCD.  The string is printed from 
// wherever the cursor is and will not span lines.  (This lets you 
// concatenate print statements.)
void OrangutanLCD::print(const char *str)
    159a:	cf 93       	push	r28
    159c:	df 93       	push	r29
    159e:	ec 01       	movw	r28, r24
    15a0:	03 c0       	rjmp	.+6      	; 0x15a8 <_ZN12OrangutanLCD5printEPKc+0xe>
{
	while (*str != 0)
		send_data(*str++);
    15a2:	21 96       	adiw	r28, 0x01	; 1
    15a4:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <_ZN12OrangutanLCD9send_dataEh>
// sends a string to the LCD.  The string is printed from 
// wherever the cursor is and will not span lines.  (This lets you 
// concatenate print statements.)
void OrangutanLCD::print(const char *str)
{
	while (*str != 0)
    15a8:	88 81       	ld	r24, Y
    15aa:	88 23       	and	r24, r24
    15ac:	d1 f7       	brne	.-12     	; 0x15a2 <_ZN12OrangutanLCD5printEPKc+0x8>
		send_data(*str++);
}
    15ae:	df 91       	pop	r29
    15b0:	cf 91       	pop	r28
    15b2:	08 95       	ret

000015b4 <print>:
	OrangutanLCD::clear();
}

extern "C" void print(const char *str)
{
	OrangutanLCD::print(str);
    15b4:	0e 94 cd 0a 	call	0x159a	; 0x159a <_ZN12OrangutanLCD5printEPKc>
}
    15b8:	08 95       	ret

000015ba <_ZN12OrangutanLCD5printEc>:


// prints a single character at the current cursor location
void OrangutanLCD::print(char character)
{
	send_data(character);
    15ba:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <_ZN12OrangutanLCD9send_dataEh>
}
    15be:	08 95       	ret

000015c0 <print_character>:


// prints a single character at the current cursor location
void OrangutanLCD::print(char character)
{
	send_data(character);
    15c0:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <_ZN12OrangutanLCD9send_dataEh>
}

extern "C" void print_character(char c)
{
	OrangutanLCD::print(c);
}
    15c4:	08 95       	ret

000015c6 <lcd_putchar>:
unsigned char numLCDRows = LCD_HEIGHT;
unsigned char numLCDCols = LCD_WIDTH;
#define SAVED_CHARS		(numLCDCols*(numLCDRows-1))

// This function is called by printf.
extern "C" int lcd_putchar(char c, FILE *f)
    15c6:	a0 e0       	ldi	r26, 0x00	; 0
    15c8:	b0 e0       	ldi	r27, 0x00	; 0
    15ca:	e9 ee       	ldi	r30, 0xE9	; 233
    15cc:	fa e0       	ldi	r31, 0x0A	; 10
    15ce:	0c 94 ba 10 	jmp	0x2174	; 0x2174 <__prologue_saves__+0x14>
    15d2:	e8 2e       	mov	r14, r24
{
	unsigned char nextline=0; /* should we go to next line after output? */
	unsigned char repos=0; /* should we relocate */
	unsigned char i;

	if (printf_chars == 0)
    15d4:	80 91 46 01 	lds	r24, 0x0146
    15d8:	90 91 47 01 	lds	r25, 0x0147
    15dc:	89 2b       	or	r24, r25
    15de:	09 f4       	brne	.+2      	; 0x15e2 <lcd_putchar+0x1c>
    15e0:	05 c1       	rjmp	.+522    	; 0x17ec <lcd_putchar+0x226>
	{
		return c;
	}

	/* control characters */
	if (c == '\n')
    15e2:	2a e0       	ldi	r18, 0x0A	; 10
    15e4:	e2 16       	cp	r14, r18
    15e6:	09 f4       	brne	.+2      	; 0x15ea <lcd_putchar+0x24>
    15e8:	46 c0       	rjmp	.+140    	; 0x1676 <lcd_putchar+0xb0>
	{
		nextline = 1;
	}
	else if (c == 8) { // ^H
    15ea:	38 e0       	ldi	r19, 0x08	; 8
    15ec:	e3 16       	cp	r14, r19
    15ee:	c9 f4       	brne	.+50     	; 0x1622 <lcd_putchar+0x5c>
		col--;
    15f0:	80 91 49 01 	lds	r24, 0x0149
    15f4:	81 50       	subi	r24, 0x01	; 1
    15f6:	80 93 49 01 	sts	0x0149, r24
		if (col == (unsigned char)-1) { row--; col = numLCDCols-1; }
    15fa:	8f 3f       	cpi	r24, 0xFF	; 255
    15fc:	51 f4       	brne	.+20     	; 0x1612 <lcd_putchar+0x4c>
    15fe:	80 91 48 01 	lds	r24, 0x0148
    1602:	81 50       	subi	r24, 0x01	; 1
    1604:	80 93 48 01 	sts	0x0148, r24
    1608:	80 91 37 01 	lds	r24, 0x0137
    160c:	81 50       	subi	r24, 0x01	; 1
    160e:	80 93 49 01 	sts	0x0149, r24
		if (row == (unsigned char)-1) { row = 0; col = 0; }
    1612:	80 91 48 01 	lds	r24, 0x0148
    1616:	8f 3f       	cpi	r24, 0xFF	; 255
    1618:	09 f0       	breq	.+2      	; 0x161c <lcd_putchar+0x56>
    161a:	e2 c0       	rjmp	.+452    	; 0x17e0 <lcd_putchar+0x21a>
    161c:	10 92 48 01 	sts	0x0148, r1
    1620:	dd c0       	rjmp	.+442    	; 0x17dc <lcd_putchar+0x216>


// prints a single character at the current cursor location
void OrangutanLCD::print(char character)
{
	send_data(character);
    1622:	8e 2d       	mov	r24, r14
    1624:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <_ZN12OrangutanLCD9send_dataEh>
		repos = 1;
	}
	else
	{
		OrangutanLCD::print(c); /* write the character */
		if (row != 0) printf_chars[(row-1)*numLCDCols + col]=c; /* remember the character */
    1628:	20 91 48 01 	lds	r18, 0x0148
    162c:	22 23       	and	r18, r18
    162e:	c9 f0       	breq	.+50     	; 0x1662 <lcd_putchar+0x9c>
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	21 50       	subi	r18, 0x01	; 1
    1634:	30 40       	sbci	r19, 0x00	; 0
    1636:	80 91 37 01 	lds	r24, 0x0137
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	ac 01       	movw	r20, r24
    163e:	24 9f       	mul	r18, r20
    1640:	c0 01       	movw	r24, r0
    1642:	25 9f       	mul	r18, r21
    1644:	90 0d       	add	r25, r0
    1646:	34 9f       	mul	r19, r20
    1648:	90 0d       	add	r25, r0
    164a:	11 24       	eor	r1, r1
    164c:	20 91 49 01 	lds	r18, 0x0149
    1650:	e0 91 46 01 	lds	r30, 0x0146
    1654:	f0 91 47 01 	lds	r31, 0x0147
    1658:	e8 0f       	add	r30, r24
    165a:	f9 1f       	adc	r31, r25
    165c:	e2 0f       	add	r30, r18
    165e:	f1 1d       	adc	r31, r1
    1660:	e0 82       	st	Z, r14
		col++;
    1662:	80 91 49 01 	lds	r24, 0x0149
    1666:	8f 5f       	subi	r24, 0xFF	; 255
    1668:	80 93 49 01 	sts	0x0149, r24

		if (col == numLCDCols) nextline = 1;
    166c:	90 91 37 01 	lds	r25, 0x0137
    1670:	89 17       	cp	r24, r25
    1672:	09 f0       	breq	.+2      	; 0x1676 <lcd_putchar+0xb0>
    1674:	bb c0       	rjmp	.+374    	; 0x17ec <lcd_putchar+0x226>
	}

	if (nextline)
	{
		if (row == numLCDRows - 1)
    1676:	40 91 48 01 	lds	r20, 0x0148
    167a:	24 2f       	mov	r18, r20
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	80 91 36 01 	lds	r24, 0x0136
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	01 97       	sbiw	r24, 0x01	; 1
    1686:	28 17       	cp	r18, r24
    1688:	39 07       	cpc	r19, r25
    168a:	09 f0       	breq	.+2      	; 0x168e <lcd_putchar+0xc8>
    168c:	a4 c0       	rjmp	.+328    	; 0x17d6 <lcd_putchar+0x210>
    168e:	c0 e0       	ldi	r28, 0x00	; 0
    1690:	d0 e0       	ldi	r29, 0x00	; 0
    1692:	44 c0       	rjmp	.+136    	; 0x171c <lcd_putchar+0x156>
            // it is never possible for the user to use the lower
            // right corner of his LCD.
			char j;
			for (j = 0; j < numLCDRows-2; j++)  	// draw top LCD_HEIGHT-2 rows
			{
				OrangutanLCD::gotoXY(0, j);
    1694:	80 e0       	ldi	r24, 0x00	; 0
    1696:	6c 2f       	mov	r22, r28
    1698:	0e 94 9f 09 	call	0x133e	; 0x133e <_ZN12OrangutanLCD6gotoXYEhh>
    169c:	ff 24       	eor	r15, r15
    169e:	6e 01       	movw	r12, r28
    16a0:	08 94       	sec
    16a2:	c1 1c       	adc	r12, r1
    16a4:	d1 1c       	adc	r13, r1
    16a6:	35 c0       	rjmp	.+106    	; 0x1712 <lcd_putchar+0x14c>
				for (i = 0; i < numLCDCols; i++)
				{
					OrangutanLCD::print(printf_chars[j*numLCDCols + i]);
    16a8:	0f 2d       	mov	r16, r15
    16aa:	10 e0       	ldi	r17, 0x00	; 0


// prints a single character at the current cursor location
void OrangutanLCD::print(char character)
{
	send_data(character);
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	9c 01       	movw	r18, r24
    16b0:	c2 9f       	mul	r28, r18
    16b2:	c0 01       	movw	r24, r0
    16b4:	c3 9f       	mul	r28, r19
    16b6:	90 0d       	add	r25, r0
    16b8:	d2 9f       	mul	r29, r18
    16ba:	90 0d       	add	r25, r0
    16bc:	11 24       	eor	r1, r1
    16be:	e0 91 46 01 	lds	r30, 0x0146
    16c2:	f0 91 47 01 	lds	r31, 0x0147
    16c6:	e0 0f       	add	r30, r16
    16c8:	f1 1f       	adc	r31, r17
    16ca:	e8 0f       	add	r30, r24
    16cc:	f9 1f       	adc	r31, r25
    16ce:	80 81       	ld	r24, Z
    16d0:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <_ZN12OrangutanLCD9send_dataEh>
			{
				OrangutanLCD::gotoXY(0, j);
				for (i = 0; i < numLCDCols; i++)
				{
					OrangutanLCD::print(printf_chars[j*numLCDCols + i]);
					printf_chars[j*numLCDCols + i] = printf_chars[(j+1)*numLCDCols + i];
    16d4:	e0 91 46 01 	lds	r30, 0x0146
    16d8:	f0 91 47 01 	lds	r31, 0x0147
    16dc:	80 91 37 01 	lds	r24, 0x0137
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	c8 9f       	mul	r28, r24
    16e4:	d0 01       	movw	r26, r0
    16e6:	c9 9f       	mul	r28, r25
    16e8:	b0 0d       	add	r27, r0
    16ea:	d8 9f       	mul	r29, r24
    16ec:	b0 0d       	add	r27, r0
    16ee:	11 24       	eor	r1, r1
    16f0:	e0 0f       	add	r30, r16
    16f2:	f1 1f       	adc	r31, r17
    16f4:	ae 0f       	add	r26, r30
    16f6:	bf 1f       	adc	r27, r31
    16f8:	ac 01       	movw	r20, r24
    16fa:	c4 9e       	mul	r12, r20
    16fc:	c0 01       	movw	r24, r0
    16fe:	c5 9e       	mul	r12, r21
    1700:	90 0d       	add	r25, r0
    1702:	d4 9e       	mul	r13, r20
    1704:	90 0d       	add	r25, r0
    1706:	11 24       	eor	r1, r1
    1708:	e8 0f       	add	r30, r24
    170a:	f9 1f       	adc	r31, r25
    170c:	80 81       	ld	r24, Z
    170e:	8c 93       	st	X, r24
            // right corner of his LCD.
			char j;
			for (j = 0; j < numLCDRows-2; j++)  	// draw top LCD_HEIGHT-2 rows
			{
				OrangutanLCD::gotoXY(0, j);
				for (i = 0; i < numLCDCols; i++)
    1710:	f3 94       	inc	r15
    1712:	80 91 37 01 	lds	r24, 0x0137
    1716:	f8 16       	cp	r15, r24
    1718:	38 f2       	brcs	.-114    	; 0x16a8 <lcd_putchar+0xe2>
    171a:	e6 01       	movw	r28, r12
			/******* scroll! *******/
            // Note: because of the way we implement scrolling,
            // it is never possible for the user to use the lower
            // right corner of his LCD.
			char j;
			for (j = 0; j < numLCDRows-2; j++)  	// draw top LCD_HEIGHT-2 rows
    171c:	60 91 36 01 	lds	r22, 0x0136
    1720:	86 2f       	mov	r24, r22
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	02 97       	sbiw	r24, 0x02	; 2
    1726:	c8 17       	cp	r28, r24
    1728:	d9 07       	cpc	r29, r25
    172a:	0c f4       	brge	.+2      	; 0x172e <lcd_putchar+0x168>
    172c:	b3 cf       	rjmp	.-154    	; 0x1694 <lcd_putchar+0xce>
				{
					OrangutanLCD::print(printf_chars[j*numLCDCols + i]);
					printf_chars[j*numLCDCols + i] = printf_chars[(j+1)*numLCDCols + i];
				}
			}
			if (numLCDRows >= 2)
    172e:	62 30       	cpi	r22, 0x02	; 2
    1730:	08 f4       	brcc	.+2      	; 0x1734 <lcd_putchar+0x16e>
    1732:	40 c0       	rjmp	.+128    	; 0x17b4 <lcd_putchar+0x1ee>
			{
				OrangutanLCD::gotoXY(0, numLCDRows-2);	// draw row above bottom row
    1734:	62 50       	subi	r22, 0x02	; 2
    1736:	80 e0       	ldi	r24, 0x00	; 0
    1738:	0e 94 9f 09 	call	0x133e	; 0x133e <_ZN12OrangutanLCD6gotoXYEhh>
    173c:	ff 24       	eor	r15, r15
				for (i = 0; i < numLCDCols; i++)
				{
					OrangutanLCD::print(printf_chars[(numLCDRows-2)*numLCDCols + i]);
					printf_chars[(numLCDRows-2)*numLCDCols + i] = ' ';	// clear saved bottom row
    173e:	e0 e2       	ldi	r30, 0x20	; 32
    1740:	de 2e       	mov	r13, r30
    1742:	34 c0       	rjmp	.+104    	; 0x17ac <lcd_putchar+0x1e6>
			if (numLCDRows >= 2)
			{
				OrangutanLCD::gotoXY(0, numLCDRows-2);	// draw row above bottom row
				for (i = 0; i < numLCDCols; i++)
				{
					OrangutanLCD::print(printf_chars[(numLCDRows-2)*numLCDCols + i]);
    1744:	0f 2d       	mov	r16, r15
    1746:	10 e0       	ldi	r17, 0x00	; 0


// prints a single character at the current cursor location
void OrangutanLCD::print(char character)
{
	send_data(character);
    1748:	80 91 36 01 	lds	r24, 0x0136
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	02 97       	sbiw	r24, 0x02	; 2
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	ac 01       	movw	r20, r24
    1754:	42 9f       	mul	r20, r18
    1756:	c0 01       	movw	r24, r0
    1758:	43 9f       	mul	r20, r19
    175a:	90 0d       	add	r25, r0
    175c:	52 9f       	mul	r21, r18
    175e:	90 0d       	add	r25, r0
    1760:	11 24       	eor	r1, r1
    1762:	e0 91 46 01 	lds	r30, 0x0146
    1766:	f0 91 47 01 	lds	r31, 0x0147
    176a:	e0 0f       	add	r30, r16
    176c:	f1 1f       	adc	r31, r17
    176e:	e8 0f       	add	r30, r24
    1770:	f9 1f       	adc	r31, r25
    1772:	80 81       	ld	r24, Z
    1774:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <_ZN12OrangutanLCD9send_dataEh>
			{
				OrangutanLCD::gotoXY(0, numLCDRows-2);	// draw row above bottom row
				for (i = 0; i < numLCDCols; i++)
				{
					OrangutanLCD::print(printf_chars[(numLCDRows-2)*numLCDCols + i]);
					printf_chars[(numLCDRows-2)*numLCDCols + i] = ' ';	// clear saved bottom row
    1778:	20 91 36 01 	lds	r18, 0x0136
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	22 50       	subi	r18, 0x02	; 2
    1780:	30 40       	sbci	r19, 0x00	; 0
    1782:	80 91 37 01 	lds	r24, 0x0137
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	ac 01       	movw	r20, r24
    178a:	24 9f       	mul	r18, r20
    178c:	c0 01       	movw	r24, r0
    178e:	25 9f       	mul	r18, r21
    1790:	90 0d       	add	r25, r0
    1792:	34 9f       	mul	r19, r20
    1794:	90 0d       	add	r25, r0
    1796:	11 24       	eor	r1, r1
    1798:	e0 91 46 01 	lds	r30, 0x0146
    179c:	f0 91 47 01 	lds	r31, 0x0147
    17a0:	e0 0f       	add	r30, r16
    17a2:	f1 1f       	adc	r31, r17
    17a4:	e8 0f       	add	r30, r24
    17a6:	f9 1f       	adc	r31, r25
    17a8:	d0 82       	st	Z, r13
				}
			}
			if (numLCDRows >= 2)
			{
				OrangutanLCD::gotoXY(0, numLCDRows-2);	// draw row above bottom row
				for (i = 0; i < numLCDCols; i++)
    17aa:	f3 94       	inc	r15
    17ac:	20 91 37 01 	lds	r18, 0x0137
    17b0:	f2 16       	cp	r15, r18
    17b2:	40 f2       	brcs	.-112    	; 0x1744 <lcd_putchar+0x17e>
				{
					OrangutanLCD::print(printf_chars[(numLCDRows-2)*numLCDCols + i]);
					printf_chars[(numLCDRows-2)*numLCDCols + i] = ' ';	// clear saved bottom row
				}
			}
			OrangutanLCD::gotoXY(0, numLCDRows-1);		// erase bottom row
    17b4:	60 91 36 01 	lds	r22, 0x0136
    17b8:	61 50       	subi	r22, 0x01	; 1
    17ba:	80 e0       	ldi	r24, 0x00	; 0
    17bc:	0e 94 9f 09 	call	0x133e	; 0x133e <_ZN12OrangutanLCD6gotoXYEhh>
    17c0:	00 e0       	ldi	r16, 0x00	; 0
    17c2:	04 c0       	rjmp	.+8      	; 0x17cc <lcd_putchar+0x206>


// prints a single character at the current cursor location
void OrangutanLCD::print(char character)
{
	send_data(character);
    17c4:	80 e2       	ldi	r24, 0x20	; 32
    17c6:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <_ZN12OrangutanLCD9send_dataEh>
					OrangutanLCD::print(printf_chars[(numLCDRows-2)*numLCDCols + i]);
					printf_chars[(numLCDRows-2)*numLCDCols + i] = ' ';	// clear saved bottom row
				}
			}
			OrangutanLCD::gotoXY(0, numLCDRows-1);		// erase bottom row
			for (i = 0; i < numLCDCols; i++)
    17ca:	0f 5f       	subi	r16, 0xFF	; 255
    17cc:	80 91 37 01 	lds	r24, 0x0137
    17d0:	08 17       	cp	r16, r24
    17d2:	c0 f3       	brcs	.-16     	; 0x17c4 <lcd_putchar+0x1fe>
    17d4:	03 c0       	rjmp	.+6      	; 0x17dc <lcd_putchar+0x216>
			{
				OrangutanLCD::print(' ');
			}
		}
		else
			row++;
    17d6:	4f 5f       	subi	r20, 0xFF	; 255
    17d8:	40 93 48 01 	sts	0x0148, r20
		col = 0;
    17dc:	10 92 49 01 	sts	0x0149, r1
		repos = 1;
	}

	if (repos)
	{
		OrangutanLCD::gotoXY(col, row);
    17e0:	80 91 49 01 	lds	r24, 0x0149
    17e4:	60 91 48 01 	lds	r22, 0x0148
    17e8:	0e 94 9f 09 	call	0x133e	; 0x133e <_ZN12OrangutanLCD6gotoXYEhh>
	}

	return c;
    17ec:	2e 2d       	mov	r18, r14
    17ee:	33 27       	eor	r19, r19
    17f0:	27 fd       	sbrc	r18, 7
    17f2:	30 95       	com	r19
}
    17f4:	c9 01       	movw	r24, r18
    17f6:	cd b7       	in	r28, 0x3d	; 61
    17f8:	de b7       	in	r29, 0x3e	; 62
    17fa:	e8 e0       	ldi	r30, 0x08	; 8
    17fc:	0c 94 d6 10 	jmp	0x21ac	; 0x21ac <__epilogue_restores__+0x14>

00001800 <_ZN12OrangutanLCD19loadCustomCharacterEPKch>:
#endif

#define LCD_CGRAM   6

// Loads a custom character
void OrangutanLCD::loadCustomCharacter(const char *picture_p, unsigned char number)
    1800:	ef 92       	push	r14
    1802:	ff 92       	push	r15
    1804:	0f 93       	push	r16
    1806:	1f 93       	push	r17
    1808:	cf 93       	push	r28
    180a:	df 93       	push	r29
    180c:	7c 01       	movw	r14, r24
{
  unsigned char i;

  // Each character takes up 8 bytes of the character memory, so we
  // multiply by 8 to get the address.
  number *= 8;
    180e:	06 2f       	mov	r16, r22
    1810:	10 e0       	ldi	r17, 0x00	; 0
    1812:	f3 e0       	ldi	r31, 0x03	; 3
    1814:	00 0f       	add	r16, r16
    1816:	11 1f       	adc	r17, r17
    1818:	fa 95       	dec	r31
    181a:	e1 f7       	brne	.-8      	; 0x1814 <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x14>
    181c:	c0 e0       	ldi	r28, 0x00	; 0
    181e:	d0 e0       	ldi	r29, 0x00	; 0

  for(i=0; i<8; i++)
  {
    // set CG RAM address
    send_cmd((1<<LCD_CGRAM) | (number+i));
    1820:	9e 01       	movw	r18, r28
    1822:	20 0f       	add	r18, r16
    1824:	82 2f       	mov	r24, r18
    1826:	80 64       	ori	r24, 0x40	; 64
    1828:	0e 94 73 09 	call	0x12e6	; 0x12e6 <_ZN12OrangutanLCD8send_cmdEh>

    // write character data
    send_data(pgm_read_byte(picture_p+i));
    182c:	f7 01       	movw	r30, r14
    182e:	ec 0f       	add	r30, r28
    1830:	fd 1f       	adc	r31, r29
    1832:	e4 91       	lpm	r30, Z+
    1834:	8e 2f       	mov	r24, r30
    1836:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <_ZN12OrangutanLCD9send_dataEh>
    183a:	21 96       	adiw	r28, 0x01	; 1

  // Each character takes up 8 bytes of the character memory, so we
  // multiply by 8 to get the address.
  number *= 8;

  for(i=0; i<8; i++)
    183c:	c8 30       	cpi	r28, 0x08	; 8
    183e:	d1 05       	cpc	r29, r1
    1840:	79 f7       	brne	.-34     	; 0x1820 <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x20>
    send_cmd((1<<LCD_CGRAM) | (number+i));

    // write character data
    send_data(pgm_read_byte(picture_p+i));
  }
}
    1842:	cd b7       	in	r28, 0x3d	; 61
    1844:	de b7       	in	r29, 0x3e	; 62
    1846:	e6 e0       	ldi	r30, 0x06	; 6
    1848:	0c 94 d8 10 	jmp	0x21b0	; 0x21b0 <__epilogue_restores__+0x18>

0000184c <lcd_load_custom_character>:
	OrangutanLCD::scroll(direction, num, delay_time);
}

extern "C" void lcd_load_custom_character(const char *picture_p, unsigned char number)
{
	OrangutanLCD::loadCustomCharacter(picture_p, number);
    184c:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN12OrangutanLCD19loadCustomCharacterEPKch>
}
    1850:	08 95       	ret

00001852 <_ZN12OrangutanLCD13send_4bit_cmdEh>:
		send(cmd, 0, 2);
	}

	static inline void send_4bit_cmd(unsigned char cmd)
	{
		send(cmd, 0, 1);
    1852:	60 e0       	ldi	r22, 0x00	; 0
    1854:	41 e0       	ldi	r20, 0x01	; 1
    1856:	0e 94 3f 09 	call	0x127e	; 0x127e <_ZN12OrangutanLCD4sendEhhh>
	}
    185a:	08 95       	ret

0000185c <_ZN12OrangutanLCD6scrollEhhj>:
// shifts the display LEFT or RIGHT the given number of
// positions, delaying for delay_time milliseconds between each shift.
// This is what you'd use for a scrolling display.
// direction should be either LCD_LEFT or LCD_RIGHT
void OrangutanLCD::scroll(unsigned char direction, unsigned char num, 
						   unsigned int delay_time)
    185c:	0f 93       	push	r16
    185e:	1f 93       	push	r17
    1860:	cf 93       	push	r28
    1862:	df 93       	push	r29
    1864:	08 2f       	mov	r16, r24
    1866:	16 2f       	mov	r17, r22
    1868:	ea 01       	movw	r28, r20
    186a:	0b c0       	rjmp	.+22     	; 0x1882 <_ZN12OrangutanLCD6scrollEhhj+0x26>
{
	while(num--)
	{
		if (direction == LCD_LEFT)
    186c:	00 23       	and	r16, r16
    186e:	11 f4       	brne	.+4      	; 0x1874 <_ZN12OrangutanLCD6scrollEhhj+0x18>
			send_cmd(LCD_SHIFT_L);
    1870:	88 e1       	ldi	r24, 0x18	; 24
    1872:	01 c0       	rjmp	.+2      	; 0x1876 <_ZN12OrangutanLCD6scrollEhhj+0x1a>
		else
			send_cmd(LCD_SHIFT_R);
    1874:	8c e1       	ldi	r24, 0x1C	; 28
    1876:	0e 94 73 09 	call	0x12e6	; 0x12e6 <_ZN12OrangutanLCD8send_cmdEh>
    187a:	ce 01       	movw	r24, r28
    187c:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <_ZN13OrangutanTime17delayMillisecondsEj>
    1880:	11 50       	subi	r17, 0x01	; 1
// This is what you'd use for a scrolling display.
// direction should be either LCD_LEFT or LCD_RIGHT
void OrangutanLCD::scroll(unsigned char direction, unsigned char num, 
						   unsigned int delay_time)
{
	while(num--)
    1882:	11 23       	and	r17, r17
    1884:	99 f7       	brne	.-26     	; 0x186c <_ZN12OrangutanLCD6scrollEhhj+0x10>
			send_cmd(LCD_SHIFT_L);
		else
			send_cmd(LCD_SHIFT_R);
		delay(delay_time);
	}
}
    1886:	df 91       	pop	r29
    1888:	cf 91       	pop	r28
    188a:	1f 91       	pop	r17
    188c:	0f 91       	pop	r16
    188e:	08 95       	ret

00001890 <lcd_scroll>:
}

extern "C" void lcd_scroll(unsigned char direction, unsigned char num, 
					   unsigned int delay_time)
{
	OrangutanLCD::scroll(direction, num, delay_time);
    1890:	0e 94 2e 0c 	call	0x185c	; 0x185c <_ZN12OrangutanLCD6scrollEhhj>
}
    1894:	08 95       	ret

00001896 <_ZN16OrangutanDigital9setOutputEhh>:

	// high-level method for setting the specified pin as an output with the specified output state.
	// An outputState value of 0 will cause the pin to drive low; a value of 1 will cause the pin to 
	// drive high.  A value of 0xFF (255) will toggle the output state of the pin (i.e. high -> low and
	// low -> high).
	inline static void setOutput(unsigned char pin, unsigned char outputState)
    1896:	28 2f       	mov	r18, r24
		io->pinRegister = 0;
		io->portRegister = 0;
		io->ddrRegister = 0;
		io->bitmask = 0;

		if (pin < 8)			// pin 0 = PD0, ..., 7 = PD7
    1898:	88 30       	cpi	r24, 0x08	; 8
    189a:	68 f4       	brcc	.+26     	; 0x18b6 <_ZN16OrangutanDigital9setOutputEhh+0x20>
		{
			io->pinRegister = (unsigned char*)&PIND;
			io->portRegister = (unsigned char*)&PORTD;
			io->ddrRegister = (unsigned char*)&DDRD;
			io->bitmask = 1 << pin;
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	02 c0       	rjmp	.+4      	; 0x18a6 <_ZN16OrangutanDigital9setOutputEhh+0x10>
    18a2:	88 0f       	add	r24, r24
    18a4:	99 1f       	adc	r25, r25
    18a6:	2a 95       	dec	r18
    18a8:	e2 f7       	brpl	.-8      	; 0x18a2 <_ZN16OrangutanDigital9setOutputEhh+0xc>
    18aa:	28 2f       	mov	r18, r24
    18ac:	aa e2       	ldi	r26, 0x2A	; 42
    18ae:	b0 e0       	ldi	r27, 0x00	; 0
    18b0:	eb e2       	ldi	r30, 0x2B	; 43
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	29 c0       	rjmp	.+82     	; 0x1908 <_ZN16OrangutanDigital9setOutputEhh+0x72>
			io->bitmask = 1 << (31 - pin);
		}

#else

		else if (pin < 14)		// pin 8 = PB0, ..., 13 = PB5 (PB6 and PB7 reserved for external clock)
    18b6:	8e 30       	cpi	r24, 0x0E	; 14
    18b8:	80 f4       	brcc	.+32     	; 0x18da <_ZN16OrangutanDigital9setOutputEhh+0x44>
		{
			io->pinRegister = (unsigned char*)&PINB;
			io->portRegister = (unsigned char*)&PORTB;
			io->ddrRegister = (unsigned char*)&DDRB;
			io->bitmask = 1 << (pin - 8);
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	28 50       	subi	r18, 0x08	; 8
    18be:	30 40       	sbci	r19, 0x00	; 0
    18c0:	81 e0       	ldi	r24, 0x01	; 1
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	02 c0       	rjmp	.+4      	; 0x18ca <_ZN16OrangutanDigital9setOutputEhh+0x34>
    18c6:	88 0f       	add	r24, r24
    18c8:	99 1f       	adc	r25, r25
    18ca:	2a 95       	dec	r18
    18cc:	e2 f7       	brpl	.-8      	; 0x18c6 <_ZN16OrangutanDigital9setOutputEhh+0x30>
    18ce:	28 2f       	mov	r18, r24
    18d0:	a4 e2       	ldi	r26, 0x24	; 36
    18d2:	b0 e0       	ldi	r27, 0x00	; 0
    18d4:	e5 e2       	ldi	r30, 0x25	; 37
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	17 c0       	rjmp	.+46     	; 0x1908 <_ZN16OrangutanDigital9setOutputEhh+0x72>
		}
		else if (pin < 21)		// pin 14 = PC0, ..., 19 = PC5 (PC6 is reset, PC7 doesn't exist)
    18da:	85 31       	cpi	r24, 0x15	; 21
    18dc:	30 f0       	brcs	.+12     	; 0x18ea <_ZN16OrangutanDigital9setOutputEhh+0x54>
    18de:	20 e0       	ldi	r18, 0x00	; 0
    18e0:	a0 e0       	ldi	r26, 0x00	; 0
    18e2:	b0 e0       	ldi	r27, 0x00	; 0
    18e4:	e0 e0       	ldi	r30, 0x00	; 0
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	0f c0       	rjmp	.+30     	; 0x1908 <_ZN16OrangutanDigital9setOutputEhh+0x72>
		{
			io->pinRegister = (unsigned char*)&PINC;
			io->portRegister = (unsigned char*)&PORTC;
			io->ddrRegister = (unsigned char*)&DDRC;
			io->bitmask = 1 << (pin - 14);
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	2e 50       	subi	r18, 0x0E	; 14
    18ee:	30 40       	sbci	r19, 0x00	; 0
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	02 c0       	rjmp	.+4      	; 0x18fa <_ZN16OrangutanDigital9setOutputEhh+0x64>
    18f6:	88 0f       	add	r24, r24
    18f8:	99 1f       	adc	r25, r25
    18fa:	2a 95       	dec	r18
    18fc:	e2 f7       	brpl	.-8      	; 0x18f6 <_ZN16OrangutanDigital9setOutputEhh+0x60>
    18fe:	28 2f       	mov	r18, r24
    1900:	a7 e2       	ldi	r26, 0x27	; 39
    1902:	b0 e0       	ldi	r27, 0x00	; 0
    1904:	e8 e2       	ldi	r30, 0x28	; 40
    1906:	f0 e0       	ldi	r31, 0x00	; 0
	// setting it as high-impedance (val = 0) or enabling the internal pull-up (val = 1).  If the pin is an
	// output, this lets you choose between driving low (val = 0) and driving high (val = 1).
	// NOTE: if val is 0xFF (255), this method will toggle the PORT register pin(s).
	inline static void setOutputValue(struct IOStruct* ioPin, unsigned char val)
	{
		if (val == 0xFF)
    1908:	6f 3f       	cpi	r22, 0xFF	; 255
    190a:	19 f4       	brne	.+6      	; 0x1912 <_ZN16OrangutanDigital9setOutputEhh+0x7c>
			*(ioPin->portRegister) ^= ioPin->bitmask;
    190c:	80 81       	ld	r24, Z
    190e:	82 27       	eor	r24, r18
    1910:	09 c0       	rjmp	.+18     	; 0x1924 <_ZN16OrangutanDigital9setOutputEhh+0x8e>
		else if (val)
    1912:	66 23       	and	r22, r22
    1914:	19 f0       	breq	.+6      	; 0x191c <_ZN16OrangutanDigital9setOutputEhh+0x86>
			*(ioPin->portRegister) |= ioPin->bitmask;
    1916:	80 81       	ld	r24, Z
    1918:	82 2b       	or	r24, r18
    191a:	04 c0       	rjmp	.+8      	; 0x1924 <_ZN16OrangutanDigital9setOutputEhh+0x8e>
		else
			*(ioPin->portRegister) &= ~ioPin->bitmask;
    191c:	90 81       	ld	r25, Z
    191e:	82 2f       	mov	r24, r18
    1920:	80 95       	com	r24
    1922:	89 23       	and	r24, r25
    1924:	80 83       	st	Z, r24
	// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
	// described by an IOStruct pointer.
	inline static void setDataDirection(struct IOStruct* ioPin, unsigned char val)
	{
		if (val)
			*(ioPin->ddrRegister) |= ioPin->bitmask;
    1926:	8c 91       	ld	r24, X
    1928:	82 2b       	or	r24, r18
    192a:	8c 93       	st	X, r24
	{
		struct IOStruct registers;
		getIORegisters(&registers, pin);
		setOutputValue(&registers, outputState);
		setDataDirection(&registers, 1);
	}
    192c:	08 95       	ret

0000192e <_ZN15OrangutanMotorsC2Ev>:

// constructor

OrangutanMotors::OrangutanMotors()
{
}
    192e:	08 95       	ret

00001930 <_ZN15OrangutanMotorsC1Ev>:
    1930:	08 95       	ret

00001932 <_ZN15OrangutanMotors5init2Ev>:
	*/

	// configure for inverted fast PWM output on motor control pins:   
    //  set OCxx on compare match, clear on timer overflow   
    //  Timer0 and Timer2 counts up from 0 to 255 and then overflows directly to 0   
    TCCR0A = TCCR2A = 0xF3;
    1932:	e0 eb       	ldi	r30, 0xB0	; 176
    1934:	f0 e0       	ldi	r31, 0x00	; 0
    1936:	83 ef       	ldi	r24, 0xF3	; 243
    1938:	80 83       	st	Z, r24
    193a:	80 81       	ld	r24, Z
    193c:	84 bd       	out	0x24, r24	; 36
  
    // use the system clock/8 (=2.5 MHz) as the timer clock,
	// which will produce a PWM frequency of 10 kHz
    TCCR0B = TCCR2B = 0x02;
    193e:	e1 eb       	ldi	r30, 0xB1	; 177
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	82 e0       	ldi	r24, 0x02	; 2
    1944:	80 83       	st	Z, r24
    1946:	80 81       	ld	r24, Z
    1948:	85 bd       	out	0x25, r24	; 37
	// and 3Pi can support PWM frequencies this high.  The
	// Orangutan LV-168 cannot support frequencies above 10 kHz.
    //TCCR0B = TCCR2B = 0x01;

    // initialize all PWMs to 0% duty cycle (braking)   
    OCR0A = OCR0B = OCR2A = OCR2B = 0;
    194a:	e4 eb       	ldi	r30, 0xB4	; 180
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	10 82       	st	Z, r1
    1950:	80 81       	ld	r24, Z
    1952:	e3 eb       	ldi	r30, 0xB3	; 179
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	80 83       	st	Z, r24
    1958:	80 81       	ld	r24, Z
    195a:	88 bd       	out	0x28, r24	; 40
    195c:	88 b5       	in	r24, 0x28	; 40
    195e:	87 bd       	out	0x27, r24	; 39
	
	OrangutanDigital::setOutput(PWM0A, 0);
    1960:	86 e0       	ldi	r24, 0x06	; 6
    1962:	60 e0       	ldi	r22, 0x00	; 0
    1964:	0e 94 4b 0c 	call	0x1896	; 0x1896 <_ZN16OrangutanDigital9setOutputEhh>
	OrangutanDigital::setOutput(PWM0B, 0);
    1968:	85 e0       	ldi	r24, 0x05	; 5
    196a:	60 e0       	ldi	r22, 0x00	; 0
    196c:	0e 94 4b 0c 	call	0x1896	; 0x1896 <_ZN16OrangutanDigital9setOutputEhh>
	OrangutanDigital::setOutput(PWM2A, 0);
    1970:	8b e0       	ldi	r24, 0x0B	; 11
    1972:	60 e0       	ldi	r22, 0x00	; 0
    1974:	0e 94 4b 0c 	call	0x1896	; 0x1896 <_ZN16OrangutanDigital9setOutputEhh>
	OrangutanDigital::setOutput(PWM2B, 0);
    1978:	83 e0       	ldi	r24, 0x03	; 3
    197a:	60 e0       	ldi	r22, 0x00	; 0
    197c:	0e 94 4b 0c 	call	0x1896	; 0x1896 <_ZN16OrangutanDigital9setOutputEhh>

#endif
}
    1980:	08 95       	ret

00001982 <_ZN15OrangutanMotors4initEv>:

	static inline void init()
	{
		static unsigned char initialized = 0;

		if (!initialized)
    1982:	80 91 4f 01 	lds	r24, 0x014F
    1986:	88 23       	and	r24, r24
    1988:	29 f4       	brne	.+10     	; 0x1994 <_ZN15OrangutanMotors4initEv+0x12>
		{
			initialized = 1;
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	80 93 4f 01 	sts	0x014F, r24
			init2();
    1990:	0e 94 99 0c 	call	0x1932	; 0x1932 <_ZN15OrangutanMotors5init2Ev>
    1994:	08 95       	ret

00001996 <_ZN15OrangutanMotors10setM1SpeedEi>:


// sets the motor speed.  The sign of 'speed' determines the direction
// and the magnitude determines the speed.  limits: -255 <= speed < 255
// |speed| = 255 produces the maximum speed while speed = 0 is full brake.
void OrangutanMotors::setM1Speed(int speed)
    1996:	cf 93       	push	r28
    1998:	df 93       	push	r29
    199a:	ec 01       	movw	r28, r24

	OrangutanX2::setMotor(MOTOR1, IMMEDIATE_DRIVE, speed);

#else

	init();
    199c:	0e 94 c1 0c 	call	0x1982	; 0x1982 <_ZN15OrangutanMotors4initEv>
	unsigned char reverse = 0;

	if (speed < 0)
    19a0:	d7 fd       	sbrc	r29, 7
    19a2:	02 c0       	rjmp	.+4      	; 0x19a8 <_ZN15OrangutanMotors10setM1SpeedEi+0x12>
    19a4:	20 e0       	ldi	r18, 0x00	; 0
    19a6:	04 c0       	rjmp	.+8      	; 0x19b0 <_ZN15OrangutanMotors10setM1SpeedEi+0x1a>
	{
		speed = -speed;	// make speed a positive quantity
    19a8:	d0 95       	com	r29
    19aa:	c1 95       	neg	r28
    19ac:	df 4f       	sbci	r29, 0xFF	; 255
    19ae:	21 e0       	ldi	r18, 0x01	; 1
    19b0:	ce 01       	movw	r24, r28
    19b2:	cf 3f       	cpi	r28, 0xFF	; 255
    19b4:	d1 05       	cpc	r29, r1
    19b6:	19 f0       	breq	.+6      	; 0x19be <_ZN15OrangutanMotors10setM1SpeedEi+0x28>
    19b8:	14 f0       	brlt	.+4      	; 0x19be <_ZN15OrangutanMotors10setM1SpeedEi+0x28>
    19ba:	8f ef       	ldi	r24, 0xFF	; 255
    19bc:	90 e0       	ldi	r25, 0x00	; 0
			OrangutanDigital::setOutput(DIRA, LOW);
		}
	}

#else
	if (reverse)
    19be:	22 23       	and	r18, r18
    19c0:	19 f0       	breq	.+6      	; 0x19c8 <_ZN15OrangutanMotors10setM1SpeedEi+0x32>
	{
		OCR0B = 0;		// hold one driver input high
    19c2:	18 bc       	out	0x28, r1	; 40
		OCR0A = speed;	// pwm the other input
    19c4:	87 bd       	out	0x27, r24	; 39
    19c6:	02 c0       	rjmp	.+4      	; 0x19cc <_ZN15OrangutanMotors10setM1SpeedEi+0x36>
	}
	else	// forward
	{
		OCR0B = speed;	// pwm one driver input
    19c8:	88 bd       	out	0x28, r24	; 40
		OCR0A = 0;		// hold the other driver input high
    19ca:	17 bc       	out	0x27, r1	; 39
	}
#endif // _ORANGUTAN_SVP
#endif // _ORANGUTAN_X2
}
    19cc:	df 91       	pop	r29
    19ce:	cf 91       	pop	r28
    19d0:	08 95       	ret

000019d2 <set_m1_speed>:

#ifdef LIB_POLOLU

extern "C" void set_m1_speed(int speed)
{
	OrangutanMotors::setM1Speed(speed);
    19d2:	0e 94 cb 0c 	call	0x1996	; 0x1996 <_ZN15OrangutanMotors10setM1SpeedEi>
}
    19d6:	08 95       	ret

000019d8 <_ZN15OrangutanMotors10setM2SpeedEi>:
	}
#endif // _ORANGUTAN_SVP
#endif // _ORANGUTAN_X2
}

void OrangutanMotors::setM2Speed(int speed)
    19d8:	cf 93       	push	r28
    19da:	df 93       	push	r29
    19dc:	ec 01       	movw	r28, r24

	OrangutanX2::setMotor(MOTOR2, IMMEDIATE_DRIVE, speed);

#else

	init();
    19de:	0e 94 c1 0c 	call	0x1982	; 0x1982 <_ZN15OrangutanMotors4initEv>
	unsigned char reverse = 0;

	if (speed < 0)
    19e2:	d7 fd       	sbrc	r29, 7
    19e4:	02 c0       	rjmp	.+4      	; 0x19ea <_ZN15OrangutanMotors10setM2SpeedEi+0x12>
    19e6:	20 e0       	ldi	r18, 0x00	; 0
    19e8:	04 c0       	rjmp	.+8      	; 0x19f2 <_ZN15OrangutanMotors10setM2SpeedEi+0x1a>
	{
		speed = -speed;	// make speed a positive quantity
    19ea:	d0 95       	com	r29
    19ec:	c1 95       	neg	r28
    19ee:	df 4f       	sbci	r29, 0xFF	; 255
    19f0:	21 e0       	ldi	r18, 0x01	; 1
    19f2:	ce 01       	movw	r24, r28
    19f4:	cf 3f       	cpi	r28, 0xFF	; 255
    19f6:	d1 05       	cpc	r29, r1
    19f8:	19 f0       	breq	.+6      	; 0x1a00 <_ZN15OrangutanMotors10setM2SpeedEi+0x28>
    19fa:	14 f0       	brlt	.+4      	; 0x1a00 <_ZN15OrangutanMotors10setM2SpeedEi+0x28>
    19fc:	8f ef       	ldi	r24, 0xFF	; 255
    19fe:	90 e0       	ldi	r25, 0x00	; 0
		}
	}

#else

	if (reverse)
    1a00:	22 23       	and	r18, r18
    1a02:	29 f0       	breq	.+10     	; 0x1a0e <_ZN15OrangutanMotors10setM2SpeedEi+0x36>
	{
		OCR2B = 0;		// hold one driver input high
    1a04:	10 92 b4 00 	sts	0x00B4, r1
		OCR2A = speed;	// pwm the other input
    1a08:	80 93 b3 00 	sts	0x00B3, r24
    1a0c:	04 c0       	rjmp	.+8      	; 0x1a16 <_ZN15OrangutanMotors10setM2SpeedEi+0x3e>
	}
	else	// forward
	{
		OCR2B = speed;	// pwm one driver input
    1a0e:	80 93 b4 00 	sts	0x00B4, r24
		OCR2A = 0;		// hold the other driver input high
    1a12:	10 92 b3 00 	sts	0x00B3, r1
	}
	
#endif // _ORANGUTAN_SVP
#endif // _ORANGUTAN_X2
}
    1a16:	df 91       	pop	r29
    1a18:	cf 91       	pop	r28
    1a1a:	08 95       	ret

00001a1c <set_m2_speed>:
	OrangutanMotors::setM1Speed(speed);
}

extern "C" void set_m2_speed(int speed)
{
	OrangutanMotors::setM2Speed(speed);
    1a1c:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <_ZN15OrangutanMotors10setM2SpeedEi>
}
    1a20:	08 95       	ret

00001a22 <_ZN15OrangutanMotors9setSpeedsEii>:
#endif // _ORANGUTAN_SVP
#endif // _ORANGUTAN_X2
}


void OrangutanMotors::setSpeeds(int m1Speed, int m2Speed)
    1a22:	0f 93       	push	r16
    1a24:	1f 93       	push	r17
    1a26:	8b 01       	movw	r16, r22
{
	setM1Speed(m1Speed);
    1a28:	0e 94 cb 0c 	call	0x1996	; 0x1996 <_ZN15OrangutanMotors10setM1SpeedEi>
	setM2Speed(m2Speed);
    1a2c:	c8 01       	movw	r24, r16
    1a2e:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <_ZN15OrangutanMotors10setM2SpeedEi>
}
    1a32:	1f 91       	pop	r17
    1a34:	0f 91       	pop	r16
    1a36:	08 95       	ret

00001a38 <set_motors>:
	OrangutanMotors::setM2Speed(speed);
}

extern "C" void set_motors(int m1, int m2)
{
	OrangutanMotors::setSpeeds(m1, m2);
    1a38:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <_ZN15OrangutanMotors9setSpeedsEii>
}
    1a3c:	08 95       	ret

00001a3e <_ZN20OrangutanPushbuttonsC2Ev>:
// constructor

OrangutanPushbuttons::OrangutanPushbuttons()
{

}
    1a3e:	08 95       	ret

00001a40 <_ZN20OrangutanPushbuttonsC1Ev>:
    1a40:	08 95       	ret

00001a42 <_ZN20OrangutanPushbuttons4initEv>:
inline void OrangutanPushbuttons::init()
{
	{
		static unsigned char initialized = 0;

		if (!initialized)
    1a42:	80 91 50 01 	lds	r24, 0x0150
    1a46:	88 23       	and	r24, r24
    1a48:	91 f4       	brne	.+36     	; 0x1a6e <_ZN20OrangutanPushbuttons4initEv+0x2c>
		{
			initialized = 1;
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	80 93 50 01 	sts	0x0150, r24
}

// initializes I/O pins for use as button inputs
void OrangutanPushbuttons::init2()
{
	BUTTON_DDR &= ~ALL_BUTTONS;		// set the pushbutton pins to be inputs
    1a50:	84 b1       	in	r24, 0x04	; 4
    1a52:	8d 7c       	andi	r24, 0xCD	; 205
    1a54:	84 b9       	out	0x04, r24	; 4
#ifndef _ORANGUTAN_X2
	BUTTON_PORT |= ALL_BUTTONS;		// enable pullups on the pushbutton pins
    1a56:	85 b1       	in	r24, 0x05	; 5
    1a58:	82 63       	ori	r24, 0x32	; 50
    1a5a:	85 b9       	out	0x05, r24	; 5
						  "   pop  r22"     "\n\t"   
						  "   sbiw %0, 1"   "\n\t"
						  "   brne 1b"
						  : "=w" ( microseconds )  
						  : "0" ( microseconds )
						  );  
    1a5c:	85 e0       	ldi	r24, 0x05	; 5
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	6f 93       	push	r22
    1a62:	64 e0       	ldi	r22, 0x04	; 4
    1a64:	6a 95       	dec	r22
    1a66:	f1 f7       	brne	.-4      	; 0x1a64 <_ZN20OrangutanPushbuttons4initEv+0x22>
    1a68:	6f 91       	pop	r22
    1a6a:	01 97       	sbiw	r24, 0x01	; 1
    1a6c:	c9 f7       	brne	.-14     	; 0x1a60 <_ZN20OrangutanPushbuttons4initEv+0x1e>
    1a6e:	08 95       	ret

00001a70 <_ZN20OrangutanPushbuttons5init2Ev>:
}

// initializes I/O pins for use as button inputs
void OrangutanPushbuttons::init2()
{
	BUTTON_DDR &= ~ALL_BUTTONS;		// set the pushbutton pins to be inputs
    1a70:	84 b1       	in	r24, 0x04	; 4
    1a72:	8d 7c       	andi	r24, 0xCD	; 205
    1a74:	84 b9       	out	0x04, r24	; 4
#ifndef _ORANGUTAN_X2
	BUTTON_PORT |= ALL_BUTTONS;		// enable pullups on the pushbutton pins
    1a76:	85 b1       	in	r24, 0x05	; 5
    1a78:	82 63       	ori	r24, 0x32	; 50
    1a7a:	85 b9       	out	0x05, r24	; 5
    1a7c:	85 e0       	ldi	r24, 0x05	; 5
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	6f 93       	push	r22
    1a82:	64 e0       	ldi	r22, 0x04	; 4
    1a84:	6a 95       	dec	r22
    1a86:	f1 f7       	brne	.-4      	; 0x1a84 <_ZN20OrangutanPushbuttons5init2Ev+0x14>
    1a88:	6f 91       	pop	r22
    1a8a:	01 97       	sbiw	r24, 0x01	; 1
    1a8c:	c9 f7       	brne	.-14     	; 0x1a80 <_ZN20OrangutanPushbuttons5init2Ev+0x10>
#endif
	delayMicroseconds(5);			// give pullups time to stabilize
}
    1a8e:	08 95       	ret

00001a90 <_ZN20OrangutanPushbuttons9isPressedEh>:

// returns the value of any specified buttons that are currently pressed, or 0.
// For example, if the top and middle buttons are both pressed, this method
// will return (TOP_BUTTON | MIDDLE_BUTTON).  The argument 'buttons' can
// refer to multiple buttons using the bitwise OR operator |.
unsigned char OrangutanPushbuttons::isPressed(unsigned char buttons)
    1a90:	1f 93       	push	r17
    1a92:	18 2f       	mov	r17, r24
{
	init();		// initialize pushbutton I/O pins if necessary
    1a94:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <_ZN20OrangutanPushbuttons4initEv>
	return BUTTONS_DOWN & buttons;
    1a98:	83 b1       	in	r24, 0x03	; 3
    1a9a:	80 95       	com	r24
}
    1a9c:	81 23       	and	r24, r17
    1a9e:	1f 91       	pop	r17
    1aa0:	08 95       	ret

00001aa2 <button_is_pressed>:
	return OrangutanPushbuttons::waitForButton(buttons);
}

extern "C" unsigned char button_is_pressed(unsigned char buttons)
{
	return OrangutanPushbuttons::isPressed(buttons);
    1aa2:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <_ZN20OrangutanPushbuttons9isPressedEh>
}
    1aa6:	08 95       	ret

00001aa8 <_ZN20OrangutanPushbuttons25getSingleDebouncedReleaseEh>:
// and then up for at least 15 ms before reporting the press.  This function
// handles all necessary debouncing and should be called repeatedly in a loop
// with the same button-mask argument.  The argument 'buttons' can refer to 
// multiple buttons using the bitwise OR operator | or (e.g.
// TOP_BUTTON | MIDDLE_BUTTON) or the value ANY_BUTTON.
unsigned char OrangutanPushbuttons::getSingleDebouncedRelease(unsigned char buttons)
    1aa8:	cf 92       	push	r12
    1aaa:	df 92       	push	r13
    1aac:	ef 92       	push	r14
    1aae:	ff 92       	push	r15
    1ab0:	0f 93       	push	r16
    1ab2:	1f 93       	push	r17
    1ab4:	c8 2e       	mov	r12, r24
{
	static unsigned char state = 0;
	static unsigned long prevTimeMillis = 0;
	static unsigned char mask = 0;
	
	unsigned char buttonsUp = BUTTONS_UP;
    1ab6:	d3 b0       	in	r13, 0x03	; 3
#ifndef OrangutanTime_cpp
// More convenient aliases for the static class functions.
// These aliases are only accessible when the file is included from
// another C++ file.
inline unsigned long get_ms() { return OrangutanTime::ms(); }
inline unsigned long millis() { return OrangutanTime::ms(); }
    1ab8:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <_ZN13OrangutanTime2msEv>
    1abc:	7b 01       	movw	r14, r22
    1abe:	8c 01       	movw	r16, r24
	unsigned long timeMillis = millis();
	
	init();
    1ac0:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <_ZN20OrangutanPushbuttons4initEv>
	switch (state)
    1ac4:	80 91 56 01 	lds	r24, 0x0156
    1ac8:	81 30       	cpi	r24, 0x01	; 1
    1aca:	11 f1       	breq	.+68     	; 0x1b10 <_ZN20OrangutanPushbuttons25getSingleDebouncedReleaseEh+0x68>
    1acc:	81 30       	cpi	r24, 0x01	; 1
    1ace:	38 f0       	brcs	.+14     	; 0x1ade <_ZN20OrangutanPushbuttons25getSingleDebouncedReleaseEh+0x36>
    1ad0:	82 30       	cpi	r24, 0x02	; 2
    1ad2:	09 f4       	brne	.+2      	; 0x1ad6 <_ZN20OrangutanPushbuttons25getSingleDebouncedReleaseEh+0x2e>
    1ad4:	44 c0       	rjmp	.+136    	; 0x1b5e <_ZN20OrangutanPushbuttons25getSingleDebouncedReleaseEh+0xb6>
    1ad6:	83 30       	cpi	r24, 0x03	; 3
    1ad8:	09 f0       	breq	.+2      	; 0x1adc <_ZN20OrangutanPushbuttons25getSingleDebouncedReleaseEh+0x34>
    1ada:	8b c0       	rjmp	.+278    	; 0x1bf2 <_ZN20OrangutanPushbuttons25getSingleDebouncedReleaseEh+0x14a>
    1adc:	66 c0       	rjmp	.+204    	; 0x1baa <_ZN20OrangutanPushbuttons25getSingleDebouncedReleaseEh+0x102>
	{
		case 0:
			if (~buttonsUp & buttons)				// if one of the specified buttons is down
    1ade:	2c 2d       	mov	r18, r12
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	8d 2d       	mov	r24, r13
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	80 95       	com	r24
    1ae8:	90 95       	com	r25
    1aea:	28 23       	and	r18, r24
    1aec:	39 23       	and	r19, r25
    1aee:	23 2b       	or	r18, r19
    1af0:	09 f4       	brne	.+2      	; 0x1af4 <_ZN20OrangutanPushbuttons25getSingleDebouncedReleaseEh+0x4c>
    1af2:	7f c0       	rjmp	.+254    	; 0x1bf2 <_ZN20OrangutanPushbuttons25getSingleDebouncedReleaseEh+0x14a>
			{
				mask = ~buttonsUp & buttons;		// mask becomes all of masked down buttons
    1af4:	d0 94       	com	r13
    1af6:	dc 20       	and	r13, r12
    1af8:	d0 92 51 01 	sts	0x0151, r13
				prevTimeMillis = timeMillis;
    1afc:	e0 92 52 01 	sts	0x0152, r14
    1b00:	f0 92 53 01 	sts	0x0153, r15
    1b04:	00 93 54 01 	sts	0x0154, r16
    1b08:	10 93 55 01 	sts	0x0155, r17
				state = 1;
    1b0c:	81 e0       	ldi	r24, 0x01	; 1
    1b0e:	6f c0       	rjmp	.+222    	; 0x1bee <_ZN20OrangutanPushbuttons25getSingleDebouncedReleaseEh+0x146>
			}
			break;
			
		case 1:
			if (timeMillis - prevTimeMillis >= 15)	// if 15 ms or longer has elapsed
    1b10:	80 91 52 01 	lds	r24, 0x0152
    1b14:	90 91 53 01 	lds	r25, 0x0153
    1b18:	a0 91 54 01 	lds	r26, 0x0154
    1b1c:	b0 91 55 01 	lds	r27, 0x0155
    1b20:	e8 1a       	sub	r14, r24
    1b22:	f9 0a       	sbc	r15, r25
    1b24:	0a 0b       	sbc	r16, r26
    1b26:	1b 0b       	sbc	r17, r27
    1b28:	8f e0       	ldi	r24, 0x0F	; 15
    1b2a:	e8 16       	cp	r14, r24
    1b2c:	f1 04       	cpc	r15, r1
    1b2e:	01 05       	cpc	r16, r1
    1b30:	11 05       	cpc	r17, r1
    1b32:	08 f4       	brcc	.+2      	; 0x1b36 <_ZN20OrangutanPushbuttons25getSingleDebouncedReleaseEh+0x8e>
    1b34:	5e c0       	rjmp	.+188    	; 0x1bf2 <_ZN20OrangutanPushbuttons25getSingleDebouncedReleaseEh+0x14a>
			{
				if (~buttonsUp & mask)				// and if a masked button is still down
    1b36:	40 91 51 01 	lds	r20, 0x0151
    1b3a:	8d 2d       	mov	r24, r13
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	80 95       	com	r24
    1b40:	90 95       	com	r25
    1b42:	24 2f       	mov	r18, r20
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	82 23       	and	r24, r18
    1b48:	93 23       	and	r25, r19
    1b4a:	89 2b       	or	r24, r25
    1b4c:	59 f1       	breq	.+86     	; 0x1ba4 <_ZN20OrangutanPushbuttons25getSingleDebouncedReleaseEh+0xfc>
				{
					state = 2;						// proceed to next state
    1b4e:	82 e0       	ldi	r24, 0x02	; 2
    1b50:	80 93 56 01 	sts	0x0156, r24
					mask = ~buttonsUp & mask;		// new mask becomes all of masked down buttons
    1b54:	d0 94       	com	r13
    1b56:	d4 22       	and	r13, r20
    1b58:	d0 92 51 01 	sts	0x0151, r13
    1b5c:	4a c0       	rjmp	.+148    	; 0x1bf2 <_ZN20OrangutanPushbuttons25getSingleDebouncedReleaseEh+0x14a>
				}
			}
			break;
			
		case 2:
			if (buttonsUp & mask)					// if a masked button is now up
    1b5e:	40 91 51 01 	lds	r20, 0x0151
    1b62:	64 2f       	mov	r22, r20
    1b64:	70 e0       	ldi	r23, 0x00	; 0
    1b66:	2d 2d       	mov	r18, r13
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	cb 01       	movw	r24, r22
    1b6c:	82 23       	and	r24, r18
    1b6e:	93 23       	and	r25, r19
    1b70:	89 2b       	or	r24, r25
    1b72:	79 f0       	breq	.+30     	; 0x1b92 <_ZN20OrangutanPushbuttons25getSingleDebouncedReleaseEh+0xea>
			{
				state = 3;							// proceed to next state
    1b74:	83 e0       	ldi	r24, 0x03	; 3
    1b76:	80 93 56 01 	sts	0x0156, r24
				mask = buttonsUp & mask;			// new mask becomes all of masked up buttons
    1b7a:	4d 21       	and	r20, r13
    1b7c:	40 93 51 01 	sts	0x0151, r20
				prevTimeMillis = timeMillis;
    1b80:	e0 92 52 01 	sts	0x0152, r14
    1b84:	f0 92 53 01 	sts	0x0153, r15
    1b88:	00 93 54 01 	sts	0x0154, r16
    1b8c:	10 93 55 01 	sts	0x0155, r17
    1b90:	30 c0       	rjmp	.+96     	; 0x1bf2 <_ZN20OrangutanPushbuttons25getSingleDebouncedReleaseEh+0x14a>
			}
			else if (mask != (~buttonsUp & buttons))	// if our mask becomes inaccurate
    1b92:	8c 2d       	mov	r24, r12
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	20 95       	com	r18
    1b98:	30 95       	com	r19
    1b9a:	82 23       	and	r24, r18
    1b9c:	93 23       	and	r25, r19
    1b9e:	68 17       	cp	r22, r24
    1ba0:	79 07       	cpc	r23, r25
    1ba2:	39 f1       	breq	.+78     	; 0x1bf2 <_ZN20OrangutanPushbuttons25getSingleDebouncedReleaseEh+0x14a>
			{
				state = 0;							// go back to the initial state
    1ba4:	10 92 56 01 	sts	0x0156, r1
    1ba8:	24 c0       	rjmp	.+72     	; 0x1bf2 <_ZN20OrangutanPushbuttons25getSingleDebouncedReleaseEh+0x14a>
			break;

			break;
			
		case 3:
			if (timeMillis - prevTimeMillis >= 15)	// if 15 ms or longer has elapsed
    1baa:	80 91 52 01 	lds	r24, 0x0152
    1bae:	90 91 53 01 	lds	r25, 0x0153
    1bb2:	a0 91 54 01 	lds	r26, 0x0154
    1bb6:	b0 91 55 01 	lds	r27, 0x0155
    1bba:	e8 1a       	sub	r14, r24
    1bbc:	f9 0a       	sbc	r15, r25
    1bbe:	0a 0b       	sbc	r16, r26
    1bc0:	1b 0b       	sbc	r17, r27
    1bc2:	8f e0       	ldi	r24, 0x0F	; 15
    1bc4:	e8 16       	cp	r14, r24
    1bc6:	f1 04       	cpc	r15, r1
    1bc8:	01 05       	cpc	r16, r1
    1bca:	11 05       	cpc	r17, r1
    1bcc:	90 f0       	brcs	.+36     	; 0x1bf2 <_ZN20OrangutanPushbuttons25getSingleDebouncedReleaseEh+0x14a>
			{
				if (buttonsUp & mask)				// and if a masked button is still up
    1bce:	40 91 51 01 	lds	r20, 0x0151
    1bd2:	84 2f       	mov	r24, r20
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	2d 2d       	mov	r18, r13
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	82 23       	and	r24, r18
    1bdc:	93 23       	and	r25, r19
    1bde:	89 2b       	or	r24, r25
    1be0:	29 f0       	breq	.+10     	; 0x1bec <_ZN20OrangutanPushbuttons25getSingleDebouncedReleaseEh+0x144>
				{
					state = 0;						// next state becomes initial state
    1be2:	10 92 56 01 	sts	0x0156, r1
					return buttonsUp & mask;		// return masked up buttons
    1be6:	84 2f       	mov	r24, r20
    1be8:	8d 21       	and	r24, r13
    1bea:	04 c0       	rjmp	.+8      	; 0x1bf4 <_ZN20OrangutanPushbuttons25getSingleDebouncedReleaseEh+0x14c>
				}
				else
				{
					state = 2;						// go back to previous state
    1bec:	82 e0       	ldi	r24, 0x02	; 2
    1bee:	80 93 56 01 	sts	0x0156, r24
    1bf2:	80 e0       	ldi	r24, 0x00	; 0
			}
			break;
	}
	
	return 0;
}
    1bf4:	1f 91       	pop	r17
    1bf6:	0f 91       	pop	r16
    1bf8:	ff 90       	pop	r15
    1bfa:	ef 90       	pop	r14
    1bfc:	df 90       	pop	r13
    1bfe:	cf 90       	pop	r12
    1c00:	08 95       	ret

00001c02 <get_single_debounced_button_release>:
	return OrangutanPushbuttons::getSingleDebouncedPress(buttons);
}

extern "C" unsigned char get_single_debounced_button_release(unsigned char buttons)
{
	return OrangutanPushbuttons::getSingleDebouncedRelease(buttons);
    1c02:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <_ZN20OrangutanPushbuttons25getSingleDebouncedReleaseEh>
}
    1c06:	08 95       	ret

00001c08 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh>:
// and then down for at least 15 ms before reporting the press.  This function
// handles all necessary debouncing and should be called repeatedly in a loop
// with the same button-mask argument.  The argument 'buttons' can refer to 
// multiple buttons using the bitwise OR operator | or (e.g.
// TOP_BUTTON | MIDDLE_BUTTON) or the value ANY_BUTTON.
unsigned char OrangutanPushbuttons::getSingleDebouncedPress(unsigned char buttons)
    1c08:	cf 92       	push	r12
    1c0a:	df 92       	push	r13
    1c0c:	ef 92       	push	r14
    1c0e:	ff 92       	push	r15
    1c10:	0f 93       	push	r16
    1c12:	1f 93       	push	r17
    1c14:	c8 2e       	mov	r12, r24
{
	static unsigned char state = 0;
	static unsigned long prevTimeMillis = 0;
	static unsigned char mask = 0;
	
	unsigned char buttonsDown = BUTTONS_DOWN;
    1c16:	d3 b0       	in	r13, 0x03	; 3
    1c18:	d0 94       	com	r13
    1c1a:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <_ZN13OrangutanTime2msEv>
    1c1e:	7b 01       	movw	r14, r22
    1c20:	8c 01       	movw	r16, r24
	unsigned long timeMillis = millis();
	
	init();
    1c22:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <_ZN20OrangutanPushbuttons4initEv>
	switch (state)
    1c26:	80 91 5c 01 	lds	r24, 0x015C
    1c2a:	81 30       	cpi	r24, 0x01	; 1
    1c2c:	11 f1       	breq	.+68     	; 0x1c72 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x6a>
    1c2e:	81 30       	cpi	r24, 0x01	; 1
    1c30:	38 f0       	brcs	.+14     	; 0x1c40 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x38>
    1c32:	82 30       	cpi	r24, 0x02	; 2
    1c34:	09 f4       	brne	.+2      	; 0x1c38 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x30>
    1c36:	44 c0       	rjmp	.+136    	; 0x1cc0 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0xb8>
    1c38:	83 30       	cpi	r24, 0x03	; 3
    1c3a:	09 f0       	breq	.+2      	; 0x1c3e <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x36>
    1c3c:	8b c0       	rjmp	.+278    	; 0x1d54 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x14c>
    1c3e:	66 c0       	rjmp	.+204    	; 0x1d0c <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x104>
	{
		case 0:
			if (~buttonsDown & buttons)				// if one of the specified buttons is up
    1c40:	2c 2d       	mov	r18, r12
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	8d 2d       	mov	r24, r13
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	80 95       	com	r24
    1c4a:	90 95       	com	r25
    1c4c:	28 23       	and	r18, r24
    1c4e:	39 23       	and	r19, r25
    1c50:	23 2b       	or	r18, r19
    1c52:	09 f4       	brne	.+2      	; 0x1c56 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x4e>
    1c54:	7f c0       	rjmp	.+254    	; 0x1d54 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x14c>
			{
				mask = ~buttonsDown & buttons;		// mask becomes all of masked up buttons
    1c56:	d0 94       	com	r13
    1c58:	dc 20       	and	r13, r12
    1c5a:	d0 92 57 01 	sts	0x0157, r13
				prevTimeMillis = timeMillis;
    1c5e:	e0 92 58 01 	sts	0x0158, r14
    1c62:	f0 92 59 01 	sts	0x0159, r15
    1c66:	00 93 5a 01 	sts	0x015A, r16
    1c6a:	10 93 5b 01 	sts	0x015B, r17
				state = 1;
    1c6e:	81 e0       	ldi	r24, 0x01	; 1
    1c70:	6f c0       	rjmp	.+222    	; 0x1d50 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x148>
			}
			break;
			
		case 1:
			if (timeMillis - prevTimeMillis >= 15)	// if 15 ms or longer has elapsed
    1c72:	80 91 58 01 	lds	r24, 0x0158
    1c76:	90 91 59 01 	lds	r25, 0x0159
    1c7a:	a0 91 5a 01 	lds	r26, 0x015A
    1c7e:	b0 91 5b 01 	lds	r27, 0x015B
    1c82:	e8 1a       	sub	r14, r24
    1c84:	f9 0a       	sbc	r15, r25
    1c86:	0a 0b       	sbc	r16, r26
    1c88:	1b 0b       	sbc	r17, r27
    1c8a:	8f e0       	ldi	r24, 0x0F	; 15
    1c8c:	e8 16       	cp	r14, r24
    1c8e:	f1 04       	cpc	r15, r1
    1c90:	01 05       	cpc	r16, r1
    1c92:	11 05       	cpc	r17, r1
    1c94:	08 f4       	brcc	.+2      	; 0x1c98 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x90>
    1c96:	5e c0       	rjmp	.+188    	; 0x1d54 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x14c>
			{
				if (~buttonsDown & mask)			// and if a masked button is still up
    1c98:	40 91 57 01 	lds	r20, 0x0157
    1c9c:	8d 2d       	mov	r24, r13
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	80 95       	com	r24
    1ca2:	90 95       	com	r25
    1ca4:	24 2f       	mov	r18, r20
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	82 23       	and	r24, r18
    1caa:	93 23       	and	r25, r19
    1cac:	89 2b       	or	r24, r25
    1cae:	59 f1       	breq	.+86     	; 0x1d06 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0xfe>
				{
					state = 2;						// proceed to next state
    1cb0:	82 e0       	ldi	r24, 0x02	; 2
    1cb2:	80 93 5c 01 	sts	0x015C, r24
					mask = ~buttonsDown & mask;		// new mask becomes all of masked up buttons
    1cb6:	d0 94       	com	r13
    1cb8:	d4 22       	and	r13, r20
    1cba:	d0 92 57 01 	sts	0x0157, r13
    1cbe:	4a c0       	rjmp	.+148    	; 0x1d54 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x14c>
				}
			}
			break;
			
		case 2:
			if (buttonsDown & mask)					// if a masked button is now down
    1cc0:	60 91 57 01 	lds	r22, 0x0157
    1cc4:	2d 2d       	mov	r18, r13
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	46 2f       	mov	r20, r22
    1cca:	50 e0       	ldi	r21, 0x00	; 0
    1ccc:	c9 01       	movw	r24, r18
    1cce:	84 23       	and	r24, r20
    1cd0:	95 23       	and	r25, r21
    1cd2:	89 2b       	or	r24, r25
    1cd4:	79 f0       	breq	.+30     	; 0x1cf4 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0xec>
			{
				state = 3;							// proceed to next state
    1cd6:	83 e0       	ldi	r24, 0x03	; 3
    1cd8:	80 93 5c 01 	sts	0x015C, r24
				mask = buttonsDown & mask;			// new mask becomes all of masked down buttons
    1cdc:	d6 22       	and	r13, r22
    1cde:	d0 92 57 01 	sts	0x0157, r13
				prevTimeMillis = timeMillis;
    1ce2:	e0 92 58 01 	sts	0x0158, r14
    1ce6:	f0 92 59 01 	sts	0x0159, r15
    1cea:	00 93 5a 01 	sts	0x015A, r16
    1cee:	10 93 5b 01 	sts	0x015B, r17
    1cf2:	30 c0       	rjmp	.+96     	; 0x1d54 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x14c>
			}
			else if (mask != (~buttonsDown & buttons))	// if our mask becomes inaccurate
    1cf4:	8c 2d       	mov	r24, r12
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	20 95       	com	r18
    1cfa:	30 95       	com	r19
    1cfc:	82 23       	and	r24, r18
    1cfe:	93 23       	and	r25, r19
    1d00:	48 17       	cp	r20, r24
    1d02:	59 07       	cpc	r21, r25
    1d04:	39 f1       	breq	.+78     	; 0x1d54 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x14c>
			{
				state = 0;							// go back to the initial state
    1d06:	10 92 5c 01 	sts	0x015C, r1
    1d0a:	24 c0       	rjmp	.+72     	; 0x1d54 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x14c>
			}
			break;
			
		case 3:
			if (timeMillis - prevTimeMillis >= 15)	// if 15 ms or longer has elapsed
    1d0c:	80 91 58 01 	lds	r24, 0x0158
    1d10:	90 91 59 01 	lds	r25, 0x0159
    1d14:	a0 91 5a 01 	lds	r26, 0x015A
    1d18:	b0 91 5b 01 	lds	r27, 0x015B
    1d1c:	e8 1a       	sub	r14, r24
    1d1e:	f9 0a       	sbc	r15, r25
    1d20:	0a 0b       	sbc	r16, r26
    1d22:	1b 0b       	sbc	r17, r27
    1d24:	8f e0       	ldi	r24, 0x0F	; 15
    1d26:	e8 16       	cp	r14, r24
    1d28:	f1 04       	cpc	r15, r1
    1d2a:	01 05       	cpc	r16, r1
    1d2c:	11 05       	cpc	r17, r1
    1d2e:	90 f0       	brcs	.+36     	; 0x1d54 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x14c>
			{
				if (buttonsDown & mask)				// and if a masked button is still down
    1d30:	40 91 57 01 	lds	r20, 0x0157
    1d34:	8d 2d       	mov	r24, r13
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	24 2f       	mov	r18, r20
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	82 23       	and	r24, r18
    1d3e:	93 23       	and	r25, r19
    1d40:	89 2b       	or	r24, r25
    1d42:	29 f0       	breq	.+10     	; 0x1d4e <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x146>
				{
					state = 0;						// next state becomes initial state
    1d44:	10 92 5c 01 	sts	0x015C, r1
					return buttonsDown & mask;		// return masked down buttons
    1d48:	8d 2d       	mov	r24, r13
    1d4a:	84 23       	and	r24, r20
    1d4c:	04 c0       	rjmp	.+8      	; 0x1d56 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh+0x14e>
				}
				else
				{
					state = 2;						// go back to previous state
    1d4e:	82 e0       	ldi	r24, 0x02	; 2
    1d50:	80 93 5c 01 	sts	0x015C, r24
    1d54:	80 e0       	ldi	r24, 0x00	; 0
			}
			break;
	}
	
	return 0;
}
    1d56:	1f 91       	pop	r17
    1d58:	0f 91       	pop	r16
    1d5a:	ff 90       	pop	r15
    1d5c:	ef 90       	pop	r14
    1d5e:	df 90       	pop	r13
    1d60:	cf 90       	pop	r12
    1d62:	08 95       	ret

00001d64 <get_single_debounced_button_press>:
	return OrangutanPushbuttons::isPressed(buttons);
}

extern "C" unsigned char get_single_debounced_button_press(unsigned char buttons)
{
	return OrangutanPushbuttons::getSingleDebouncedPress(buttons);
    1d64:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <_ZN20OrangutanPushbuttons23getSingleDebouncedPressEh>
}
    1d68:	08 95       	ret

00001d6a <_ZN20OrangutanPushbuttons14waitForReleaseEh>:
// execution will return from this method.  The argument 'buttons' can
// refer to multiple buttons using the bitwise OR operator |.  The
// return value is the ID of the button that was released.  Note that
// this method takes care of button debouncing.
// Example: waitForRelease(TOP_BUTTON | BOTTOM_BUTTON);
unsigned char OrangutanPushbuttons::waitForRelease(unsigned char buttons)
    1d6a:	1f 93       	push	r17
    1d6c:	cf 93       	push	r28
    1d6e:	df 93       	push	r29
    1d70:	18 2f       	mov	r17, r24
{
	init();		// initialize pushbutton I/O pins if necessary
    1d72:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <_ZN20OrangutanPushbuttons4initEv>
	do
	{
		while (!(BUTTONS_UP & buttons))	// wait for a button to be released
    1d76:	c1 2f       	mov	r28, r17
    1d78:	d0 e0       	ldi	r29, 0x00	; 0
    1d7a:	83 b1       	in	r24, 0x03	; 3
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	8c 23       	and	r24, r28
    1d80:	9d 23       	and	r25, r29
    1d82:	89 2b       	or	r24, r25
    1d84:	d1 f3       	breq	.-12     	; 0x1d7a <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x10>

inline void delay(unsigned int milliseconds) { OrangutanTime::delayMilliseconds(milliseconds); }
    1d86:	8a e0       	ldi	r24, 0x0A	; 10
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <_ZN13OrangutanTime17delayMillisecondsEj>
// this method takes care of button debouncing.
// Example: waitForRelease(TOP_BUTTON | BOTTOM_BUTTON);
unsigned char OrangutanPushbuttons::waitForRelease(unsigned char buttons)
{
	init();		// initialize pushbutton I/O pins if necessary
	do
    1d8e:	83 b1       	in	r24, 0x03	; 3
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	8c 23       	and	r24, r28
    1d94:	9d 23       	and	r25, r29
    1d96:	89 2b       	or	r24, r25
    1d98:	81 f3       	breq	.-32     	; 0x1d7a <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x10>
		while (!(BUTTONS_UP & buttons))	// wait for a button to be released
			;
			delay(10);						// debounce the button release
	}
	while (!(BUTTONS_UP & buttons));		// if button isn't still released, loop
	return BUTTONS_UP & buttons;			// return the released button(s)
    1d9a:	83 b1       	in	r24, 0x03	; 3
}
    1d9c:	81 23       	and	r24, r17
    1d9e:	df 91       	pop	r29
    1da0:	cf 91       	pop	r28
    1da2:	1f 91       	pop	r17
    1da4:	08 95       	ret

00001da6 <wait_for_button_release>:
	return OrangutanPushbuttons::waitForPress(buttons);
}

extern "C" unsigned char wait_for_button_release(unsigned char buttons)
{
	return OrangutanPushbuttons::waitForRelease(buttons);
    1da6:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <_ZN20OrangutanPushbuttons14waitForReleaseEh>
}
    1daa:	08 95       	ret

00001dac <_ZN20OrangutanPushbuttons12waitForPressEh>:
// execution will return from this method.  The argument 'buttons' can
// refer to multiple buttons using the bitwise OR operator |.  The
// return value is the ID of the button that was pressed.  Note that
// this method takes care of button debouncing.
// Example: waitForPress(TOP_BUTTON | BOTTOM_BUTTON);
unsigned char OrangutanPushbuttons::waitForPress(unsigned char buttons)
    1dac:	1f 93       	push	r17
    1dae:	cf 93       	push	r28
    1db0:	df 93       	push	r29
    1db2:	18 2f       	mov	r17, r24
{
	init();		// initialize pushbutton I/O pins if necessary
    1db4:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <_ZN20OrangutanPushbuttons4initEv>
	do
	{
		while (!(BUTTONS_DOWN & buttons))	// wait for a button to be pressed
    1db8:	c1 2f       	mov	r28, r17
    1dba:	d0 e0       	ldi	r29, 0x00	; 0
    1dbc:	83 b1       	in	r24, 0x03	; 3
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	80 95       	com	r24
    1dc2:	90 95       	com	r25
    1dc4:	8c 23       	and	r24, r28
    1dc6:	9d 23       	and	r25, r29
    1dc8:	89 2b       	or	r24, r25
    1dca:	c1 f3       	breq	.-16     	; 0x1dbc <_ZN20OrangutanPushbuttons12waitForPressEh+0x10>
    1dcc:	8a e0       	ldi	r24, 0x0A	; 10
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <_ZN13OrangutanTime17delayMillisecondsEj>
// this method takes care of button debouncing.
// Example: waitForPress(TOP_BUTTON | BOTTOM_BUTTON);
unsigned char OrangutanPushbuttons::waitForPress(unsigned char buttons)
{
	init();		// initialize pushbutton I/O pins if necessary
	do
    1dd4:	83 b1       	in	r24, 0x03	; 3
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	80 95       	com	r24
    1dda:	90 95       	com	r25
    1ddc:	8c 23       	and	r24, r28
    1dde:	9d 23       	and	r25, r29
    1de0:	89 2b       	or	r24, r25
    1de2:	61 f3       	breq	.-40     	; 0x1dbc <_ZN20OrangutanPushbuttons12waitForPressEh+0x10>
		while (!(BUTTONS_DOWN & buttons))	// wait for a button to be pressed
			;
		delay(10);						// debounce the button press
	}
	while (!(BUTTONS_DOWN & buttons));		// if button isn't still pressed, loop
	return BUTTONS_DOWN & buttons;			// return the pressed button(s)
    1de4:	83 b1       	in	r24, 0x03	; 3
    1de6:	80 95       	com	r24
}
    1de8:	81 23       	and	r24, r17
    1dea:	df 91       	pop	r29
    1dec:	cf 91       	pop	r28
    1dee:	1f 91       	pop	r17
    1df0:	08 95       	ret

00001df2 <_ZN20OrangutanPushbuttons13waitForButtonEh>:
// at which point execution will return from this method.  The argument
// 'buttons' can refer to multiple buttons using the bitwise OR operator |.
// The return value is the ID of the button that was pressed and released.
// Note that this method takes care of button debouncing.
// Example: waitForButton(TOP_BUTTON | BOTTOM_BUTTON);
unsigned char OrangutanPushbuttons::waitForButton(unsigned char buttons)
    1df2:	1f 93       	push	r17
{
  unsigned char pressedButton = waitForPress(buttons);
    1df4:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <_ZN20OrangutanPushbuttons12waitForPressEh>
    1df8:	18 2f       	mov	r17, r24
  waitForRelease(pressedButton);
    1dfa:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <_ZN20OrangutanPushbuttons14waitForReleaseEh>
  return pressedButton;
}
    1dfe:	81 2f       	mov	r24, r17
    1e00:	1f 91       	pop	r17
    1e02:	08 95       	ret

00001e04 <wait_for_button>:
	return OrangutanPushbuttons::waitForRelease(buttons);
}

extern "C" unsigned char wait_for_button(unsigned char buttons)
{
	return OrangutanPushbuttons::waitForButton(buttons);
    1e04:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <_ZN20OrangutanPushbuttons13waitForButtonEh>
}
    1e08:	08 95       	ret

00001e0a <wait_for_button_press>:

#include "../OrangutanTime/OrangutanTime.h"	// provides access to delay routines

extern "C" unsigned char wait_for_button_press(unsigned char buttons)
{
	return OrangutanPushbuttons::waitForPress(buttons);
    1e0a:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <_ZN20OrangutanPushbuttons12waitForPressEh>
}
    1e0e:	08 95       	ret

00001e10 <_ZN18OrangutanResourcesC2Ev>:

// constructor

OrangutanResources::OrangutanResources()
{
}
    1e10:	08 95       	ret

00001e12 <_ZN18OrangutanResourcesC1Ev>:
    1e12:	08 95       	ret

00001e14 <_ZN18OrangutanResources10getFreeRAMEv>:

extern int __bss_end; // the top of static variable memory
extern void *__brkval; // the top of memory used by malloc()

int OrangutanResources::getFreeRAM()
    1e14:	a2 e0       	ldi	r26, 0x02	; 2
    1e16:	b0 e0       	ldi	r27, 0x00	; 0
    1e18:	e0 e1       	ldi	r30, 0x10	; 16
    1e1a:	ff e0       	ldi	r31, 0x0F	; 15
    1e1c:	0c 94 c0 10 	jmp	0x2180	; 0x2180 <__prologue_saves__+0x20>
{
	// A local variable gives us the location of the
	// stack pointer:
	int free_memory;

	if((int)__brkval == 0) // if malloc is not in use
    1e20:	20 91 6b 01 	lds	r18, 0x016B
    1e24:	30 91 6c 01 	lds	r19, 0x016C
    1e28:	ce 01       	movw	r24, r28
    1e2a:	01 96       	adiw	r24, 0x01	; 1
    1e2c:	21 15       	cp	r18, r1
    1e2e:	31 05       	cpc	r19, r1
    1e30:	19 f4       	brne	.+6      	; 0x1e38 <_ZN18OrangutanResources10getFreeRAMEv+0x24>
		free_memory = ((int)&free_memory) - ((int)&__bss_end);
    1e32:	85 57       	subi	r24, 0x75	; 117
    1e34:	91 40       	sbci	r25, 0x01	; 1
    1e36:	02 c0       	rjmp	.+4      	; 0x1e3c <_ZN18OrangutanResources10getFreeRAMEv+0x28>
	else
		free_memory = ((int)&free_memory) - ((int)__brkval);
    1e38:	82 1b       	sub	r24, r18
    1e3a:	93 0b       	sbc	r25, r19
    1e3c:	9a 83       	std	Y+2, r25	; 0x02
    1e3e:	89 83       	std	Y+1, r24	; 0x01

	return free_memory;
}
    1e40:	89 81       	ldd	r24, Y+1	; 0x01
    1e42:	9a 81       	ldd	r25, Y+2	; 0x02
    1e44:	22 96       	adiw	r28, 0x02	; 2
    1e46:	e2 e0       	ldi	r30, 0x02	; 2
    1e48:	0c 94 dc 10 	jmp	0x21b8	; 0x21b8 <__epilogue_restores__+0x20>

00001e4c <get_free_ram>:

#ifdef LIB_POLOLU

extern "C" int get_free_ram()
{
	return OrangutanResources::getFreeRAM();
    1e4c:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <_ZN18OrangutanResources10getFreeRAMEv>
}
    1e50:	08 95       	ret

00001e52 <__vector_9>:
		"pop r25"					"\n\t"	// restore the registers we used in this ISR
		"pop r24"					"\n\t"
		"pop r2"					"\n\t"

		"reti"						"\n\t"	// return
		);
    1e52:	2f 92       	push	r2
    1e54:	8f 93       	push	r24
    1e56:	9f 93       	push	r25
    1e58:	2f b6       	in	r2, 0x3f	; 63
    1e5a:	80 91 61 01 	lds	r24, 0x0161
    1e5e:	90 91 62 01 	lds	r25, 0x0162
    1e62:	01 96       	adiw	r24, 0x01	; 1
    1e64:	80 93 61 01 	sts	0x0161, r24
    1e68:	90 93 62 01 	sts	0x0162, r25
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	80 91 63 01 	lds	r24, 0x0163
    1e72:	89 1f       	adc	r24, r25
    1e74:	80 93 63 01 	sts	0x0163, r24
    1e78:	90 91 69 01 	lds	r25, 0x0169
    1e7c:	9c 5f       	subi	r25, 0xFC	; 252
    1e7e:	90 93 69 01 	sts	0x0169, r25
    1e82:	80 91 68 01 	lds	r24, 0x0168
    1e86:	80 51       	subi	r24, 0x10	; 16
    1e88:	97 42       	sbci	r25, 0x27	; 39
    1e8a:	c0 f0       	brcs	.+48     	; 0x1ebc <end>
    1e8c:	90 93 69 01 	sts	0x0169, r25
    1e90:	80 93 68 01 	sts	0x0168, r24
    1e94:	80 91 64 01 	lds	r24, 0x0164
    1e98:	90 91 65 01 	lds	r25, 0x0165
    1e9c:	01 96       	adiw	r24, 0x01	; 1
    1e9e:	80 93 64 01 	sts	0x0164, r24
    1ea2:	90 93 65 01 	sts	0x0165, r25
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	80 91 66 01 	lds	r24, 0x0166
    1eac:	89 1f       	adc	r24, r25
    1eae:	80 93 66 01 	sts	0x0166, r24
    1eb2:	80 91 67 01 	lds	r24, 0x0167
    1eb6:	89 1f       	adc	r24, r25
    1eb8:	80 93 67 01 	sts	0x0167, r24

00001ebc <end>:
    1ebc:	2f be       	out	0x3f, r2	; 63
    1ebe:	9f 91       	pop	r25
    1ec0:	8f 91       	pop	r24
    1ec2:	2f 90       	pop	r2
    1ec4:	18 95       	reti

00001ec6 <delay_ms>:
						  "   pop  r22"     "\n\t"   
						  "   sbiw %0, 1"   "\n\t"
						  "   brne 1b"
						  : "=w" ( microseconds )  
						  : "0" ( microseconds )
						  );  
    1ec6:	28 ee       	ldi	r18, 0xE8	; 232
    1ec8:	33 e0       	ldi	r19, 0x03	; 3
    1eca:	09 c0       	rjmp	.+18     	; 0x1ede <delay_ms+0x18>
    1ecc:	f9 01       	movw	r30, r18
    1ece:	6f 93       	push	r22
    1ed0:	64 e0       	ldi	r22, 0x04	; 4
    1ed2:	6a 95       	dec	r22
    1ed4:	f1 f7       	brne	.-4      	; 0x1ed2 <delay_ms+0xc>
    1ed6:	6f 91       	pop	r22
    1ed8:	31 97       	sbiw	r30, 0x01	; 1
    1eda:	c9 f7       	brne	.-14     	; 0x1ece <delay_ms+0x8>
    1edc:	01 97       	sbiw	r24, 0x01	; 1
	return value;
}

void OrangutanTime::delayMilliseconds(unsigned int milliseconds)
{
	while (milliseconds--)
    1ede:	00 97       	sbiw	r24, 0x00	; 0
    1ee0:	a9 f7       	brne	.-22     	; 0x1ecc <delay_ms+0x6>
	unsigned long ticks_to_microseconds(unsigned long numTicks)
	{
		return OrangutanTime::ticksToMicroseconds(numTicks);
	}
	unsigned long get_ms() { return OrangutanTime::ms(); }
	void delay_ms(unsigned int milliseconds) { OrangutanTime::delayMilliseconds(milliseconds); }
    1ee2:	08 95       	ret

00001ee4 <_ZN13OrangutanTime19ticksToMicrosecondsEm>:
// this function can be used on a time differential to find out how many microseconds have
// elapsed over a period.  For example:
// unsigned long ticks = OrangutanTime::ticks();
// ... (do something)
// unsigned long elapsedMicroseconds = OrangutanTime::ticksToMicroseconds(OrangutanTime::ticks() - ticks);
unsigned long OrangutanTime::ticksToMicroseconds(unsigned long numTicks)
    1ee4:	6f 5f       	subi	r22, 0xFF	; 255
    1ee6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ee8:	8f 4f       	sbci	r24, 0xFF	; 255
    1eea:	9f 4f       	sbci	r25, 0xFF	; 255
    1eec:	66 0f       	add	r22, r22
    1eee:	77 1f       	adc	r23, r23
    1ef0:	88 1f       	adc	r24, r24
    1ef2:	99 1f       	adc	r25, r25
    1ef4:	25 e0       	ldi	r18, 0x05	; 5
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	40 e0       	ldi	r20, 0x00	; 0
    1efa:	50 e0       	ldi	r21, 0x00	; 0
    1efc:	0e 94 73 10 	call	0x20e6	; 0x20e6 <__udivmodsi4>
    1f00:	ca 01       	movw	r24, r20
{
	return (numTicks * 2 + 2) / 5;
}
    1f02:	b9 01       	movw	r22, r18
    1f04:	08 95       	ret

00001f06 <ticks_to_microseconds>:

extern "C" {
	unsigned long get_ticks() { return OrangutanTime::ticks(); }
	unsigned long ticks_to_microseconds(unsigned long numTicks)
	{
		return OrangutanTime::ticksToMicroseconds(numTicks);
    1f06:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <_ZN13OrangutanTime19ticksToMicrosecondsEm>
	}
    1f0a:	08 95       	ret

00001f0c <_ZN13OrangutanTime17delayMillisecondsEj>:
    1f0c:	28 ee       	ldi	r18, 0xE8	; 232
    1f0e:	33 e0       	ldi	r19, 0x03	; 3
    1f10:	09 c0       	rjmp	.+18     	; 0x1f24 <_ZN13OrangutanTime17delayMillisecondsEj+0x18>
    1f12:	f9 01       	movw	r30, r18
    1f14:	6f 93       	push	r22
    1f16:	64 e0       	ldi	r22, 0x04	; 4
    1f18:	6a 95       	dec	r22
    1f1a:	f1 f7       	brne	.-4      	; 0x1f18 <_ZN13OrangutanTime17delayMillisecondsEj+0xc>
    1f1c:	6f 91       	pop	r22
    1f1e:	31 97       	sbiw	r30, 0x01	; 1
    1f20:	c9 f7       	brne	.-14     	; 0x1f14 <_ZN13OrangutanTime17delayMillisecondsEj+0x8>
    1f22:	01 97       	sbiw	r24, 0x01	; 1
	return value;
}

void OrangutanTime::delayMilliseconds(unsigned int milliseconds)
{
	while (milliseconds--)
    1f24:	00 97       	sbiw	r24, 0x00	; 0
    1f26:	a9 f7       	brne	.-22     	; 0x1f12 <_ZN13OrangutanTime17delayMillisecondsEj+0x6>
	  delayMicroseconds(1000);
}
    1f28:	08 95       	ret

00001f2a <_ZN13OrangutanTime5init2Ev>:

void OrangutanTime::init2()
{
	TIMSK2 &= ~(1 << TOIE2);	// disable timer2 overflow interrupt
    1f2a:	a0 e7       	ldi	r26, 0x70	; 112
    1f2c:	b0 e0       	ldi	r27, 0x00	; 0
    1f2e:	8c 91       	ld	r24, X
    1f30:	8e 7f       	andi	r24, 0xFE	; 254
    1f32:	8c 93       	st	X, r24
		TCCR2A |= 0x01;
		TCCR2B &= 0xF0;
		TCCR2B |= 0x01;		// timer2 ticks at 20 MHz (prescaler = 1)
*/

	TCCR2A |= 0x03;		// fast PWM, TOP = 0xFF
    1f34:	e0 eb       	ldi	r30, 0xB0	; 176
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	80 81       	ld	r24, Z
    1f3a:	83 60       	ori	r24, 0x03	; 3
    1f3c:	80 83       	st	Z, r24
	TCCR2B &= 0xF0;
    1f3e:	e1 eb       	ldi	r30, 0xB1	; 177
    1f40:	f0 e0       	ldi	r31, 0x00	; 0
    1f42:	80 81       	ld	r24, Z
    1f44:	80 7f       	andi	r24, 0xF0	; 240
    1f46:	80 83       	st	Z, r24
	TCCR2B |= 0x02;		// timer 2 ticks at 2.5 MHz (prescaler = 8)
    1f48:	80 81       	ld	r24, Z
    1f4a:	82 60       	ori	r24, 0x02	; 2
    1f4c:	80 83       	st	Z, r24

	TIFR2 |= 1 << TOV2;	// clear timer2 overflow flag
    1f4e:	b8 9a       	sbi	0x17, 0	; 23
	TIMSK2 |= 1 << TOIE2;	// enable timer2 overflow interrupt
    1f50:	8c 91       	ld	r24, X
    1f52:	81 60       	ori	r24, 0x01	; 1
    1f54:	8c 93       	st	X, r24
	sei();				// enable global interrupts
    1f56:	78 94       	sei
}
    1f58:	08 95       	ret

00001f5a <_ZN13OrangutanTime4initEv>:

	static inline void init()
	{
		static unsigned char initialized = 0;

		if (!initialized)
    1f5a:	80 91 6a 01 	lds	r24, 0x016A
    1f5e:	88 23       	and	r24, r24
    1f60:	29 f4       	brne	.+10     	; 0x1f6c <_ZN13OrangutanTime4initEv+0x12>
		{
			initialized = 1;
    1f62:	81 e0       	ldi	r24, 0x01	; 1
    1f64:	80 93 6a 01 	sts	0x016A, r24
			init2();
    1f68:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <_ZN13OrangutanTime5init2Ev>
    1f6c:	08 95       	ret

00001f6e <_ZN13OrangutanTime2msEv>:
// differential time computations would give an incorrect result across an overflow.  Our
// method for tracking elapsed milliseconds gives a correct result when performing a time
// differential across an overflow.
unsigned long OrangutanTime::ms()
{
	init();
    1f6e:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <_ZN13OrangutanTime4initEv>
	unsigned long value;
	TIMSK2 &= ~(1 << TOIE2);	// disable timer2 overflow interrupt
    1f72:	e0 e7       	ldi	r30, 0x70	; 112
    1f74:	f0 e0       	ldi	r31, 0x00	; 0
    1f76:	80 81       	ld	r24, Z
    1f78:	8e 7f       	andi	r24, 0xFE	; 254
    1f7a:	80 83       	st	Z, r24
	value = msCounter;
    1f7c:	20 91 64 01 	lds	r18, 0x0164
    1f80:	30 91 65 01 	lds	r19, 0x0165
    1f84:	40 91 66 01 	lds	r20, 0x0166
    1f88:	50 91 67 01 	lds	r21, 0x0167
	TIMSK2 |= 1 << TOIE2;	// enable timer2 overflow interrupt
    1f8c:	80 81       	ld	r24, Z
    1f8e:	81 60       	ori	r24, 0x01	; 1
    1f90:	80 83       	st	Z, r24
	return value;
}
    1f92:	b9 01       	movw	r22, r18
    1f94:	ca 01       	movw	r24, r20
    1f96:	08 95       	ret

00001f98 <get_ms>:
	unsigned long get_ticks() { return OrangutanTime::ticks(); }
	unsigned long ticks_to_microseconds(unsigned long numTicks)
	{
		return OrangutanTime::ticksToMicroseconds(numTicks);
	}
	unsigned long get_ms() { return OrangutanTime::ms(); }
    1f98:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <_ZN13OrangutanTime2msEv>
    1f9c:	08 95       	ret

00001f9e <_ZN13OrangutanTime5ticksEv>:

// number of ticks (in units of 0.4 us) that have elapsed since OrangutanTime was
// initialized.
unsigned long OrangutanTime::ticks()
{
	init();
    1f9e:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <_ZN13OrangutanTime4initEv>
	TIMSK2 &= ~(1 << TOIE2);	// disable timer2 overflow interrupt
    1fa2:	80 91 70 00 	lds	r24, 0x0070
    1fa6:	8e 7f       	andi	r24, 0xFE	; 254
    1fa8:	80 93 70 00 	sts	0x0070, r24
	unsigned long numTicks = TCNT2 | tickCount;	// TCNT2 is lowest byte of tickCount
    1fac:	60 91 b2 00 	lds	r22, 0x00B2
    1fb0:	80 91 60 01 	lds	r24, 0x0160
    1fb4:	90 91 61 01 	lds	r25, 0x0161
    1fb8:	a0 91 62 01 	lds	r26, 0x0162
    1fbc:	b0 91 63 01 	lds	r27, 0x0163
	if (TIFR2 & (1 << TOV2))	// if TCNT2 has overflowed since we disabled t2 ovf interrupt
    1fc0:	b8 99       	sbic	0x17, 0	; 23
    1fc2:	05 c0       	rjmp	.+10     	; 0x1fce <_ZN13OrangutanTime5ticksEv+0x30>
// initialized.
unsigned long OrangutanTime::ticks()
{
	init();
	TIMSK2 &= ~(1 << TOIE2);	// disable timer2 overflow interrupt
	unsigned long numTicks = TCNT2 | tickCount;	// TCNT2 is lowest byte of tickCount
    1fc4:	26 2f       	mov	r18, r22
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	40 e0       	ldi	r20, 0x00	; 0
    1fca:	50 e0       	ldi	r21, 0x00	; 0
    1fcc:	11 c0       	rjmp	.+34     	; 0x1ff0 <_ZN13OrangutanTime5ticksEv+0x52>
	{
		// NOTE: it is important to perform this computation again.  If we use a value of TCNT2 read
		// before we checked for the overflow, it might be something like 255 while it becomes 0 after
		// the overflow.  Using an old value could produce a result that is bigger than it should be.
		// For example, the following line should *NOT* be: numTicks += 256;
		numTicks = TCNT2 | (tickCount + 256);		// compute ticks again and add 256 for the overflow
    1fce:	80 91 b2 00 	lds	r24, 0x00B2
    1fd2:	20 91 60 01 	lds	r18, 0x0160
    1fd6:	30 91 61 01 	lds	r19, 0x0161
    1fda:	40 91 62 01 	lds	r20, 0x0162
    1fde:	50 91 63 01 	lds	r21, 0x0163
    1fe2:	20 50       	subi	r18, 0x00	; 0
    1fe4:	3f 4f       	sbci	r19, 0xFF	; 255
    1fe6:	4f 4f       	sbci	r20, 0xFF	; 255
    1fe8:	5f 4f       	sbci	r21, 0xFF	; 255
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	a0 e0       	ldi	r26, 0x00	; 0
    1fee:	b0 e0       	ldi	r27, 0x00	; 0
    1ff0:	28 2b       	or	r18, r24
    1ff2:	39 2b       	or	r19, r25
    1ff4:	4a 2b       	or	r20, r26
    1ff6:	5b 2b       	or	r21, r27
	}
	TIMSK2 |= 1 << TOIE2;	// enable timer2 overflow interrupt
    1ff8:	80 91 70 00 	lds	r24, 0x0070
    1ffc:	81 60       	ori	r24, 0x01	; 1
    1ffe:	80 93 70 00 	sts	0x0070, r24
	return numTicks;
}
    2002:	b9 01       	movw	r22, r18
    2004:	ca 01       	movw	r24, r20
    2006:	08 95       	ret

00002008 <get_ticks>:
// There are some inline ones defined to alias to these in the C
// header files.  Also, delay_us() is only in the header, since it's
// inline assembly code.

extern "C" {
	unsigned long get_ticks() { return OrangutanTime::ticks(); }
    2008:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <_ZN13OrangutanTime5ticksEv>
    200c:	08 95       	ret

0000200e <_ZN13OrangutanTime5resetEv>:
}

// resets millisecond counter, but does not reset tick counter
void OrangutanTime::reset()
{
	init();
    200e:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <_ZN13OrangutanTime4initEv>
	TIMSK2 &= ~(1 << TOIE2);	// disable timer2 overflow interrupt
    2012:	e0 e7       	ldi	r30, 0x70	; 112
    2014:	f0 e0       	ldi	r31, 0x00	; 0
    2016:	80 81       	ld	r24, Z
    2018:	8e 7f       	andi	r24, 0xFE	; 254
    201a:	80 83       	st	Z, r24
	msCounter = 0;
    201c:	10 92 64 01 	sts	0x0164, r1
    2020:	10 92 65 01 	sts	0x0165, r1
    2024:	10 92 66 01 	sts	0x0166, r1
    2028:	10 92 67 01 	sts	0x0167, r1
	us_over_10 = 0;
    202c:	10 92 69 01 	sts	0x0169, r1
    2030:	10 92 68 01 	sts	0x0168, r1
	TIMSK2 |= 1 << TOIE2;	// enable timer2 overflow interrupt
    2034:	80 81       	ld	r24, Z
    2036:	81 60       	ori	r24, 0x01	; 1
    2038:	80 83       	st	Z, r24
}
    203a:	08 95       	ret

0000203c <time_reset>:
	{
		return OrangutanTime::ticksToMicroseconds(numTicks);
	}
	unsigned long get_ms() { return OrangutanTime::ms(); }
	void delay_ms(unsigned int milliseconds) { OrangutanTime::delayMilliseconds(milliseconds); }
	void time_reset() { OrangutanTime::reset(); }
    203c:	0e 94 07 10 	call	0x200e	; 0x200e <_ZN13OrangutanTime5resetEv>
    2040:	08 95       	ret

00002042 <__mulsi3>:
    2042:	62 9f       	mul	r22, r18
    2044:	d0 01       	movw	r26, r0
    2046:	73 9f       	mul	r23, r19
    2048:	f0 01       	movw	r30, r0
    204a:	82 9f       	mul	r24, r18
    204c:	e0 0d       	add	r30, r0
    204e:	f1 1d       	adc	r31, r1
    2050:	64 9f       	mul	r22, r20
    2052:	e0 0d       	add	r30, r0
    2054:	f1 1d       	adc	r31, r1
    2056:	92 9f       	mul	r25, r18
    2058:	f0 0d       	add	r31, r0
    205a:	83 9f       	mul	r24, r19
    205c:	f0 0d       	add	r31, r0
    205e:	74 9f       	mul	r23, r20
    2060:	f0 0d       	add	r31, r0
    2062:	65 9f       	mul	r22, r21
    2064:	f0 0d       	add	r31, r0
    2066:	99 27       	eor	r25, r25
    2068:	72 9f       	mul	r23, r18
    206a:	b0 0d       	add	r27, r0
    206c:	e1 1d       	adc	r30, r1
    206e:	f9 1f       	adc	r31, r25
    2070:	63 9f       	mul	r22, r19
    2072:	b0 0d       	add	r27, r0
    2074:	e1 1d       	adc	r30, r1
    2076:	f9 1f       	adc	r31, r25
    2078:	bd 01       	movw	r22, r26
    207a:	cf 01       	movw	r24, r30
    207c:	11 24       	eor	r1, r1
    207e:	08 95       	ret

00002080 <__udivmodqi4>:
    2080:	99 1b       	sub	r25, r25
    2082:	79 e0       	ldi	r23, 0x09	; 9
    2084:	04 c0       	rjmp	.+8      	; 0x208e <__udivmodqi4_ep>

00002086 <__udivmodqi4_loop>:
    2086:	99 1f       	adc	r25, r25
    2088:	96 17       	cp	r25, r22
    208a:	08 f0       	brcs	.+2      	; 0x208e <__udivmodqi4_ep>
    208c:	96 1b       	sub	r25, r22

0000208e <__udivmodqi4_ep>:
    208e:	88 1f       	adc	r24, r24
    2090:	7a 95       	dec	r23
    2092:	c9 f7       	brne	.-14     	; 0x2086 <__udivmodqi4_loop>
    2094:	80 95       	com	r24
    2096:	08 95       	ret

00002098 <__udivmodhi4>:
    2098:	aa 1b       	sub	r26, r26
    209a:	bb 1b       	sub	r27, r27
    209c:	51 e1       	ldi	r21, 0x11	; 17
    209e:	07 c0       	rjmp	.+14     	; 0x20ae <__udivmodhi4_ep>

000020a0 <__udivmodhi4_loop>:
    20a0:	aa 1f       	adc	r26, r26
    20a2:	bb 1f       	adc	r27, r27
    20a4:	a6 17       	cp	r26, r22
    20a6:	b7 07       	cpc	r27, r23
    20a8:	10 f0       	brcs	.+4      	; 0x20ae <__udivmodhi4_ep>
    20aa:	a6 1b       	sub	r26, r22
    20ac:	b7 0b       	sbc	r27, r23

000020ae <__udivmodhi4_ep>:
    20ae:	88 1f       	adc	r24, r24
    20b0:	99 1f       	adc	r25, r25
    20b2:	5a 95       	dec	r21
    20b4:	a9 f7       	brne	.-22     	; 0x20a0 <__udivmodhi4_loop>
    20b6:	80 95       	com	r24
    20b8:	90 95       	com	r25
    20ba:	bc 01       	movw	r22, r24
    20bc:	cd 01       	movw	r24, r26
    20be:	08 95       	ret

000020c0 <__divmodhi4>:
    20c0:	97 fb       	bst	r25, 7
    20c2:	09 2e       	mov	r0, r25
    20c4:	07 26       	eor	r0, r23
    20c6:	0a d0       	rcall	.+20     	; 0x20dc <__divmodhi4_neg1>
    20c8:	77 fd       	sbrc	r23, 7
    20ca:	04 d0       	rcall	.+8      	; 0x20d4 <__divmodhi4_neg2>
    20cc:	e5 df       	rcall	.-54     	; 0x2098 <__udivmodhi4>
    20ce:	06 d0       	rcall	.+12     	; 0x20dc <__divmodhi4_neg1>
    20d0:	00 20       	and	r0, r0
    20d2:	1a f4       	brpl	.+6      	; 0x20da <__divmodhi4_exit>

000020d4 <__divmodhi4_neg2>:
    20d4:	70 95       	com	r23
    20d6:	61 95       	neg	r22
    20d8:	7f 4f       	sbci	r23, 0xFF	; 255

000020da <__divmodhi4_exit>:
    20da:	08 95       	ret

000020dc <__divmodhi4_neg1>:
    20dc:	f6 f7       	brtc	.-4      	; 0x20da <__divmodhi4_exit>
    20de:	90 95       	com	r25
    20e0:	81 95       	neg	r24
    20e2:	9f 4f       	sbci	r25, 0xFF	; 255
    20e4:	08 95       	ret

000020e6 <__udivmodsi4>:
    20e6:	a1 e2       	ldi	r26, 0x21	; 33
    20e8:	1a 2e       	mov	r1, r26
    20ea:	aa 1b       	sub	r26, r26
    20ec:	bb 1b       	sub	r27, r27
    20ee:	fd 01       	movw	r30, r26
    20f0:	0d c0       	rjmp	.+26     	; 0x210c <__udivmodsi4_ep>

000020f2 <__udivmodsi4_loop>:
    20f2:	aa 1f       	adc	r26, r26
    20f4:	bb 1f       	adc	r27, r27
    20f6:	ee 1f       	adc	r30, r30
    20f8:	ff 1f       	adc	r31, r31
    20fa:	a2 17       	cp	r26, r18
    20fc:	b3 07       	cpc	r27, r19
    20fe:	e4 07       	cpc	r30, r20
    2100:	f5 07       	cpc	r31, r21
    2102:	20 f0       	brcs	.+8      	; 0x210c <__udivmodsi4_ep>
    2104:	a2 1b       	sub	r26, r18
    2106:	b3 0b       	sbc	r27, r19
    2108:	e4 0b       	sbc	r30, r20
    210a:	f5 0b       	sbc	r31, r21

0000210c <__udivmodsi4_ep>:
    210c:	66 1f       	adc	r22, r22
    210e:	77 1f       	adc	r23, r23
    2110:	88 1f       	adc	r24, r24
    2112:	99 1f       	adc	r25, r25
    2114:	1a 94       	dec	r1
    2116:	69 f7       	brne	.-38     	; 0x20f2 <__udivmodsi4_loop>
    2118:	60 95       	com	r22
    211a:	70 95       	com	r23
    211c:	80 95       	com	r24
    211e:	90 95       	com	r25
    2120:	9b 01       	movw	r18, r22
    2122:	ac 01       	movw	r20, r24
    2124:	bd 01       	movw	r22, r26
    2126:	cf 01       	movw	r24, r30
    2128:	08 95       	ret

0000212a <__divmodsi4>:
    212a:	97 fb       	bst	r25, 7
    212c:	09 2e       	mov	r0, r25
    212e:	05 26       	eor	r0, r21
    2130:	0e d0       	rcall	.+28     	; 0x214e <__divmodsi4_neg1>
    2132:	57 fd       	sbrc	r21, 7
    2134:	04 d0       	rcall	.+8      	; 0x213e <__divmodsi4_neg2>
    2136:	d7 df       	rcall	.-82     	; 0x20e6 <__udivmodsi4>
    2138:	0a d0       	rcall	.+20     	; 0x214e <__divmodsi4_neg1>
    213a:	00 1c       	adc	r0, r0
    213c:	38 f4       	brcc	.+14     	; 0x214c <__divmodsi4_exit>

0000213e <__divmodsi4_neg2>:
    213e:	50 95       	com	r21
    2140:	40 95       	com	r20
    2142:	30 95       	com	r19
    2144:	21 95       	neg	r18
    2146:	3f 4f       	sbci	r19, 0xFF	; 255
    2148:	4f 4f       	sbci	r20, 0xFF	; 255
    214a:	5f 4f       	sbci	r21, 0xFF	; 255

0000214c <__divmodsi4_exit>:
    214c:	08 95       	ret

0000214e <__divmodsi4_neg1>:
    214e:	f6 f7       	brtc	.-4      	; 0x214c <__divmodsi4_exit>
    2150:	90 95       	com	r25
    2152:	80 95       	com	r24
    2154:	70 95       	com	r23
    2156:	61 95       	neg	r22
    2158:	7f 4f       	sbci	r23, 0xFF	; 255
    215a:	8f 4f       	sbci	r24, 0xFF	; 255
    215c:	9f 4f       	sbci	r25, 0xFF	; 255
    215e:	08 95       	ret

00002160 <__prologue_saves__>:
    2160:	2f 92       	push	r2
    2162:	3f 92       	push	r3
    2164:	4f 92       	push	r4
    2166:	5f 92       	push	r5
    2168:	6f 92       	push	r6
    216a:	7f 92       	push	r7
    216c:	8f 92       	push	r8
    216e:	9f 92       	push	r9
    2170:	af 92       	push	r10
    2172:	bf 92       	push	r11
    2174:	cf 92       	push	r12
    2176:	df 92       	push	r13
    2178:	ef 92       	push	r14
    217a:	ff 92       	push	r15
    217c:	0f 93       	push	r16
    217e:	1f 93       	push	r17
    2180:	cf 93       	push	r28
    2182:	df 93       	push	r29
    2184:	cd b7       	in	r28, 0x3d	; 61
    2186:	de b7       	in	r29, 0x3e	; 62
    2188:	ca 1b       	sub	r28, r26
    218a:	db 0b       	sbc	r29, r27
    218c:	0f b6       	in	r0, 0x3f	; 63
    218e:	f8 94       	cli
    2190:	de bf       	out	0x3e, r29	; 62
    2192:	0f be       	out	0x3f, r0	; 63
    2194:	cd bf       	out	0x3d, r28	; 61
    2196:	09 94       	ijmp

00002198 <__epilogue_restores__>:
    2198:	2a 88       	ldd	r2, Y+18	; 0x12
    219a:	39 88       	ldd	r3, Y+17	; 0x11
    219c:	48 88       	ldd	r4, Y+16	; 0x10
    219e:	5f 84       	ldd	r5, Y+15	; 0x0f
    21a0:	6e 84       	ldd	r6, Y+14	; 0x0e
    21a2:	7d 84       	ldd	r7, Y+13	; 0x0d
    21a4:	8c 84       	ldd	r8, Y+12	; 0x0c
    21a6:	9b 84       	ldd	r9, Y+11	; 0x0b
    21a8:	aa 84       	ldd	r10, Y+10	; 0x0a
    21aa:	b9 84       	ldd	r11, Y+9	; 0x09
    21ac:	c8 84       	ldd	r12, Y+8	; 0x08
    21ae:	df 80       	ldd	r13, Y+7	; 0x07
    21b0:	ee 80       	ldd	r14, Y+6	; 0x06
    21b2:	fd 80       	ldd	r15, Y+5	; 0x05
    21b4:	0c 81       	ldd	r16, Y+4	; 0x04
    21b6:	1b 81       	ldd	r17, Y+3	; 0x03
    21b8:	aa 81       	ldd	r26, Y+2	; 0x02
    21ba:	b9 81       	ldd	r27, Y+1	; 0x01
    21bc:	ce 0f       	add	r28, r30
    21be:	d1 1d       	adc	r29, r1
    21c0:	0f b6       	in	r0, 0x3f	; 63
    21c2:	f8 94       	cli
    21c4:	de bf       	out	0x3e, r29	; 62
    21c6:	0f be       	out	0x3f, r0	; 63
    21c8:	cd bf       	out	0x3d, r28	; 61
    21ca:	ed 01       	movw	r28, r26
    21cc:	08 95       	ret

000021ce <__tablejump2__>:
    21ce:	ee 0f       	add	r30, r30
    21d0:	ff 1f       	adc	r31, r31

000021d2 <__tablejump__>:
    21d2:	05 90       	lpm	r0, Z+
    21d4:	f4 91       	lpm	r31, Z+
    21d6:	e0 2d       	mov	r30, r0
    21d8:	09 94       	ijmp

000021da <malloc>:
    21da:	cf 93       	push	r28
    21dc:	df 93       	push	r29
    21de:	bc 01       	movw	r22, r24
    21e0:	82 30       	cpi	r24, 0x02	; 2
    21e2:	91 05       	cpc	r25, r1
    21e4:	10 f4       	brcc	.+4      	; 0x21ea <malloc+0x10>
    21e6:	62 e0       	ldi	r22, 0x02	; 2
    21e8:	70 e0       	ldi	r23, 0x00	; 0
    21ea:	a0 91 6d 01 	lds	r26, 0x016D
    21ee:	b0 91 6e 01 	lds	r27, 0x016E
    21f2:	ed 01       	movw	r28, r26
    21f4:	e0 e0       	ldi	r30, 0x00	; 0
    21f6:	f0 e0       	ldi	r31, 0x00	; 0
    21f8:	40 e0       	ldi	r20, 0x00	; 0
    21fa:	50 e0       	ldi	r21, 0x00	; 0
    21fc:	21 c0       	rjmp	.+66     	; 0x2240 <malloc+0x66>
    21fe:	88 81       	ld	r24, Y
    2200:	99 81       	ldd	r25, Y+1	; 0x01
    2202:	86 17       	cp	r24, r22
    2204:	97 07       	cpc	r25, r23
    2206:	69 f4       	brne	.+26     	; 0x2222 <malloc+0x48>
    2208:	8a 81       	ldd	r24, Y+2	; 0x02
    220a:	9b 81       	ldd	r25, Y+3	; 0x03
    220c:	30 97       	sbiw	r30, 0x00	; 0
    220e:	19 f0       	breq	.+6      	; 0x2216 <malloc+0x3c>
    2210:	93 83       	std	Z+3, r25	; 0x03
    2212:	82 83       	std	Z+2, r24	; 0x02
    2214:	04 c0       	rjmp	.+8      	; 0x221e <malloc+0x44>
    2216:	90 93 6e 01 	sts	0x016E, r25
    221a:	80 93 6d 01 	sts	0x016D, r24
    221e:	fe 01       	movw	r30, r28
    2220:	34 c0       	rjmp	.+104    	; 0x228a <malloc+0xb0>
    2222:	68 17       	cp	r22, r24
    2224:	79 07       	cpc	r23, r25
    2226:	38 f4       	brcc	.+14     	; 0x2236 <malloc+0x5c>
    2228:	41 15       	cp	r20, r1
    222a:	51 05       	cpc	r21, r1
    222c:	19 f0       	breq	.+6      	; 0x2234 <malloc+0x5a>
    222e:	84 17       	cp	r24, r20
    2230:	95 07       	cpc	r25, r21
    2232:	08 f4       	brcc	.+2      	; 0x2236 <malloc+0x5c>
    2234:	ac 01       	movw	r20, r24
    2236:	fe 01       	movw	r30, r28
    2238:	8a 81       	ldd	r24, Y+2	; 0x02
    223a:	9b 81       	ldd	r25, Y+3	; 0x03
    223c:	9c 01       	movw	r18, r24
    223e:	e9 01       	movw	r28, r18
    2240:	20 97       	sbiw	r28, 0x00	; 0
    2242:	e9 f6       	brne	.-70     	; 0x21fe <malloc+0x24>
    2244:	41 15       	cp	r20, r1
    2246:	51 05       	cpc	r21, r1
    2248:	a9 f1       	breq	.+106    	; 0x22b4 <malloc+0xda>
    224a:	ca 01       	movw	r24, r20
    224c:	86 1b       	sub	r24, r22
    224e:	97 0b       	sbc	r25, r23
    2250:	04 97       	sbiw	r24, 0x04	; 4
    2252:	08 f4       	brcc	.+2      	; 0x2256 <malloc+0x7c>
    2254:	ba 01       	movw	r22, r20
    2256:	e0 e0       	ldi	r30, 0x00	; 0
    2258:	f0 e0       	ldi	r31, 0x00	; 0
    225a:	2a c0       	rjmp	.+84     	; 0x22b0 <malloc+0xd6>
    225c:	8d 91       	ld	r24, X+
    225e:	9c 91       	ld	r25, X
    2260:	11 97       	sbiw	r26, 0x01	; 1
    2262:	84 17       	cp	r24, r20
    2264:	95 07       	cpc	r25, r21
    2266:	f9 f4       	brne	.+62     	; 0x22a6 <malloc+0xcc>
    2268:	64 17       	cp	r22, r20
    226a:	75 07       	cpc	r23, r21
    226c:	81 f4       	brne	.+32     	; 0x228e <malloc+0xb4>
    226e:	12 96       	adiw	r26, 0x02	; 2
    2270:	8d 91       	ld	r24, X+
    2272:	9c 91       	ld	r25, X
    2274:	13 97       	sbiw	r26, 0x03	; 3
    2276:	30 97       	sbiw	r30, 0x00	; 0
    2278:	19 f0       	breq	.+6      	; 0x2280 <malloc+0xa6>
    227a:	93 83       	std	Z+3, r25	; 0x03
    227c:	82 83       	std	Z+2, r24	; 0x02
    227e:	04 c0       	rjmp	.+8      	; 0x2288 <malloc+0xae>
    2280:	90 93 6e 01 	sts	0x016E, r25
    2284:	80 93 6d 01 	sts	0x016D, r24
    2288:	fd 01       	movw	r30, r26
    228a:	32 96       	adiw	r30, 0x02	; 2
    228c:	4f c0       	rjmp	.+158    	; 0x232c <malloc+0x152>
    228e:	ca 01       	movw	r24, r20
    2290:	86 1b       	sub	r24, r22
    2292:	97 0b       	sbc	r25, r23
    2294:	fd 01       	movw	r30, r26
    2296:	e8 0f       	add	r30, r24
    2298:	f9 1f       	adc	r31, r25
    229a:	61 93       	st	Z+, r22
    229c:	71 93       	st	Z+, r23
    229e:	02 97       	sbiw	r24, 0x02	; 2
    22a0:	8d 93       	st	X+, r24
    22a2:	9c 93       	st	X, r25
    22a4:	43 c0       	rjmp	.+134    	; 0x232c <malloc+0x152>
    22a6:	fd 01       	movw	r30, r26
    22a8:	82 81       	ldd	r24, Z+2	; 0x02
    22aa:	93 81       	ldd	r25, Z+3	; 0x03
    22ac:	9c 01       	movw	r18, r24
    22ae:	d9 01       	movw	r26, r18
    22b0:	10 97       	sbiw	r26, 0x00	; 0
    22b2:	a1 f6       	brne	.-88     	; 0x225c <malloc+0x82>
    22b4:	80 91 6b 01 	lds	r24, 0x016B
    22b8:	90 91 6c 01 	lds	r25, 0x016C
    22bc:	89 2b       	or	r24, r25
    22be:	41 f4       	brne	.+16     	; 0x22d0 <malloc+0xf6>
    22c0:	80 91 3b 01 	lds	r24, 0x013B
    22c4:	90 91 3c 01 	lds	r25, 0x013C
    22c8:	90 93 6c 01 	sts	0x016C, r25
    22cc:	80 93 6b 01 	sts	0x016B, r24
    22d0:	40 91 3d 01 	lds	r20, 0x013D
    22d4:	50 91 3e 01 	lds	r21, 0x013E
    22d8:	41 15       	cp	r20, r1
    22da:	51 05       	cpc	r21, r1
    22dc:	41 f4       	brne	.+16     	; 0x22ee <malloc+0x114>
    22de:	4d b7       	in	r20, 0x3d	; 61
    22e0:	5e b7       	in	r21, 0x3e	; 62
    22e2:	80 91 39 01 	lds	r24, 0x0139
    22e6:	90 91 3a 01 	lds	r25, 0x013A
    22ea:	48 1b       	sub	r20, r24
    22ec:	59 0b       	sbc	r21, r25
    22ee:	20 91 6b 01 	lds	r18, 0x016B
    22f2:	30 91 6c 01 	lds	r19, 0x016C
    22f6:	24 17       	cp	r18, r20
    22f8:	35 07       	cpc	r19, r21
    22fa:	b0 f4       	brcc	.+44     	; 0x2328 <malloc+0x14e>
    22fc:	ca 01       	movw	r24, r20
    22fe:	82 1b       	sub	r24, r18
    2300:	93 0b       	sbc	r25, r19
    2302:	86 17       	cp	r24, r22
    2304:	97 07       	cpc	r25, r23
    2306:	80 f0       	brcs	.+32     	; 0x2328 <malloc+0x14e>
    2308:	ab 01       	movw	r20, r22
    230a:	4e 5f       	subi	r20, 0xFE	; 254
    230c:	5f 4f       	sbci	r21, 0xFF	; 255
    230e:	84 17       	cp	r24, r20
    2310:	95 07       	cpc	r25, r21
    2312:	50 f0       	brcs	.+20     	; 0x2328 <malloc+0x14e>
    2314:	42 0f       	add	r20, r18
    2316:	53 1f       	adc	r21, r19
    2318:	50 93 6c 01 	sts	0x016C, r21
    231c:	40 93 6b 01 	sts	0x016B, r20
    2320:	f9 01       	movw	r30, r18
    2322:	61 93       	st	Z+, r22
    2324:	71 93       	st	Z+, r23
    2326:	02 c0       	rjmp	.+4      	; 0x232c <malloc+0x152>
    2328:	e0 e0       	ldi	r30, 0x00	; 0
    232a:	f0 e0       	ldi	r31, 0x00	; 0
    232c:	cf 01       	movw	r24, r30
    232e:	df 91       	pop	r29
    2330:	cf 91       	pop	r28
    2332:	08 95       	ret

00002334 <free>:
    2334:	cf 93       	push	r28
    2336:	df 93       	push	r29
    2338:	00 97       	sbiw	r24, 0x00	; 0
    233a:	09 f4       	brne	.+2      	; 0x233e <free+0xa>
    233c:	50 c0       	rjmp	.+160    	; 0x23de <free+0xaa>
    233e:	ec 01       	movw	r28, r24
    2340:	22 97       	sbiw	r28, 0x02	; 2
    2342:	1b 82       	std	Y+3, r1	; 0x03
    2344:	1a 82       	std	Y+2, r1	; 0x02
    2346:	a0 91 6d 01 	lds	r26, 0x016D
    234a:	b0 91 6e 01 	lds	r27, 0x016E
    234e:	10 97       	sbiw	r26, 0x00	; 0
    2350:	09 f1       	breq	.+66     	; 0x2394 <free+0x60>
    2352:	40 e0       	ldi	r20, 0x00	; 0
    2354:	50 e0       	ldi	r21, 0x00	; 0
    2356:	ac 17       	cp	r26, r28
    2358:	bd 07       	cpc	r27, r29
    235a:	08 f1       	brcs	.+66     	; 0x239e <free+0x6a>
    235c:	bb 83       	std	Y+3, r27	; 0x03
    235e:	aa 83       	std	Y+2, r26	; 0x02
    2360:	fe 01       	movw	r30, r28
    2362:	21 91       	ld	r18, Z+
    2364:	31 91       	ld	r19, Z+
    2366:	e2 0f       	add	r30, r18
    2368:	f3 1f       	adc	r31, r19
    236a:	ae 17       	cp	r26, r30
    236c:	bf 07       	cpc	r27, r31
    236e:	79 f4       	brne	.+30     	; 0x238e <free+0x5a>
    2370:	8d 91       	ld	r24, X+
    2372:	9c 91       	ld	r25, X
    2374:	11 97       	sbiw	r26, 0x01	; 1
    2376:	28 0f       	add	r18, r24
    2378:	39 1f       	adc	r19, r25
    237a:	2e 5f       	subi	r18, 0xFE	; 254
    237c:	3f 4f       	sbci	r19, 0xFF	; 255
    237e:	39 83       	std	Y+1, r19	; 0x01
    2380:	28 83       	st	Y, r18
    2382:	12 96       	adiw	r26, 0x02	; 2
    2384:	8d 91       	ld	r24, X+
    2386:	9c 91       	ld	r25, X
    2388:	13 97       	sbiw	r26, 0x03	; 3
    238a:	9b 83       	std	Y+3, r25	; 0x03
    238c:	8a 83       	std	Y+2, r24	; 0x02
    238e:	41 15       	cp	r20, r1
    2390:	51 05       	cpc	r21, r1
    2392:	71 f4       	brne	.+28     	; 0x23b0 <free+0x7c>
    2394:	d0 93 6e 01 	sts	0x016E, r29
    2398:	c0 93 6d 01 	sts	0x016D, r28
    239c:	20 c0       	rjmp	.+64     	; 0x23de <free+0xaa>
    239e:	12 96       	adiw	r26, 0x02	; 2
    23a0:	8d 91       	ld	r24, X+
    23a2:	9c 91       	ld	r25, X
    23a4:	13 97       	sbiw	r26, 0x03	; 3
    23a6:	ad 01       	movw	r20, r26
    23a8:	00 97       	sbiw	r24, 0x00	; 0
    23aa:	11 f0       	breq	.+4      	; 0x23b0 <free+0x7c>
    23ac:	dc 01       	movw	r26, r24
    23ae:	d3 cf       	rjmp	.-90     	; 0x2356 <free+0x22>
    23b0:	fa 01       	movw	r30, r20
    23b2:	d3 83       	std	Z+3, r29	; 0x03
    23b4:	c2 83       	std	Z+2, r28	; 0x02
    23b6:	21 91       	ld	r18, Z+
    23b8:	31 91       	ld	r19, Z+
    23ba:	e2 0f       	add	r30, r18
    23bc:	f3 1f       	adc	r31, r19
    23be:	ce 17       	cp	r28, r30
    23c0:	df 07       	cpc	r29, r31
    23c2:	69 f4       	brne	.+26     	; 0x23de <free+0xaa>
    23c4:	88 81       	ld	r24, Y
    23c6:	99 81       	ldd	r25, Y+1	; 0x01
    23c8:	28 0f       	add	r18, r24
    23ca:	39 1f       	adc	r19, r25
    23cc:	2e 5f       	subi	r18, 0xFE	; 254
    23ce:	3f 4f       	sbci	r19, 0xFF	; 255
    23d0:	fa 01       	movw	r30, r20
    23d2:	31 83       	std	Z+1, r19	; 0x01
    23d4:	20 83       	st	Z, r18
    23d6:	8a 81       	ldd	r24, Y+2	; 0x02
    23d8:	9b 81       	ldd	r25, Y+3	; 0x03
    23da:	93 83       	std	Z+3, r25	; 0x03
    23dc:	82 83       	std	Z+2, r24	; 0x02
    23de:	df 91       	pop	r29
    23e0:	cf 91       	pop	r28
    23e2:	08 95       	ret

000023e4 <fdevopen>:
    23e4:	0f 93       	push	r16
    23e6:	1f 93       	push	r17
    23e8:	cf 93       	push	r28
    23ea:	df 93       	push	r29
    23ec:	8c 01       	movw	r16, r24
    23ee:	eb 01       	movw	r28, r22
    23f0:	00 97       	sbiw	r24, 0x00	; 0
    23f2:	31 f4       	brne	.+12     	; 0x2400 <fdevopen+0x1c>
    23f4:	61 15       	cp	r22, r1
    23f6:	71 05       	cpc	r23, r1
    23f8:	19 f4       	brne	.+6      	; 0x2400 <fdevopen+0x1c>
    23fa:	20 e0       	ldi	r18, 0x00	; 0
    23fc:	30 e0       	ldi	r19, 0x00	; 0
    23fe:	38 c0       	rjmp	.+112    	; 0x2470 <fdevopen+0x8c>
    2400:	81 e0       	ldi	r24, 0x01	; 1
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	6e e0       	ldi	r22, 0x0E	; 14
    2406:	70 e0       	ldi	r23, 0x00	; 0
    2408:	0e 94 3e 12 	call	0x247c	; 0x247c <calloc>
    240c:	fc 01       	movw	r30, r24
    240e:	9c 01       	movw	r18, r24
    2410:	00 97       	sbiw	r24, 0x00	; 0
    2412:	71 f1       	breq	.+92     	; 0x2470 <fdevopen+0x8c>
    2414:	80 e8       	ldi	r24, 0x80	; 128
    2416:	83 83       	std	Z+3, r24	; 0x03
    2418:	20 97       	sbiw	r28, 0x00	; 0
    241a:	71 f0       	breq	.+28     	; 0x2438 <fdevopen+0x54>
    241c:	d3 87       	std	Z+11, r29	; 0x0b
    241e:	c2 87       	std	Z+10, r28	; 0x0a
    2420:	81 e8       	ldi	r24, 0x81	; 129
    2422:	83 83       	std	Z+3, r24	; 0x03
    2424:	80 91 6f 01 	lds	r24, 0x016F
    2428:	90 91 70 01 	lds	r25, 0x0170
    242c:	89 2b       	or	r24, r25
    242e:	21 f4       	brne	.+8      	; 0x2438 <fdevopen+0x54>
    2430:	f0 93 70 01 	sts	0x0170, r31
    2434:	e0 93 6f 01 	sts	0x016F, r30
    2438:	01 15       	cp	r16, r1
    243a:	11 05       	cpc	r17, r1
    243c:	c9 f0       	breq	.+50     	; 0x2470 <fdevopen+0x8c>
    243e:	11 87       	std	Z+9, r17	; 0x09
    2440:	00 87       	std	Z+8, r16	; 0x08
    2442:	83 81       	ldd	r24, Z+3	; 0x03
    2444:	82 60       	ori	r24, 0x02	; 2
    2446:	83 83       	std	Z+3, r24	; 0x03
    2448:	80 91 71 01 	lds	r24, 0x0171
    244c:	90 91 72 01 	lds	r25, 0x0172
    2450:	89 2b       	or	r24, r25
    2452:	71 f4       	brne	.+28     	; 0x2470 <fdevopen+0x8c>
    2454:	f0 93 72 01 	sts	0x0172, r31
    2458:	e0 93 71 01 	sts	0x0171, r30
    245c:	80 91 73 01 	lds	r24, 0x0173
    2460:	90 91 74 01 	lds	r25, 0x0174
    2464:	89 2b       	or	r24, r25
    2466:	21 f4       	brne	.+8      	; 0x2470 <fdevopen+0x8c>
    2468:	f0 93 74 01 	sts	0x0174, r31
    246c:	e0 93 73 01 	sts	0x0173, r30
    2470:	c9 01       	movw	r24, r18
    2472:	df 91       	pop	r29
    2474:	cf 91       	pop	r28
    2476:	1f 91       	pop	r17
    2478:	0f 91       	pop	r16
    247a:	08 95       	ret

0000247c <calloc>:
    247c:	0f 93       	push	r16
    247e:	1f 93       	push	r17
    2480:	cf 93       	push	r28
    2482:	df 93       	push	r29
    2484:	68 9f       	mul	r22, r24
    2486:	80 01       	movw	r16, r0
    2488:	69 9f       	mul	r22, r25
    248a:	10 0d       	add	r17, r0
    248c:	78 9f       	mul	r23, r24
    248e:	10 0d       	add	r17, r0
    2490:	11 24       	eor	r1, r1
    2492:	c8 01       	movw	r24, r16
    2494:	0e 94 ed 10 	call	0x21da	; 0x21da <malloc>
    2498:	ec 01       	movw	r28, r24
    249a:	00 97       	sbiw	r24, 0x00	; 0
    249c:	29 f0       	breq	.+10     	; 0x24a8 <calloc+0x2c>
    249e:	60 e0       	ldi	r22, 0x00	; 0
    24a0:	70 e0       	ldi	r23, 0x00	; 0
    24a2:	a8 01       	movw	r20, r16
    24a4:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <memset>
    24a8:	ce 01       	movw	r24, r28
    24aa:	df 91       	pop	r29
    24ac:	cf 91       	pop	r28
    24ae:	1f 91       	pop	r17
    24b0:	0f 91       	pop	r16
    24b2:	08 95       	ret

000024b4 <memset>:
    24b4:	dc 01       	movw	r26, r24
    24b6:	01 c0       	rjmp	.+2      	; 0x24ba <memset+0x6>
    24b8:	6d 93       	st	X+, r22
    24ba:	41 50       	subi	r20, 0x01	; 1
    24bc:	50 40       	sbci	r21, 0x00	; 0
    24be:	e0 f7       	brcc	.-8      	; 0x24b8 <memset+0x4>
    24c0:	08 95       	ret

000024c2 <_exit>:
    24c2:	f8 94       	cli

000024c4 <__stop_program>:
    24c4:	ff cf       	rjmp	.-2      	; 0x24c4 <__stop_program>
